{"version":3,"sources":["action-types/index.js","store/reducers/products-reducer.js","store/reducers/properties-reducer.js","store/reducers/product-card-reducer.js","store/reducers/notifications-reducer.js","store/reducers/isAuth-reducer.js","store/store.js","components/error-indicator/error-indicator.js","components/error-indicator/index.js","components/error-boundry/index.js","components/error-boundry/error-boundry.js","services/firebase-service.js","store/actions/isAuth-actions.js","styles/customizing-material-ui-components/theme.js","styles/customizing-material-ui-components/button-login-style.js","components/error-message-text/index.js","components/error-message-text/error-message-text.js","components/login/login.js","components/spinner/index.js","components/spinner/spinner.js","components/login/login-Container.js","styles/customizing-material-ui-components/button-registration-style.js","components/registration/registration.js","components/registration/registration-Container.js","components/universal-table-pagination/index.js","components/universal-table-pagination/universal-table-pagination.js","components/product-list-table/product-list-table-header.js","components/product-list-table/index.js","components/product-list-table/product-list-table.js","components/search-panel/index.js","components/search-panel/search-panel.js","store/actions/propducts-actions.js","store/actions/notifications-actions.js","components/product-list/product-list.js","components/product-list/index.js","components/property-list-table/property-list-table-header.js","components/property-list-table/index.js","components/property-list-table/property-list-table.js","store/actions/properties-actions.js","components/property-list/property-list.js","components/property-list/index.js","styles/customizing-material-ui-components/add-item-label-style.js","styles/customizing-material-ui-components/add-item-input-style.js","styles/customizing-material-ui-components/button-save-style.js","styles/customizing-material-ui-components/add-property-radio-style.js","img/Ellipse.svg","components/styled-radio-icon/index.js","components/styled-radio-icon/styled-radio-button.js","components/add-property/index.js","components/add-property/add-property.js","components/add-property/add-property-Container.js","styles/customizing-material-ui-components/add-item-select-style.js","styles/customizing-material-ui-components/button-add-property-style.js","styles/customizing-material-ui-components/add-prop-input-style.js","components/add-property-to-product/index.js","components/add-property-to-product/add-property-to-product.js","styles/customizing-material-ui-components/button-upload-style.js","styles/customizing-material-ui-components/theme-upload-btn.js","styles/customizing-material-ui-components/add-item-textarea-style.js","components/thumb/index.js","components/thumb/thumb.js","components/price-format-input/index.js","components/price-format-input/price-format-input.js","services/firebase-config.js","components/add-item/add-item.js","store/actions/propduct-card-actions.js","components/add-item/add-item-Container.js","styles/customizing-material-ui-components/product-card-item-select-style.js","components/product-card/product-card.js","components/product-card/product-card-Container.js","components/app/index.js","components/app/app.js","components/notifications/notifications.js","components/notifications/notifications-Container.js","index.js"],"names":["FETCH_PRODUCTS_SUCCESS","FETCH_PRODUCTS_SPINNER_OPEN","FETCH_PRODUCTS_FAILURE","FETCH_SELECTED_PRODUCT_SUCCESS","FETCH_SELECTED_PRODUCT_REQUEST","FETCH_SELECTED_PRODUCT_FAILURE","CLEAR_SELECTED_PRODUCT","FETCH_PROPERTIES_SUCCESS","FETCH_PROPERTIES_SPINNER_OPEN","FETCH_PROPERTIES_SPINNER_CLOSE","FETCH_PROPERTIES_FAILURE","NOTIFICATION_CREATED_PRODUCT","NOTIFICATION_EDITED_PRODUCT","NOTIFICATION_DELETED_PRODUCT","NOTIFICATION_CREATED_PROPERTY","NOTIFICATION_DELETED_PROPERTY","NOTIFICATION_GO_TO_CLOSE","NOTIFICATION_STATUS_RESET","USER_IS_LOGGED_IN","USER_IS_LOGGED_OUT","USER_IS_LOGGED_REQUEST","productsReducer","state","action","undefined","products","loading","error","type","payload","propertiesReducer","properties","productCardReducer","selectedProduct","notificationsReducer","showNotification","path","isEditing","deletedItem","isAuthReducer","logIn","email","reducers","combineReducers","notifications","isAuth","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ErrorIndicator","className","to","ErrorBoundry","hasError","errorInfo","this","setState","props","children","Component","getItems","dispatch","items","itemsLoaded","firebase","database","ref","child","on","snap","data","val","deleteItem","key","itemError","a","db","dbDataRef","set","userLogOut","auth","signOut","then","console","log","catch","e","postItemsToDatabase","newValues","itemSpinnerClose","notificationItem","push","putItemsToDatabase","itemId","getDateOfChange","ServerValue","TIMESTAMP","userIsAuth","userIsAuthRequest","userIsLoggedIn","userIsNotLoggedIn","onAuthStateChanged","firebaseUser","getUserAuth","theme","createMuiTheme","typography","button","fontFamily","fontStyle","fontWeight","fontSize","lineHeight","useLoginButtonStyles","makeStyles","root","background","borderRadius","border","color","height","width","label","textTransform","ErrorMessageText","message","withRouter","history","classes","useState","errorMessage","setErrorMessage","validationSchema","yup","shape","typeError","min","max","required","password","formik","useFormik","initialValues","showPassword","onSubmit","values","signInWithEmailAndPassword","submitLogIn","validateOnBlur","errors","touched","handleChange","handleBlur","isValid","handleSubmit","dirty","setFieldValue","FormControl","fullWidth","FormLabel","OutlinedInput","variant","notched","placeholder","name","onChange","onBlur","value","FormHelperText","endAdornment","InputAdornment","position","IconButton","onClick","edge","ThemeProvider","Button","disabled","Spinner","backdrop","zIndex","drawer","useStyles","Backdrop","open","CircularProgress","mapDispatchToProps","connect","useEffect","useRegistrationButtonStyles","secondName","confirmPassword","oneOf","showConfirmPassword","createUserWithEmailAndPassword","submitRegistration","UniversalTablePagination","array","rowsPerPage","page","handleChangePage","handleChangeRowsPerPage","flexShrink","marginLeft","spacing","TablePagination","rowsPerPageOptions","count","length","SelectProps","inputProps","native","onChangePage","onChangeRowsPerPage","ActionsComponent","useTheme","event","aria-label","direction","Math","ceil","ProductListTableHeader","order","orderBy","onRequestSort","visuallyHidden","clip","margin","overflow","padding","top","TableHead","TableRow","id","map","headCell","TableCell","sortDirection","align","TableSortLabel","active","property","IconComponent","ExpandMoreIcon","ProductListTable","onDeleted","productsError","deletedProduct","palette","primary","main","ruRU","React","setPage","setRowsPerPage","emptyRows","descendingComparator","b","getComparator","stableSort","comparator","stabilizedThis","el","index","sort","setOrder","setOrderBy","TableContainer","Table","TableBody","slice","product","itemName","price","dateOfChange","formattedPrice","toLocaleString","formattedDateOfChange","timestamp","d","Date","setTime","getDate","getMonth","getFullYear","toString","substr","timestampToDate","style","colSpan","TableFooter","newPage","parseInt","target","SearchPanel","onSearchChange","termSetup","onColumnChange","columnChange","TextField","size","InputProps","startAdornment","InputLabel","Select","defaultValue","MenuItem","productsLoaded","newItems","objectsToArray","Object","getKeysToArray","keys","i","productsSpinnerOpen","fetchProducts","resetNotifications","ProductList","term","columnName","searchItems","arr","filter","toLowerCase","indexOf","visibleItems","PropertyListTableHeader","PropertyListTable","propertiesError","deletedProperty","propertyName","propertyType","propertiesLoaded","propertiesSpinnerOpen","fetchProperties","PropertyList","useAddItemLabelStyles","opacity","letterSpacing","useAddItemInputStyles","maxWidth","input","useSaveButtonStyles","boxShadow","usePropertyLabelStyles","StyledRadio","backgroundColor","icon","backgroundImage","outline","outlineOffset","checkedIcon","image","backgroundRepeat","backgroundPosition","Radio","disableRipple","clsx","AddProperty","createdProperty","propertiesSpinnerClose","classesLabel","classesInput","classesSaveBtn","classesRadioButtons","test","find","validateNames","trimmedPropertyName","trim","getError","multiline","focused","RadioGroup","FormControlLabel","control","useAddItemSelectStyles","formControl","paddingTop","paddingBottom","useAddPropertyButtonStyles","useAddPropInputStyles","marginRight","AddPropertyToProduct","classesSelect","classesButton","propertiesOfProduct","lastProperties","setLastProperties","result","x","some","y","propertiesWithEditing","selectedWithLastProperties","propName","selectedProperty","renderMenuItems","item","renderValueInputs","selectedProp","nameOfFieldArray","remove","propertyValue","selectedPropValue","idx","propertyOfProduct","pushSelectedProperties","lastProps","removeSelectedProperties","useUploadButtonStyles","minHeight","justifyContent","themeUploadBtn","useAddItemTextareaStyles","Thumb","thumb","componentWillReceiveProps","nextProps","file","reader","FileReader","onloadend","readAsDataURL","src","alt","PriceFormatInput","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","storage","editingProduct","clearSelectedProduct","createdProduct","editedProduct","productsSpinnerClose","setImage","classesUploadBtn","classesTextarea","integer","charAt","of","nullable","fileUrl","description","trimmedItemName","trimmedDescription","numberedPrice","String","replace","trimmedPropsOfProduct","Array","isArray","propValue","fileNameWithRndNumber","floor","random","uploadTask","put","snapshot","getDownloadURL","url","setFieldTouched","customInput","format","arrayHelper","accept","multiple","getFileSchema","files","htmlFor","component","endIcon","aria-hidden","forEach","getArrErrorsMessages","rows","maxLength","selectedProductLoaded","selectedProductError","Error","fetchSelectedProduct","getSelectedProduct","loadingProps","errorProps","loadingProducts","errorProducts","loadingEditingProduct","errorEditingProduct","match","params","useProductCardItemSelectStyles","ProductCard","setFirstValuesFromDropDowns","Promise","r","setTimeout","App","exact","AddPropertyContainer","ProductCardContainer","AddItemContainer","LoginContainer","RegistrationContainer","render","Alert","elevation","closeNotifications","handleClose","reason","backToListItems","Snackbar","autoHideDuration","onClose","severity","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.5c1fccc6.chunk.js","sourcesContent":["const FETCH_PRODUCTS_SUCCESS = 'FETCH_PRODUCTS_SUCCESS';\r\nconst FETCH_PRODUCTS_SPINNER_OPEN = 'FETCH_PRODUCTS_SPINNER_OPEN';\r\nconst FETCH_PRODUCTS_SPINNER_CLOSE = 'FETCH_PRODUCTS_SPINNER_CLOSE';\r\nconst FETCH_PRODUCTS_FAILURE = 'FETCH_PRODUCTS_FAILURE';\r\n\r\nconst FETCH_SELECTED_PRODUCT_SUCCESS = 'FETCH_SELECTED_PRODUCT_SUCCESS';\r\nconst FETCH_SELECTED_PRODUCT_REQUEST = 'FETCH_SELECTED_PRODUCT_REQUEST';\r\nconst FETCH_SELECTED_PRODUCT_FAILURE = 'FETCH_SELECTED_PRODUCT_FAILURE';\r\nconst CLEAR_SELECTED_PRODUCT = 'CLEAR_SELECTED_PRODUCT';\r\n\r\nconst FETCH_PROPERTIES_SUCCESS = 'FETCH_PROPERTIES_SUCCESS';\r\nconst FETCH_PROPERTIES_SPINNER_OPEN = 'FETCH_PROPERTIES_SPINNER_OPEN';\r\nconst FETCH_PROPERTIES_SPINNER_CLOSE = 'FETCH_PROPERTIES_SPINNER_CLOSE';\r\nconst FETCH_PROPERTIES_FAILURE = 'FETCH_PROPERTIES_FAILURE';\r\n\r\nconst NOTIFICATION_CREATED_PRODUCT = 'NOTIFICATION_CREATED_PRODUCT'\r\nconst NOTIFICATION_EDITED_PRODUCT = 'NOTIFICATION_EDITED_PRODUCT';\r\nconst NOTIFICATION_DELETED_PRODUCT = 'NOTIFICATION_DELETED_PRODUCT';\r\nconst NOTIFICATION_CREATED_PROPERTY = 'NOTIFICATION_CREATED_PROPERTY';\r\nconst NOTIFICATION_DELETED_PROPERTY = 'NOTIFICATION_DELETED_PROPERTY';\r\nconst NOTIFICATION_GO_TO_CLOSE = 'NOTIFICATION_GO_TO_CLOSE';\r\nconst NOTIFICATION_STATUS_RESET = 'NOTIFICATION_STATUS_RESET';\r\n\r\nconst USER_IS_LOGGED_IN = 'USER_IS_LOGGED_IN';\r\nconst USER_IS_LOGGED_OUT = 'USER_IS_LOGGED_OUT';\r\nconst USER_IS_LOGGED_REQUEST = 'USER_IS_LOGGED_REQUEST';\r\n\r\nexport {\r\n    FETCH_PRODUCTS_SUCCESS,\r\n    FETCH_PRODUCTS_SPINNER_OPEN,\r\n    FETCH_PRODUCTS_SPINNER_CLOSE,\r\n    FETCH_PRODUCTS_FAILURE,\r\n    FETCH_SELECTED_PRODUCT_SUCCESS,\r\n    FETCH_SELECTED_PRODUCT_REQUEST,\r\n    FETCH_SELECTED_PRODUCT_FAILURE,\r\n    CLEAR_SELECTED_PRODUCT,\r\n    FETCH_PROPERTIES_SUCCESS,\r\n    FETCH_PROPERTIES_SPINNER_OPEN,\r\n    FETCH_PROPERTIES_SPINNER_CLOSE,\r\n    FETCH_PROPERTIES_FAILURE,\r\n    NOTIFICATION_CREATED_PRODUCT,\r\n    NOTIFICATION_EDITED_PRODUCT,\r\n    NOTIFICATION_DELETED_PRODUCT,\r\n    NOTIFICATION_CREATED_PROPERTY,\r\n    NOTIFICATION_DELETED_PROPERTY,\r\n    NOTIFICATION_GO_TO_CLOSE,\r\n    USER_IS_LOGGED_IN,\r\n    USER_IS_LOGGED_OUT,\r\n    USER_IS_LOGGED_REQUEST,\r\n    NOTIFICATION_STATUS_RESET\r\n}","import {\r\n    FETCH_PRODUCTS_FAILURE,\r\n    FETCH_PRODUCTS_SPINNER_CLOSE,\r\n    FETCH_PRODUCTS_SPINNER_OPEN,\r\n    FETCH_PRODUCTS_SUCCESS\r\n} from \"../../action-types\";\r\n\r\nconst productsReducer = (state, action) => {\r\n\r\n    if (state === undefined) {\r\n        return {\r\n            products: [],\r\n            loading: true,\r\n            error: null,\r\n        }\r\n    }\r\n\r\n    switch (action.type) {\r\n        case FETCH_PRODUCTS_SPINNER_OPEN:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                error: null,\r\n            }\r\n        case FETCH_PRODUCTS_SPINNER_CLOSE:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: null,\r\n            }\r\n        case FETCH_PRODUCTS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                products: action.payload,\r\n                loading: false,\r\n                error: null,\r\n            };\r\n        case FETCH_PRODUCTS_FAILURE:\r\n            return {\r\n                ...state,\r\n                products: [],\r\n                loading: false,\r\n                error: action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default productsReducer;","import {\r\n    FETCH_PROPERTIES_FAILURE,\r\n    FETCH_PROPERTIES_SPINNER_CLOSE,\r\n    FETCH_PROPERTIES_SPINNER_OPEN,\r\n    FETCH_PROPERTIES_SUCCESS\r\n} from \"../../action-types\";\r\n\r\nconst propertiesReducer = (state, action) => {\r\n\r\n    if (state === undefined) {\r\n        return {\r\n            properties: [],\r\n            loading: true,\r\n            error: null,\r\n        }\r\n    }\r\n\r\n    switch (action.type) {\r\n        case FETCH_PROPERTIES_SUCCESS:\r\n            return {\r\n                properties: action.payload,\r\n                loading: false,\r\n                error: null,\r\n            };\r\n\r\n        case FETCH_PROPERTIES_SPINNER_OPEN:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                error: null,\r\n            }\r\n\r\n        case FETCH_PROPERTIES_SPINNER_CLOSE:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: null,\r\n            }\r\n\r\n        case FETCH_PROPERTIES_FAILURE:\r\n            return {\r\n                properties: [],\r\n                loading: false,\r\n                error: action.payload,\r\n            }\r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default propertiesReducer;","import {\r\n    CLEAR_SELECTED_PRODUCT,\r\n    FETCH_SELECTED_PRODUCT_FAILURE,\r\n    FETCH_SELECTED_PRODUCT_REQUEST,\r\n    FETCH_SELECTED_PRODUCT_SUCCESS\r\n} from \"../../action-types\";\r\n\r\nconst productCardReducer = (state, action) => {\r\n\r\n    if (state === undefined) {\r\n        return {\r\n            selectedProduct: {},\r\n            loading: true,\r\n            error: null,\r\n        }\r\n    }\r\n\r\n    switch (action.type) {\r\n        case FETCH_SELECTED_PRODUCT_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                error: null,\r\n            }\r\n        case FETCH_SELECTED_PRODUCT_SUCCESS:\r\n            return {\r\n                selectedProduct: action.payload,\r\n                loading: false,\r\n                error: null,\r\n            };\r\n        case FETCH_SELECTED_PRODUCT_FAILURE:\r\n            return {\r\n                selectedProduct: {},\r\n                loading: false,\r\n                error: action.payload,\r\n            }\r\n        case CLEAR_SELECTED_PRODUCT:\r\n            return {\r\n                selectedProduct: {},\r\n                loading: true,\r\n                error: null,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default productCardReducer;","import {\r\n    NOTIFICATION_CREATED_PRODUCT, NOTIFICATION_CREATED_PROPERTY,\r\n    NOTIFICATION_DELETED_PRODUCT, NOTIFICATION_DELETED_PROPERTY,\r\n    NOTIFICATION_EDITED_PRODUCT, NOTIFICATION_GO_TO_CLOSE, NOTIFICATION_STATUS_RESET\r\n} from \"../../action-types\";\r\n\r\nconst notificationsReducer = (state, action) => {\r\n\r\n    if (state === undefined) {\r\n        return {\r\n            showNotification: false,\r\n            path: null,\r\n            isEditing: false,\r\n            deletedItem: null,\r\n        }\r\n    }\r\n\r\n    switch (action.type) {\r\n        case NOTIFICATION_CREATED_PRODUCT:\r\n            return {\r\n                showNotification: true,\r\n                path: action.payload,\r\n                isEditing: false,\r\n                deletedItem: null,\r\n            }\r\n        case NOTIFICATION_EDITED_PRODUCT:\r\n            return {\r\n                showNotification: true,\r\n                path: action.payload,\r\n                isEditing: true,\r\n                deletedItem: null,\r\n            }\r\n        case NOTIFICATION_DELETED_PRODUCT:\r\n            return {\r\n                showNotification: true,\r\n                path: action.payload,\r\n                isEditing: false,\r\n                deletedItem: 'товар',\r\n            }\r\n        case NOTIFICATION_CREATED_PROPERTY:\r\n            return {\r\n                showNotification: true,\r\n                path: action.payload,\r\n                isEditing: false,\r\n                deletedItem: null,\r\n            }\r\n        case NOTIFICATION_DELETED_PROPERTY:\r\n            return {\r\n                showNotification: true,\r\n                path: action.payload,\r\n                isEditing: false,\r\n                deletedItem: 'свойство',\r\n            }\r\n        case NOTIFICATION_GO_TO_CLOSE:\r\n            return {\r\n                ...state,\r\n                showNotification: false,\r\n            }\r\n        case NOTIFICATION_STATUS_RESET:\r\n            return {\r\n                showNotification: false,\r\n                path: null,\r\n                isEditing: false,\r\n                deletedItem: null,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport default notificationsReducer;","import {USER_IS_LOGGED_IN, USER_IS_LOGGED_OUT, USER_IS_LOGGED_REQUEST} from \"../../action-types\";\r\n\r\nconst isAuthReducer = (state, action) => {\r\n    if (state === undefined) {\r\n        return {\r\n            logIn: false,\r\n            email: null,\r\n            loading: true,\r\n        }\r\n    }\r\n\r\n    switch (action.type) {\r\n        case USER_IS_LOGGED_IN:\r\n            return {\r\n                logIn: true,\r\n                email: action.payload,\r\n                loading: false,\r\n            }\r\n\r\n        case USER_IS_LOGGED_OUT:\r\n            return {\r\n                logIn: false,\r\n                email: null,\r\n                loading: false,\r\n            }\r\n\r\n        case USER_IS_LOGGED_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default isAuthReducer;","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport productsReducer from \"./reducers/products-reducer\";\r\nimport propertiesReducer from \"./reducers/properties-reducer\";\r\nimport productCardReducer from \"./reducers/product-card-reducer\";\r\nimport notificationsReducer from \"./reducers/notifications-reducer\";\r\nimport isAuthReducer from \"./reducers/isAuth-reducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst reducers = combineReducers({\r\n    products: productsReducer,\r\n    properties: propertiesReducer,\r\n    selectedProduct: productCardReducer,\r\n    notifications: notificationsReducer,\r\n    isAuth: isAuthReducer\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nexport default store;","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport './error-indicator.scss';\r\n\r\nconst ErrorIndicator = () => {\r\n    return (\r\n        <div className={'error-indicator'}>\r\n            <div className={'error-indicator-wrap'}>\r\n                <div className={'error-indicator-big-text'}>\r\n                    Error!\r\n                </div>\r\n                <div className={'error-indicator-big-text'}>\r\n                    Страница не найдена\r\n                </div>\r\n                <div className={'error-indicator-low-text'}>\r\n                    Страница устарела, была удалена или не существовала вовсе\r\n                </div>\r\n                <div className={'back-to-home'}>\r\n                    <Link to={'/'}>\r\n                        Вернуться на главную\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ErrorIndicator;","import ErrorIndicator from \"./error-indicator\";\r\n\r\nexport default ErrorIndicator;","import ErrorBoundry from \"./error-boundry\";\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport ErrorIndicator from \"../error-indicator\";\r\n\r\nexport default class ErrorBoundry extends Component {\r\n\r\n    state = {\r\n        hasError: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <ErrorIndicator />\r\n        }\r\n\r\n        return this.props.children\r\n    }\r\n}","import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/auth';\r\n\r\nconst getItems = (dispatch, items, itemsLoaded) => {\r\n    const db = firebase.database();                     // нельзя выносить как общую переменную, иначе выдает ошибку\r\n    const dbDataRef = db.ref().child(`${items}`);\r\n    dbDataRef.on('value', snap => {\r\n        const data = snap.val();\r\n        if (data === null) {\r\n            dispatch((itemsLoaded([])))\r\n        } else {\r\n            dispatch((itemsLoaded(data)))\r\n        }\r\n    })\r\n};\r\n\r\nconst deleteItem = async (key, path, itemError, deletedItem) => {\r\n    const db = firebase.database();\r\n    const ref = db.ref(`${path}`);\r\n    const dbDataRef = ref.child(key);\r\n    await dbDataRef.set(null, function (error) {        // отправляем null для того чтобы удалть полностью свойство по ключу key\r\n        if (error) {\r\n            itemError(error);\r\n        } else {\r\n            deletedItem();\r\n        }\r\n    });\r\n}\r\n\r\nconst getSelectedProduct = (dispatch, selectedProductLoaded, itemId) => {\r\n    const db = firebase.database();\r\n    const dbDataRef = db.ref().child('products');\r\n    dbDataRef.on('value', snap => {\r\n        const data = snap.val();\r\n        if (data === null) {\r\n            dispatch((selectedProductLoaded([])))\r\n        } else {\r\n            dispatch((selectedProductLoaded(data, itemId)))\r\n        }\r\n    })\r\n}\r\n\r\nconst getUserAuth = (dispatch, userIsLoggedIn, userIsNotLoggedIn) => {\r\n    firebase.auth().onAuthStateChanged(firebaseUser => {\r\n            if (firebaseUser) {\r\n                dispatch(userIsLoggedIn(firebaseUser.email));\r\n            } else {\r\n                dispatch(userIsNotLoggedIn());\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\nconst userLogOut = () => {\r\n    firebase.auth().signOut()\r\n        .then(() => console.log('sign out'))\r\n        .catch(e => console.log(e));\r\n}\r\n\r\nconst submitLogIn = (values) => {\r\n    const {email, password} = values;\r\n    const auth = firebase.auth();\r\n    return auth.signInWithEmailAndPassword(email, password)\r\n}\r\n\r\nconst submitRegistration = (values) => {\r\n    const {email, password} = values;\r\n    const auth = firebase.auth();\r\n    return auth.createUserWithEmailAndPassword(email, password)\r\n}\r\n\r\nconst postItemsToDatabase = async (newValues, path, itemError, itemSpinnerClose, notificationItem) => {\r\n    const db = firebase.database();\r\n    const ref = db.ref(`${path}`);\r\n    const dbDataRef = ref.push();\r\n    await dbDataRef.set(newValues, function (error) {\r\n        if (error) {\r\n            itemError(error);\r\n        } else {\r\n            itemSpinnerClose();\r\n            notificationItem();\r\n        }\r\n    });\r\n}\r\n\r\nconst putItemsToDatabase = async (newValues, itemId, path, itemError, itemSpinnerClose, notificationItem) => {\r\n    const db = firebase.database();\r\n    const ref = db.ref(`${path}`);\r\n    const dbDataRef = ref.child(itemId);\r\n    await dbDataRef.set(newValues,\r\n        function (error) {\r\n            if (error) {\r\n                itemError(error);\r\n            } else {\r\n                itemSpinnerClose();\r\n                notificationItem();\r\n            }\r\n        })\r\n}\r\n\r\n// получение таймстампа с сервера Firebase\r\nconst getDateOfChange = () => {\r\n    return firebase.database.ServerValue.TIMESTAMP;\r\n}\r\n\r\nexport {\r\n    getItems,\r\n    deleteItem,\r\n    getSelectedProduct,\r\n    getUserAuth,\r\n    userLogOut,\r\n    submitLogIn,\r\n    submitRegistration,\r\n    postItemsToDatabase,\r\n    putItemsToDatabase,\r\n    getDateOfChange,\r\n}\r\n","import {USER_IS_LOGGED_IN, USER_IS_LOGGED_OUT, USER_IS_LOGGED_REQUEST} from \"../../action-types\";\r\nimport {getUserAuth} from \"../../services/firebase-service\";\r\n\r\nconst userIsAuth = () => (dispatch) => {\r\n    dispatch(userIsAuthRequest());\r\n    getUserAuth(dispatch, userIsLoggedIn, userIsNotLoggedIn);\r\n}\r\n\r\nconst userIsLoggedIn = (email) => {\r\n    return {\r\n        type: USER_IS_LOGGED_IN,\r\n        payload: email,\r\n    }\r\n}\r\n\r\nconst userIsNotLoggedIn = () => {\r\n    return {\r\n        type: USER_IS_LOGGED_OUT,\r\n    }\r\n}\r\n\r\nconst userIsAuthRequest = () => {\r\n    console.log('сработало')\r\n    return {\r\n        type: USER_IS_LOGGED_REQUEST\r\n    }\r\n}\r\n\r\nexport {\r\n    userIsAuth,\r\n    userIsLoggedIn,\r\n    userIsNotLoggedIn\r\n}","import {createMuiTheme} from '@material-ui/core/styles';\r\n\r\nconst theme = createMuiTheme({\r\n    typography: {\r\n        button: {\r\n            fontFamily: 'Roboto, serif',\r\n            fontStyle: 'normal',\r\n            fontWeight: 'normal',\r\n            fontSize: 16,\r\n            lineHeight: '19px',\r\n        }\r\n    }\r\n})\r\n\r\nexport default theme;","import {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useLoginButtonStyles = makeStyles({\r\n    root: {\r\n        background: '#ffb800',\r\n        '&:hover': {\r\n            background: '#d7a002',\r\n        },\r\n        borderRadius: 4,\r\n        border: 0,\r\n        color: '#FFFFFF',\r\n        height: 32,\r\n        width: 160,\r\n    },\r\n    label: {\r\n        textTransform: 'none',\r\n    },\r\n});\r\n\r\nexport default useLoginButtonStyles;","import ErrorMessageText from \"./error-message-text\";\r\n\r\nexport default ErrorMessageText;","import React from \"react\";\r\n\r\nimport './error-message-text.scss';\r\n\r\nconst ErrorMessageText = ({message}) => {\r\n\r\n    if (message === undefined) {\r\n        return null;\r\n    }\r\n\r\n    switch (message) {\r\n        case 'There is no user record corresponding to this identifier. The user may have been deleted.':\r\n            return (\r\n                <div className={'text-error'}>Данного пользователя не существует</div>\r\n            )\r\n\r\n        case 'The password is invalid or the user does not have a password.':\r\n            return (\r\n                <div className={'text-error'}>Неверный пароль</div>\r\n            )\r\n        case 'The email address is already in use by another account.':\r\n            return (\r\n                <div className={'text-error'}>Пользователь с данным e-mail уже зарегестрирован</div>\r\n            )\r\n        default:\r\n            return (\r\n                <div className={'text-error'}>{message}</div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default ErrorMessageText;","import React, {useState} from 'react';\r\nimport {useFormik} from 'formik';\r\nimport * as yup from 'yup';\r\nimport {Link, withRouter} from \"react-router-dom\";\r\nimport {FormControl, FormHelperText, FormLabel} from \"@material-ui/core\";\r\nimport {ThemeProvider} from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport theme from \"../../styles/customizing-material-ui-components/theme\";\r\nimport useLoginButtonStyles from \"../../styles/customizing-material-ui-components/button-login-style\";\r\nimport ErrorMessageText from \"../error-message-text\";\r\nimport {submitLogIn} from \"../../services/firebase-service\";\r\n\r\nimport './login.scss';\r\n\r\nconst Login = ({history}) => {\r\n\r\n    const classes = useLoginButtonStyles();\r\n\r\n    const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n    const validationSchema = yup.object().shape({\r\n        email: yup.string().typeError('Должно быть строкой')\r\n            .min(4, \"Логин должен быть не менее 4 символов\")\r\n            .max(20, \"Логин должен быть не болле 20 символов\")\r\n            .required('Обязательное поле'),\r\n        password: yup.string().typeError('Должно быть строкой')\r\n            .min(8, \"Пароль должен быть не менее 8 символов\")\r\n            .required('Обязательное поле'),\r\n    });\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            showPassword: false,\r\n        },\r\n        validationSchema: validationSchema,\r\n        onSubmit: (values) => {\r\n            submitLogIn(values)\r\n                .then(() => {\r\n                    setErrorMessage(null);\r\n                    history.push('/');\r\n                })\r\n                .catch(e => {\r\n                    console.log(e.message);\r\n                    setErrorMessage(e.message);\r\n                });\r\n        },\r\n        validateOnBlur: true,\r\n    });\r\n\r\n    const {values, errors, touched, handleChange,\r\n        handleBlur, isValid, handleSubmit, dirty, setFieldValue} = formik;\r\n\r\n    return (\r\n        <div className={'login'}>\r\n            <form onSubmit={handleSubmit} className={'form-wrap'}>\r\n                <h4>Вход</h4>\r\n                {errorMessage ? <ErrorMessageText message={errorMessage}/> : null}\r\n                <div className={'login-wrap'}>\r\n                    <FormControl fullWidth error={touched.email && errors.email}>\r\n                        <FormLabel>Логин</FormLabel>\r\n                        <OutlinedInput type=\"text\"\r\n                                       variant=\"outlined\"\r\n                                       notched={false}\r\n                                       placeholder='Введите логин'\r\n                                       name={'email'}\r\n                                       onChange={handleChange}\r\n                                       onBlur={handleBlur}\r\n                                       value={values.email}>\r\n                        </OutlinedInput>\r\n                        {touched.email && errors.email && <FormHelperText>{errors.email}</FormHelperText>}\r\n                    </FormControl>\r\n                    <FormControl fullWidth error={touched.password && errors.password}>\r\n                        <FormLabel>Пароль</FormLabel>\r\n                        <OutlinedInput\r\n                            notched={false}\r\n                            placeholder='Введите пароль'\r\n                            type={values.showPassword ? 'text' : 'password'}\r\n                            name={'password'}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.password}\r\n                            endAdornment={\r\n                                <InputAdornment position=\"end\">\r\n                                    <IconButton\r\n                                        name={'showPassword'}\r\n                                        onClick={() => setFieldValue('showPassword', !values.showPassword)}\r\n                                        edge=\"end\"\r\n                                    >\r\n                                        {values.showPassword ? <Visibility/> : <VisibilityOff/>}\r\n                                    </IconButton>\r\n                                </InputAdornment>\r\n                            }\r\n                        />\r\n                        {touched.password && errors.password && <FormHelperText>{errors.password}</FormHelperText>}\r\n                    </FormControl>\r\n                </div>\r\n                <div className={'login-button'}>\r\n                    <ThemeProvider theme={theme}>\r\n                        <Button\r\n                            classes={{\r\n                                root: classes.root,\r\n                                label: classes.label,\r\n                            }}\r\n                            type={'submit'}\r\n                            disabled={!isValid || !dirty}\r\n                            onClick={handleSubmit}>\r\n                            Войти\r\n                        </Button>\r\n                    </ThemeProvider>\r\n                </div>\r\n                <div className={'link'}>\r\n                    <Link to={'/registration'}>\r\n                        Зарегестрироваться\r\n                    </Link>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(Login);","import Spinner from \"./spinner\";\r\n\r\nexport default Spinner;","import React from 'react';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport './spinner.scss';\r\n\r\nconst Spinner = () => {\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        backdrop: {\r\n            zIndex: theme.zIndex.drawer + 1,\r\n            color: '#fff',\r\n        },\r\n    }));\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Backdrop className={classes.backdrop} open={true}>\r\n            <CircularProgress color=\"inherit\" />\r\n        </Backdrop>\r\n    )\r\n}\r\n\r\nexport default Spinner;","import React, {useEffect} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {userIsAuth} from \"../../store/actions/isAuth-actions\";\r\nimport Login from \"./login\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport Spinner from \"../spinner\";\r\n\r\nconst LoginContainer = ({logIn, userIsAuth, loading}) => {\r\n\r\n    useEffect(() => {\r\n        userIsAuth()\r\n    }, [])\r\n\r\n    if (loading) {\r\n        return <Spinner />\r\n    }\r\n\r\n    if (logIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return (\r\n        <Login />\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        logIn: state.isAuth.logIn,\r\n        loading: state.isAuth.loading,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    userIsAuth\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginContainer);","import {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useRegistrationButtonStyles = makeStyles({\r\n    root: {\r\n        background: '#ffb800',\r\n        '&:hover': {\r\n            background: '#d7a002',\r\n        },\r\n        borderRadius: 4,\r\n        border: 0,\r\n        color: '#FFFFFF',\r\n        height: 32,\r\n        width: 200,\r\n    },\r\n    label: {\r\n        textTransform: 'none',\r\n    },\r\n});\r\n\r\nexport default useRegistrationButtonStyles;","import React, {useState} from \"react\";\r\nimport {useFormik} from 'formik';\r\nimport * as yup from 'yup';\r\nimport {ThemeProvider} from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {FormControl, FormHelperText, FormLabel} from \"@material-ui/core\";\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Visibility from \"@material-ui/icons/Visibility\";\r\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\r\nimport theme from \"../../styles/customizing-material-ui-components/theme\";\r\nimport useRegistrationButtonStyles from \"../../styles/customizing-material-ui-components/button-registration-style\";\r\nimport {Link, withRouter} from \"react-router-dom\";\r\nimport ErrorMessageText from \"../error-message-text\";\r\nimport {submitRegistration} from \"../../services/firebase-service\";\r\n\r\nimport './registration.scss';\r\n\r\nconst Registration = ({history}) => {\r\n\r\n    const classes = useRegistrationButtonStyles();\r\n\r\n    const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n    const validationSchema = yup.object().shape({\r\n        name: yup.string()\r\n            .min(4, \"Имя должно быть не менее 4 символов\")\r\n            .max(20, \"Имя должно быть не более 20 символов\")\r\n            .typeError('Должно быть строкой').required('Обязательное поле'),\r\n        secondName: yup.string().typeError('Должно быть строкой').required('Обязательное поле'),\r\n        password: yup.string()\r\n            .min(8, \"Пароль должен быть не менее 8 символов\")\r\n            .typeError('Должно быть строкой').required('Обязательное поле'),\r\n        confirmPassword: yup.string().oneOf([yup.ref('password')], 'Пароли не совпадают').required('Обязательное поле'),\r\n        email: yup.string().email('Введите верный email').required('Обязательное поле'),\r\n    });\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: '',\r\n            secondName: '',\r\n            password: '',\r\n            confirmPassword: '',\r\n            email: '',\r\n            showPassword: false,\r\n            showConfirmPassword: false,\r\n        },\r\n        validationSchema: validationSchema,\r\n        onSubmit: (values) => {\r\n            submitRegistration(values)\r\n                .then(() => {\r\n                    setErrorMessage(null);\r\n                    history.push('/');\r\n                })\r\n                .catch(e => {\r\n                    console.log(e.message);\r\n                    setErrorMessage(e.message);\r\n                });\r\n        },\r\n        validateOnBlur: true,\r\n    });\r\n    const {values, errors, touched, handleChange,\r\n        handleBlur, isValid, handleSubmit, dirty, setFieldValue} = formik;\r\n    return (\r\n        <div className={'registration'}>\r\n            <form onSubmit={handleSubmit} className={'form-wrap'}>\r\n                <h4>Регистрация</h4>\r\n                {errorMessage ? <ErrorMessageText message={errorMessage}/> : null}\r\n                <div className={'registration-wrap'}>\r\n                        <FormControl fullWidth error={touched.name && errors.name}>\r\n                            <FormLabel>Имя</FormLabel>\r\n                            <OutlinedInput type=\"text\"\r\n                                           variant=\"outlined\"\r\n                                           notched={false}\r\n                                           placeholder='Введите имя'\r\n                                           name={'name'}\r\n                                           onChange={handleChange}\r\n                                           onBlur={handleBlur}\r\n                                           value={values.name}>\r\n                            </OutlinedInput>\r\n                            {touched.name && errors.name && <FormHelperText>{errors.name}</FormHelperText>}\r\n                        </FormControl>\r\n                        <FormControl fullWidth error={touched.secondName && errors.secondName}>\r\n                            <FormLabel>Фамилия</FormLabel>\r\n                            <OutlinedInput type=\"text\"\r\n                                           variant=\"outlined\"\r\n                                           notched={false}\r\n                                           placeholder='Введите фамилию'\r\n                                           name={'secondName'}\r\n                                           onChange={handleChange}\r\n                                           onBlur={handleBlur}\r\n                                           value={values.secondName}>\r\n                            </OutlinedInput>\r\n                            {touched.secondName && errors.secondName && <FormHelperText>{errors.secondName}</FormHelperText>}\r\n                        </FormControl>\r\n                        <FormControl fullWidth error={touched.email && errors.email}>\r\n                            <FormLabel>E-mail</FormLabel>\r\n                            <OutlinedInput type=\"email\"\r\n                                           variant=\"outlined\"\r\n                                           notched={false}\r\n                                           placeholder='Введите ваш e-mail'\r\n                                           name={'email'}\r\n                                           onChange={handleChange}\r\n                                           onBlur={handleBlur}\r\n                                           value={values.email}>\r\n                            </OutlinedInput>\r\n                            {touched.email && errors.email && <FormHelperText>{errors.email}</FormHelperText>}\r\n                        </FormControl>\r\n                        <FormControl fullWidth error={touched.password && errors.password}>\r\n                            <FormLabel>Пароль</FormLabel>\r\n                            <OutlinedInput\r\n                                notched={false}\r\n                                placeholder='Введите пароль'\r\n                                type={values.showPassword ? 'text' : 'password'}\r\n                                name={'password'}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                value={values.password}\r\n                                endAdornment={\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton\r\n                                            name={'showPassword'}\r\n                                            onClick={() => setFieldValue('showPassword', !values.showPassword)}     // меняю значение в showPassword на обратное, что бы показать или скрыть пароль\r\n                                            edge=\"end\"\r\n                                        >\r\n                                            {values.showPassword ? <Visibility/> : <VisibilityOff/>}\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                }\r\n                            />\r\n                            {touched.password && errors.password && <FormHelperText>{errors.password}</FormHelperText>}\r\n                        </FormControl>\r\n                        <FormControl fullWidth error={touched.confirmPassword && errors.confirmPassword}>\r\n                            <FormLabel>Повторите пароль</FormLabel>\r\n                            <OutlinedInput\r\n                                notched={false}\r\n                                placeholder='Повторите пароль'\r\n                                type={values.showConfirmPassword ? 'text' : 'password'}\r\n                                name={'confirmPassword'}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                value={values.confirmPassword}\r\n                                endAdornment={\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton\r\n                                            name={'showConfirmPassword'}\r\n                                            onClick={() => setFieldValue('showConfirmPassword', !values.showConfirmPassword)}\r\n                                            edge=\"end\"\r\n                                        >\r\n                                            {values.showConfirmPassword ? <Visibility/> : <VisibilityOff/>}\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                }\r\n                            />\r\n                            {touched.confirmPassword && errors.confirmPassword && <FormHelperText>{errors.confirmPassword}</FormHelperText>}\r\n                        </FormControl>\r\n                </div>\r\n                <div className={'registration-button'}>\r\n                    <ThemeProvider theme={theme}>\r\n                        <Button\r\n                            classes={{\r\n                                root: classes.root,\r\n                                label: classes.label,\r\n                            }}\r\n                            type={'submit'}\r\n                            disabled={!isValid || !dirty}\r\n                            onClick={handleSubmit}>\r\n                            Зарегестрироваться\r\n                        </Button>\r\n                    </ThemeProvider>\r\n                </div>\r\n                <div className={'link'}>\r\n                    <Link to={'/login'}>\r\n                        Вернуться\r\n                    </Link>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withRouter(Registration);","import React, {useEffect} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {userIsAuth} from \"../../store/actions/isAuth-actions\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport Registration from \"./registration\";\r\n\r\nconst RegistrationContainer = ({logIn, userIsAuth}) => {\r\n\r\n    useEffect(() => {\r\n        userIsAuth()\r\n    }, [])\r\n\r\n    if (logIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return (\r\n        <Registration />\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        logIn: state.isAuth.logIn,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    userIsAuth\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RegistrationContainer);","import UniversalTablePagination from \"./universal-table-pagination\";\r\n\r\nexport default UniversalTablePagination;","import React from 'react';\r\nimport {TablePagination} from \"@material-ui/core\";\r\nimport {makeStyles, useTheme} from \"@material-ui/core/styles\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport LastPageIcon from \"@material-ui/icons/LastPage\";\r\nimport FirstPageIcon from \"@material-ui/icons/FirstPage\";\r\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\r\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst UniversalTablePagination = (props) => {\r\n\r\n    const {array, rowsPerPage, page, handleChangePage, handleChangeRowsPerPage} = props;\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        root: {\r\n            flexShrink: 0,\r\n            marginLeft: theme.spacing(2.5),\r\n        },\r\n    }));\r\n\r\n    function TablePaginationActions(props) {\r\n        const classes = useStyles();\r\n        const theme = useTheme();\r\n        const {count, page, rowsPerPage, onChangePage} = props;\r\n\r\n        const handleFirstPageButtonClick = (event) => {\r\n            onChangePage(event, 0);\r\n        };\r\n\r\n        const handleBackButtonClick = (event) => {\r\n            onChangePage(event, page - 1);\r\n        };\r\n\r\n        const handleNextButtonClick = (event) => {\r\n            onChangePage(event, page + 1);\r\n        };\r\n\r\n        const handleLastPageButtonClick = (event) => {\r\n            onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n        };\r\n\r\n        return (\r\n            <div className={classes.root}>\r\n                <IconButton\r\n                    onClick={handleFirstPageButtonClick}\r\n                    disabled={page === 0}\r\n                    aria-label=\"first page\"\r\n                >\r\n                    {theme.direction === 'rtl' ? <LastPageIcon/> : <FirstPageIcon/>}\r\n                </IconButton>\r\n                <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\r\n                    {theme.direction === 'rtl' ? <KeyboardArrowRight/> : <KeyboardArrowLeft/>}\r\n                </IconButton>\r\n                <IconButton\r\n                    onClick={handleNextButtonClick}\r\n                    disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n                    aria-label=\"next page\"\r\n                >\r\n                    {theme.direction === 'rtl' ? <KeyboardArrowLeft/> : <KeyboardArrowRight/>}\r\n                </IconButton>\r\n                <IconButton\r\n                    onClick={handleLastPageButtonClick}\r\n                    disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n                    aria-label=\"last page\"\r\n                >\r\n                    {theme.direction === 'rtl' ? <FirstPageIcon/> : <LastPageIcon/>}\r\n                </IconButton>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    TablePaginationActions.propTypes = {\r\n        count: PropTypes.number.isRequired,\r\n        onChangePage: PropTypes.func.isRequired,\r\n        page: PropTypes.number.isRequired,\r\n        rowsPerPage: PropTypes.number.isRequired,\r\n    };\r\n\r\n       return (\r\n            <TablePagination\r\n                rowsPerPageOptions={[5, 10, 25, {label: 'Все', value: -1}]}\r\n                count={array.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                SelectProps={{\r\n                    inputProps: {'aria-label': 'rows per page'},\r\n                    native: true,\r\n                }}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                ActionsComponent={TablePaginationActions}\r\n            />\r\n    )\r\n}\r\n\r\nexport default UniversalTablePagination;","import React from 'react';\r\nimport {TableCell, TableHead, TableRow, TableSortLabel} from \"@material-ui/core\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport PropTypes from \"prop-types\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nimport './product-list-table.scss';\r\n\r\nconst ProductListTableHeader = (props) => {\r\n\r\n    const {order, orderBy, onRequestSort} = props;\r\n    const headCells = [\r\n        {id: 'itemName', label: 'Перечень товаров'},\r\n        {id: 'price', label: 'Стоимость'},\r\n        {id: 'dateOfChange', label: 'Дата изменения'},\r\n    ];\r\n    const createSortHandler = (property) => (event) => {\r\n        onRequestSort(event, property);\r\n    };\r\n    ProductListTableHeader.propTypes = {\r\n        onRequestSort: PropTypes.func.isRequired,\r\n        order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n        orderBy: PropTypes.string,\r\n    };\r\n\r\n    const useStyles = makeStyles(() => ({\r\n        visuallyHidden: {\r\n            border: 0,\r\n            clip: 'rect(0 0 0 0)',\r\n            height: 1,\r\n            margin: -1,\r\n            overflow: 'hidden',\r\n            padding: 0,\r\n            position: 'absolute',\r\n            top: 20,\r\n            width: 1,\r\n        },\r\n    }));\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <TableHead>\r\n            <TableRow>\r\n                {headCells.map((headCell) => (\r\n                    <TableCell\r\n                        key={headCell.id}\r\n                        sortDirection={orderBy === headCell.id ? order : false}\r\n                        id={`${headCell.id}`}\r\n                        align={headCell.id === 'itemName' ? 'center' : 'left'}\r\n                    >\r\n                        <TableSortLabel\r\n                            active={orderBy === headCell.id}\r\n                            direction={orderBy === headCell.id ? order : 'asc'}\r\n                            onClick={createSortHandler(headCell.id)}\r\n                            IconComponent={ExpandMoreIcon}\r\n                        >\r\n                            <div className={'table-header'}>{headCell.label}</div>\r\n                            {orderBy === headCell.id ? (<span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}</span>) : null}\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                ))}\r\n                <TableCell key={'administration'}\r\n                           id={'administration'}><div className={'table-header'}>Управление</div>\r\n                </TableCell>\r\n            </TableRow>\r\n        </TableHead>\r\n    )\r\n}\r\n\r\nexport default ProductListTableHeader;","import ProductListTable from \"./product-list-table\";\r\n\r\nexport default ProductListTable;","import React from 'react';\r\nimport {\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableFooter,\r\n    TableRow,\r\n} from \"@material-ui/core\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {createMuiTheme, ThemeProvider} from '@material-ui/core/styles';\r\nimport {ruRU} from '@material-ui/core/locale';\r\nimport UniversalTablePagination from \"../universal-table-pagination\";\r\nimport ProductListTableHeader from \"./product-list-table-header\";\r\nimport Spinner from \"../spinner\";\r\n\r\nimport './product-list-table.scss';\r\n\r\nconst ProductListTable = ({products, onDeleted, loading, productsError, deletedProduct}) => {\r\n\r\n    // русская локализация\r\n    const theme = createMuiTheme({\r\n        palette: {\r\n            primary: {main: '#1976d2'},\r\n        },\r\n    }, ruRU);\r\n\r\n    // начинаем делать пагинацию\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, products.length - page * rowsPerPage);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n    // закончили с пагинацией\r\n\r\n    // начинаем делать сортировку\r\n    function descendingComparator(a, b, orderBy) {\r\n        if (b[orderBy] < a[orderBy]) {\r\n            return -1;\r\n        }\r\n        if (b[orderBy] > a[orderBy]) {\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getComparator(order, orderBy) {\r\n        return order === 'desc'\r\n            ? (a, b) => descendingComparator(a, b, orderBy)\r\n            : (a, b) => -descendingComparator(a, b, orderBy);\r\n    }\r\n\r\n    function stableSort(array, comparator) {\r\n        const stabilizedThis = array.map((el, index) => [el, index]);\r\n        stabilizedThis.sort((a, b) => {\r\n            const order = comparator(a[0], b[0]);\r\n            if (order !== 0) return order;\r\n            return a[1] - b[1];\r\n        });\r\n        return stabilizedThis.map((el) => el[0]);\r\n    }\r\n\r\n    const [order, setOrder] = React.useState('asc');\r\n    const [orderBy, setOrderBy] = React.useState();\r\n\r\n    const handleRequestSort = (event, property) => {\r\n        const isAsc = orderBy === property && order === 'asc';\r\n        setOrder(isAsc ? 'desc' : 'asc');\r\n        setOrderBy(property);\r\n    };\r\n\r\n    const timestampToDate = (timestamp) => {\r\n        const d = new Date();\r\n        d.setTime(timestamp);\r\n        return ('0' + d.getDate()).slice(-2) + '.' + ('0' + (d.getMonth() + 1)).slice(-2) + '.' + d.getFullYear().toString().substr(-2);\r\n    }\r\n\r\n    return (\r\n        <div className={'product-list-table'}>\r\n            <ThemeProvider theme={theme}>\r\n                <TableContainer>\r\n                    <Table>\r\n                        <ProductListTableHeader\r\n                            order={order}\r\n                            orderBy={orderBy}\r\n                            onRequestSort={handleRequestSort}\r\n                        />\r\n                        {loading ? <Spinner/> :\r\n                            <TableBody>\r\n                                {/*Если rowsPerPage = -1 (т.е. выбрано в пагинации \"Показать Все\", то мапим без слайса)*/}\r\n                                {(rowsPerPage > 0 ?\r\n                                        stableSort(products, getComparator(order, orderBy))\r\n                                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                        : stableSort(products, getComparator(order, orderBy))\r\n                                )\r\n                                    .map((product) => {\r\n                                        const {id, itemName, price, dateOfChange} = product;\r\n                                        const formattedPrice = price.toLocaleString('ru-RU');\r\n                                        const formattedDateOfChange = timestampToDate(dateOfChange);\r\n                                        return (\r\n                                            <TableRow key={id}>\r\n                                                <TableCell align={'center'} className={'link table-body'}>\r\n                                                    <Link to={`/item-card/${id}`}>\r\n                                                        <div className={'table-value'}>{itemName}</div>\r\n                                                    </Link>\r\n                                                </TableCell>\r\n                                                <TableCell className={'table-body'}>\r\n                                                    <div className={'table-value'}>{formattedPrice} $</div>\r\n                                                </TableCell>\r\n                                                <TableCell className={'table-body'}>\r\n                                                    <div className={'table-value'}>{formattedDateOfChange}</div>\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <div className=\"links\">\r\n                                                        <Link to={`/add-item/${id}`} className={'link'}>Ред.</Link>\r\n                                                        <Link to={'#'}\r\n                                                              onClick={() => onDeleted(id, 'products', productsError, deletedProduct)}\r\n                                                              className={'link'}>Удалить</Link>\r\n                                                    </div>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        );\r\n                                    })}\r\n                                {emptyRows > 0 && (\r\n                                    <TableRow style={{height: 47 * emptyRows}}>\r\n                                        <TableCell colSpan={6}/>\r\n                                    </TableRow>\r\n                                )}\r\n                            </TableBody>\r\n                        }\r\n                        <TableFooter>\r\n                            <TableRow>\r\n                                <UniversalTablePagination\r\n                                    array={products}\r\n                                    rowsPerPage={rowsPerPage}\r\n                                    page={page}\r\n                                    handleChangePage={handleChangePage}\r\n                                    handleChangeRowsPerPage={handleChangeRowsPerPage}\r\n                                />\r\n                            </TableRow>\r\n                        </TableFooter>\r\n                    </Table>\r\n                </TableContainer>\r\n            </ThemeProvider>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProductListTable;","import SearchPanel from './search-panel';\r\n\r\nexport default SearchPanel;","import React, {Component} from 'react';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nimport './search-panel.scss';\r\n\r\n\r\nexport default class SearchPanel extends Component {\r\n\r\n    onSearchChange = (e) => {\r\n        this.props.termSetup(e.target.value)\r\n    }\r\n\r\n    onColumnChange = (e) => {\r\n        this.props.columnChange(e.target.value)\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className={'search-panel'}>\r\n                <TextField className={'input'}\r\n                           size=\"small\"\r\n                           label=\"Поиск\"\r\n                           type=\"search\"\r\n                           variant=\"outlined\"\r\n                           onChange={this.onSearchChange}\r\n                           InputProps={{\r\n                               startAdornment: (\r\n                                   <InputAdornment position=\"start\">\r\n                                       <SearchIcon/>\r\n                                   </InputAdornment>\r\n                               ),\r\n                           }}/>\r\n                <FormControl className={'select'} variant=\"outlined\" size=\"small\">\r\n                    <InputLabel>Категория</InputLabel>\r\n                    <Select\r\n                        label={'Категория'}\r\n                        defaultValue={'itemName'}\r\n                        onChange={this.onColumnChange}>\r\n                        <MenuItem value={'itemName'}>Перечень товаров</MenuItem>\r\n                        <MenuItem value={'price'}>Стоимость</MenuItem>\r\n                        <MenuItem value={'dateOfChange'}>Дата изменения</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </div>\r\n        )\r\n    }\r\n}","import {\r\n    FETCH_PRODUCTS_FAILURE,\r\n    FETCH_PRODUCTS_SPINNER_OPEN,\r\n    FETCH_PRODUCTS_SUCCESS,\r\n} from \"../../action-types\";\r\nimport {getItems} from \"../../services/firebase-service\";\r\n\r\nconst productsLoaded = (newItems) => {\r\n    const objectsToArray = Object.values(newItems);\r\n    const getKeysToArray = Object.keys(newItems);\r\n    for (let i = 0; i < getKeysToArray.length; i++) {       // добавляю свойство id для того что бы через него редактировать или удалять необходимые объекты\r\n        objectsToArray[i].id = getKeysToArray[i]\r\n    }\r\n    return {\r\n        type: FETCH_PRODUCTS_SUCCESS,\r\n        payload: objectsToArray\r\n    }\r\n}\r\n\r\nconst productsSpinnerOpen = () => {\r\n    return {\r\n        type: FETCH_PRODUCTS_SPINNER_OPEN,\r\n    }\r\n}\r\n\r\nconst productsSpinnerClose = () => {\r\n    return {\r\n        type: FETCH_PRODUCTS_SPINNER_OPEN,\r\n    }\r\n}\r\n\r\nconst productsError = (error) => {\r\n    return {\r\n        type: FETCH_PRODUCTS_FAILURE,\r\n        payload: error,\r\n    }\r\n}\r\n\r\nconst fetchProducts = () => (dispatch) => {\r\n    dispatch(productsSpinnerOpen());\r\n    getItems(dispatch, 'products', productsLoaded);\r\n}\r\n\r\nexport {\r\n    fetchProducts,\r\n    productsError,\r\n    productsSpinnerOpen,\r\n    productsSpinnerClose,\r\n    productsLoaded\r\n}","import {\r\n    NOTIFICATION_CREATED_PRODUCT, NOTIFICATION_CREATED_PROPERTY,\r\n    NOTIFICATION_DELETED_PRODUCT, NOTIFICATION_DELETED_PROPERTY,\r\n    NOTIFICATION_EDITED_PRODUCT, NOTIFICATION_GO_TO_CLOSE, NOTIFICATION_STATUS_RESET\r\n} from \"../../action-types\";\r\n\r\nconst createdProduct = () => {\r\n    return {\r\n        type: NOTIFICATION_CREATED_PRODUCT,\r\n        payload: '/',\r\n    }\r\n}\r\n\r\nconst editedProduct = () => {\r\n    return {\r\n        type: NOTIFICATION_EDITED_PRODUCT,\r\n        payload: '/',\r\n    }\r\n}\r\n\r\nconst deletedProduct = () => {\r\n    return {\r\n        type: NOTIFICATION_DELETED_PRODUCT,\r\n        payload: '/',\r\n    }\r\n}\r\n\r\nconst createdProperty = () => {\r\n    return {\r\n        type: NOTIFICATION_CREATED_PROPERTY,\r\n        payload: '/property-list',\r\n    }\r\n}\r\n\r\nconst deletedProperty = () => {\r\n    return {\r\n        type: NOTIFICATION_DELETED_PROPERTY,\r\n        payload: '/property-list',\r\n    }\r\n}\r\n\r\nconst closeNotifications = () => {\r\n    return {\r\n        type: NOTIFICATION_GO_TO_CLOSE,\r\n    }\r\n}\r\n\r\n// Необходимо для того, что бы при переходе на другую страницу, не перебрасывало обратно после срабатывания нотификации,\r\n// как это сделано в логике компоненты notifications.js\r\nconst resetNotifications = () => {\r\n    return {\r\n        type: NOTIFICATION_STATUS_RESET,\r\n    }\r\n}\r\n\r\nexport {\r\n    createdProduct,\r\n    editedProduct,\r\n    deletedProduct,\r\n    createdProperty,\r\n    deletedProperty,\r\n    closeNotifications,\r\n    resetNotifications\r\n}","import React, {Component} from 'react';\r\nimport {Link, Redirect} from 'react-router-dom';\r\nimport {Button} from \"react-bootstrap\";\r\nimport ProductListTable from \"../product-list-table\";\r\nimport SearchPanel from \"../search-panel\";\r\nimport {connect} from \"react-redux\";\r\nimport {fetchProducts, productsError} from \"../../store/actions/propducts-actions\";\r\nimport ErrorIndicator from \"../error-indicator\";\r\nimport {deletedProduct, resetNotifications} from \"../../store/actions/notifications-actions\";\r\nimport {userIsAuth} from \"../../store/actions/isAuth-actions\";\r\nimport {deleteItem, userLogOut} from \"../../services/firebase-service\";\r\n\r\nimport './product-list.scss';\r\n\r\nclass ProductList extends Component {\r\n\r\n    state = {\r\n        term: '',\r\n        columnName: 'itemName',\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.userIsAuth();\r\n        this.props.resetNotifications();\r\n        this.props.fetchProducts();\r\n    }\r\n\r\n    columnChange = (columnName) => {\r\n        this.setState({\r\n            columnName\r\n        })\r\n    }\r\n\r\n    termSetup = (term) => {\r\n        this.setState({\r\n            term\r\n        })\r\n    }\r\n\r\n    searchItems = (arr, term) => {\r\n        if (term.length === 0) {\r\n            return arr;\r\n        }\r\n\r\n        return arr.filter((el) =>\r\n            el[this.state.columnName].toString().toLowerCase().indexOf(term.toLowerCase()) > -1)\r\n    }\r\n\r\n    render() {\r\n        const {products, loading, error, email, logIn, productsError, deletedProduct} = this.props;\r\n\r\n        const {term} = this.state;\r\n\r\n        const visibleItems = this.searchItems(products, term);\r\n\r\n        if (!logIn) {\r\n            return <Redirect to={'/login'}/>\r\n        }\r\n\r\n        return (\r\n            <div className={'product-list-wrap'}>\r\n                <div className={'header'}>\r\n                    <div className={'button-group'}>\r\n                        <div className={'wrap colored'}>\r\n                            <div className={'background'}></div>\r\n                            <Link to={'/'} className={'header-links'}>\r\n                                Листинг товаров\r\n                            </Link>\r\n                        </div>\r\n                        <div className={'wrap'}>\r\n                            <div className={'background'}></div>\r\n                            <Link to={'/property-list'} className={'header-links'}>\r\n                                Листинг проперти\r\n                            </Link>\r\n                        </div>\r\n                    </div>\r\n                    <div className={'button-group'}>\r\n                        <div className={'user-name'}>\r\n                            Пользователь (E-mail): {email}\r\n                        </div>\r\n                        <div className={'button-log-out-wrap'}>\r\n                            <Button className={'button-log-out'} variant={\"warning\"} onClick={userLogOut}>\r\n                                Выйти\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className={'product-list'}>\r\n                    <div className={'button-wrap'}>\r\n                        <Link to={'/add-item'} className={'add-item-link'}>\r\n                            <Button className={'add-button'} variant={\"warning\"}>\r\n                                Добавить товар\r\n                            </Button>\r\n                        </Link>\r\n                    </div>\r\n                    {error ? <ErrorIndicator/> :\r\n                        <div>\r\n                            <SearchPanel termSetup={this.termSetup} columnChange={this.columnChange}/>\r\n                            <ProductListTable products={visibleItems}\r\n                                              onDeleted={deleteItem}\r\n                                              loading={loading}\r\n                                              productsError={productsError}\r\n                                              deletedProduct={deletedProduct} />\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        products: state.products.products,\r\n        loading: state.products.loading,\r\n        error: state.products.error,\r\n        email: state.isAuth.email,\r\n        logIn: state.isAuth.logIn,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    fetchProducts,\r\n    productsError,\r\n    deletedProduct,\r\n    userIsAuth,\r\n    resetNotifications\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductList);","import ProductList from \"./product-list\";\r\n\r\nexport default ProductList;","import React from 'react';\r\nimport {TableCell, TableHead, TableRow, TableSortLabel} from \"@material-ui/core\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport PropTypes from \"prop-types\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nimport './property-list-table.scss';\r\n\r\nconst PropertyListTableHeader = (props) => {\r\n\r\n    const {order, orderBy, onRequestSort} = props;\r\n\r\n    const headCells = [\r\n        {id: 'propName', label: 'Перечень проперти'},\r\n        {id: 'propType', label: 'Тип'},\r\n    ];\r\n\r\n    const createSortHandler = (property) => (event) => {\r\n        onRequestSort(event, property);\r\n    };\r\n\r\n    PropertyListTableHeader.propTypes = {\r\n        onRequestSort: PropTypes.func.isRequired,\r\n        order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n        orderBy: PropTypes.string.isRequired,\r\n    };\r\n\r\n    const useStyles = makeStyles(() => ({\r\n        visuallyHidden: {\r\n            border: 0,\r\n            clip: 'rect(0 0 0 0)',\r\n            height: 1,\r\n            margin: -1,\r\n            overflow: 'hidden',\r\n            padding: 0,\r\n            position: 'absolute',\r\n            top: 20,\r\n            width: 1,\r\n        },\r\n    }));\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <TableHead>\r\n            <TableRow>\r\n                {headCells.map((headCell) => (\r\n                    <TableCell\r\n                        key={headCell.id}\r\n                        sortDirection={orderBy === headCell.id ? order : false}\r\n                        id={`${headCell.id}`}\r\n                        align={headCell.id === 'itemName' ? 'center' : 'left'}\r\n                    >\r\n                        <TableSortLabel\r\n                            active={orderBy === headCell.id}\r\n                            direction={orderBy === headCell.id ? order : 'asc'}\r\n                            onClick={createSortHandler(headCell.id)}\r\n                            IconComponent={ExpandMoreIcon}\r\n                        >\r\n                            <div className={'table-header'}>{headCell.label}</div>\r\n                            {orderBy === headCell.id ? (<span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}</span>) : null}\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                ))}\r\n                <TableCell key={'administration'}\r\n                           id={'administration'}><div className={'table-header'}>Управление</div>\r\n                </TableCell>\r\n            </TableRow>\r\n        </TableHead>\r\n    )\r\n}\r\n\r\nexport default PropertyListTableHeader;","import PropertyListTable from \"./property-list-table\";\r\n\r\nexport default PropertyListTable;","import React from 'react';\r\nimport {createMuiTheme, ThemeProvider} from \"@material-ui/core/styles\";\r\nimport {ruRU} from \"@material-ui/core/locale\";\r\nimport {\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableFooter,\r\n\r\n    TableRow,\r\n\r\n} from \"@material-ui/core\";\r\nimport {Link} from \"react-router-dom\";\r\nimport UniversalTablePagination from \"../universal-table-pagination\";\r\nimport PropertyListTableHeader from \"./property-list-table-header\";\r\n\r\nimport './property-list-table.scss';\r\n\r\nconst PropertyListTable = ({properties, onDeleted, propertiesError, deletedProperty}) => {\r\n\r\n    // русская локализация\r\n    const theme = createMuiTheme({\r\n        palette: {\r\n            primary: {main: '#1976d2'},\r\n        },\r\n    }, ruRU);\r\n\r\n    // начинаем делать пагинацию\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, properties.length - page * rowsPerPage);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n    // закончили с пагинацией\r\n\r\n    // начинаем делать сортировку\r\n\r\n    function descendingComparator(a, b, orderBy) {\r\n        if (b[orderBy] < a[orderBy]) {\r\n            return -1;\r\n        }\r\n        if (b[orderBy] > a[orderBy]) {\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getComparator(order, orderBy) {\r\n        return order === 'desc'\r\n            ? (a, b) => descendingComparator(a, b, orderBy)\r\n            : (a, b) => -descendingComparator(a, b, orderBy);\r\n    }\r\n\r\n    function stableSort(array, comparator) {\r\n        const stabilizedThis = array.map((el, index) => [el, index]);\r\n        stabilizedThis.sort((a, b) => {\r\n            const order = comparator(a[0], b[0]);\r\n            if (order !== 0) return order;\r\n            return a[1] - b[1];\r\n        });\r\n        return stabilizedThis.map((el) => el[0]);\r\n    }\r\n\r\n    const [order, setOrder] = React.useState('asc');\r\n    const [orderBy, setOrderBy] = React.useState();\r\n\r\n    const handleRequestSort = (event, property) => {\r\n        const isAsc = orderBy === property && order === 'asc';\r\n        setOrder(isAsc ? 'desc' : 'asc');\r\n        setOrderBy(property);\r\n    };\r\n\r\n    // закончили с сортировкой\r\n\r\n    return (\r\n        <div className={'property-list-table'}>\r\n            <ThemeProvider theme={theme}>\r\n                <TableContainer>\r\n                    <Table>\r\n                        <PropertyListTableHeader\r\n                            order={order}\r\n                            orderBy={orderBy}\r\n                            onRequestSort={handleRequestSort}\r\n                        />\r\n                        <TableBody>\r\n                            {/*Если rowsPerPage = -1 (т.е. выбрано в пагинации \"Показать Все\", то мапим без слайса)*/}\r\n                            {(rowsPerPage > 0 ?\r\n                                    stableSort(properties, getComparator(order, orderBy))\r\n                                        .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                    : stableSort(properties, getComparator(order, orderBy))\r\n                            )\r\n                                .map((properties) => {\r\n                                    const {id, propertyName, propertyType} = properties;\r\n                                    return (\r\n                                        <TableRow key={id}>\r\n                                            <TableCell>\r\n                                                <div className={'property-name table-body'}>{propertyName}</div>\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <div className={'property-type table-body'}>{propertyType}</div>\r\n                                            </TableCell>\r\n                                            <TableCell align={\"right\"}>\r\n                                                <Link to={'#'}\r\n                                                      onClick={() => onDeleted(id, 'properties', propertiesError, deletedProperty)}\r\n                                                      className={'link'}>Удалить</Link>\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    );\r\n                                })}\r\n                            {emptyRows > 0 && (\r\n                                <TableRow style={{height: 47 * emptyRows}}>\r\n                                    <TableCell colSpan={6}/>\r\n                                </TableRow>\r\n                            )}\r\n                        </TableBody>\r\n                        <TableFooter>\r\n                            <TableRow>\r\n                                <UniversalTablePagination\r\n                                    array={properties}\r\n                                    rowsPerPage={rowsPerPage}\r\n                                    page={page}\r\n                                    handleChangePage={handleChangePage}\r\n                                    handleChangeRowsPerPage={handleChangeRowsPerPage}\r\n                                />\r\n                            </TableRow>\r\n                        </TableFooter>\r\n                    </Table>\r\n                </TableContainer>\r\n            </ThemeProvider>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PropertyListTable;","import {\r\n    FETCH_PROPERTIES_FAILURE, FETCH_PROPERTIES_SPINNER_CLOSE,\r\n    FETCH_PROPERTIES_SPINNER_OPEN,\r\n    FETCH_PROPERTIES_SUCCESS\r\n} from \"../../action-types\";\r\nimport {getItems} from \"../../services/firebase-service\";\r\n\r\nconst propertiesLoaded = (newItems) => {\r\n    const objectsToArray = Object.values(newItems);\r\n    const getKeysToArray = Object.keys(newItems);\r\n    for (let i = 0; i < getKeysToArray.length; i++) {       // добавляю свойство id для того что бы через него редактировать или удалять необходимые объекты\r\n        objectsToArray[i].id = getKeysToArray[i]\r\n    }\r\n    return {\r\n        type: FETCH_PROPERTIES_SUCCESS,\r\n        payload: objectsToArray\r\n    }\r\n}\r\n\r\nconst propertiesSpinnerOpen = () => {\r\n    return {\r\n        type: FETCH_PROPERTIES_SPINNER_OPEN,\r\n    }\r\n}\r\n\r\nconst propertiesSpinnerClose = () => {\r\n    return {\r\n        type: FETCH_PROPERTIES_SPINNER_CLOSE,\r\n    }\r\n}\r\n\r\nconst propertiesError = (error) => {\r\n    return {\r\n        type: FETCH_PROPERTIES_FAILURE,\r\n        payload: error,\r\n    }\r\n}\r\n\r\nconst fetchProperties = () => (dispatch) => {\r\n    dispatch(propertiesSpinnerOpen());\r\n    getItems(dispatch, 'properties', propertiesLoaded);\r\n}\r\n\r\nexport {\r\n    fetchProperties,\r\n    propertiesError,\r\n    propertiesSpinnerOpen,\r\n    propertiesSpinnerClose,\r\n    propertiesLoaded\r\n}","import React, {useEffect} from 'react';\r\nimport {Link, Redirect} from \"react-router-dom\";\r\nimport {Button} from \"react-bootstrap\";\r\nimport PropertyListTable from \"../property-list-table\";\r\nimport {connect} from \"react-redux\";\r\nimport Spinner from \"../spinner\";\r\nimport ErrorIndicator from \"../error-indicator\";\r\nimport {fetchProperties, propertiesError} from \"../../store/actions/properties-actions\";\r\nimport {deletedProperty, resetNotifications} from \"../../store/actions/notifications-actions\";\r\nimport {deleteItem, userLogOut} from \"../../services/firebase-service\";\r\n\r\nimport './property-list.scss';\r\n\r\nconst PropertyList = ({fetchProperties, propertiesError, deletedProperty, properties, loading, error, email, logIn, resetNotifications}) => {\r\n\r\n    useEffect(() => {\r\n        resetNotifications();\r\n        fetchProperties();\r\n    }, [])\r\n\r\n    if (!logIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    if (loading) {\r\n        return <Spinner/>\r\n    }\r\n\r\n    if (error) {\r\n        return <ErrorIndicator/>\r\n    }\r\n\r\n    return (\r\n        <div className={'property-list-wrap'}>\r\n            <div className={'header'}>\r\n                <div className={'button-group'}>\r\n                    <div className={'wrap'}>\r\n                        <div className={'background'}></div>\r\n                        <Link to={'/'} className={'header-links'}>\r\n                            Листинг товаров\r\n                        </Link>\r\n                    </div>\r\n                    <div className={'wrap colored'}>\r\n                        <div className={'background'}></div>\r\n                        <Link to={'/property-list'} className={'header-links'}>\r\n                            Листинг проперти\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n                <div className={'button-group'}>\r\n                    <div className={'user-name'}>\r\n                        Пользователь (E-mail): {email}\r\n                    </div>\r\n                    <div className={'button-log-out-wrap'}>\r\n                        <Button className={'button-log-out'} variant={\"warning\"} onClick={userLogOut}>\r\n                            Выйти\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={'property-list'}>\r\n                <div className={'button-wrap'}>\r\n                    <Link to={'/add-property'} className={'add-property-link'}>\r\n                        <Button className={'add-prop-button'} variant={\"warning\"}>\r\n                            Добавить проперти\r\n                        </Button>\r\n                    </Link>\r\n                </div>\r\n                <PropertyListTable properties={properties}\r\n                                   onDeleted={deleteItem}\r\n                                   propertiesError={propertiesError}\r\n                                   deletedProperty={deletedProperty} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        properties: state.properties.properties,\r\n        loading: state.properties.loading,\r\n        error: state.properties.error,\r\n        email: state.isAuth.email,\r\n        logIn: state.isAuth.logIn,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    fetchProperties,\r\n    propertiesError,\r\n    deletedProperty,\r\n    resetNotifications\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PropertyList);","import PropertyList from './property-list';\r\n\r\nexport default PropertyList;","import {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useAddItemLabelStyles = makeStyles({\r\n    root: {\r\n        fontFamily: 'Roboto, serif !important',\r\n        fontStyle: 'normal !important',\r\n        fontWeight: 'normal !important',\r\n        fontSize: '14px !important',\r\n        lineHeight: '16px !important',\r\n        color: '#000000 !important',\r\n        opacity: 0.8,\r\n        letterSpacing: '0 !important',\r\n    },\r\n});\r\n\r\n// !important пришлось добавить потому-что иначе стили не перебивались\r\n\r\nexport default useAddItemLabelStyles;","import {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useAddItemInputStyles = makeStyles({\r\n    root: {\r\n        maxWidth: '255px',\r\n        padding: '8px 8px 7px 8px',\r\n    },\r\n    input: {\r\n        padding: '0',\r\n        height:'100%'\r\n    }\r\n});\r\n\r\nexport default useAddItemInputStyles;","import {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useSaveButtonStyles = makeStyles({\r\n    root: {\r\n        background: '#34C15C',\r\n        '&:hover': {\r\n            background: '#229641',\r\n        },\r\n        borderRadius: 4,\r\n        border: 0,\r\n        color: '#FFFFFF',\r\n        height: 32,\r\n        width: 160,\r\n        boxShadow: '5px 10px 10px rgba(0, 0, 0, 0.05)'\r\n    },\r\n    label: {\r\n        textTransform: 'none',\r\n    },\r\n});\r\n\r\nexport default useSaveButtonStyles;","import {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst usePropertyLabelStyles = makeStyles({\r\n    root: {\r\n        maxWidth: '120px',\r\n        marginLeft: 0,\r\n    },\r\n    label: {\r\n        fontFamily: 'Roboto, serif',\r\n        fontStyle: 'normal',\r\n        fontWeight: 'normal',\r\n        fontSize: 14,\r\n        lineHeight: '16px',\r\n        color: '#000000',\r\n        opacity: 0.8,\r\n    },\r\n});\r\n\r\nexport default usePropertyLabelStyles;","export default __webpack_public_path__ + \"static/media/Ellipse.7ad78ffd.svg\";","import StyledRadio from \"./styled-radio-button\";\r\n\r\nexport default StyledRadio;","import React from 'react';\r\nimport {Radio} from \"@material-ui/core\";\r\nimport clsx from \"clsx\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport image from \"../../img/Ellipse.svg\";\r\n\r\nconst StyledRadio = (props) => {\r\n\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            padding: '0 8px 0 0',\r\n            '&:hover': {\r\n                backgroundColor: 'transparent',\r\n            },\r\n        },\r\n        icon: {\r\n            borderRadius: '50%',\r\n            width: 24,\r\n            height: 24,\r\n            boxShadow: 'inset 0 0 0 1px rgba(16,22,26,.2), inset 0 -1px 0 rgba(16,22,26,.1)',\r\n            backgroundColor: '#FFFFFF',\r\n            backgroundImage: 'linear-gradient(180deg,hsla(0,0%,100%,.8),hsla(0,0%,100%,0))',\r\n            '$root.Mui-focusVisible &': {\r\n                outline: '2px auto rgba(19,124,189,.6)',\r\n                outlineOffset: 2,\r\n            },\r\n            'input:hover ~ &': {\r\n                backgroundColor: '#FFFFFF',\r\n            },\r\n        },\r\n        checkedIcon: {\r\n            backgroundImage: `url(${image})`,\r\n            backgroundRepeat: 'no-repeat',\r\n            margin: '0px auto',\r\n            backgroundPosition: 'center center',\r\n        },\r\n    });\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Radio\r\n            className={classes.root}\r\n            disableRipple\r\n            size={'small'}\r\n            color=\"default\"\r\n            checkedIcon={<span className={clsx(classes.icon, classes.checkedIcon)}/>}\r\n            icon={<span className={classes.icon}/>}\r\n            {...props}\r\n        />\r\n    );\r\n}\r\n\r\nexport default StyledRadio;","import AddProperty from \"./add-property\";\r\n\r\nexport default AddProperty;","import React from 'react';\r\nimport {ThemeProvider} from \"@material-ui/core/styles\";\r\nimport theme from \"../../styles/customizing-material-ui-components/theme\";\r\nimport {useFormik} from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {FormControl, FormControlLabel, FormHelperText, FormLabel, RadioGroup} from \"@material-ui/core\";\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport useAddItemLabelStyles from \"../../styles/customizing-material-ui-components/add-item-label-style\";\r\nimport useAddItemInputStyles from \"../../styles/customizing-material-ui-components/add-item-input-style\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport useSaveButtonStyles from \"../../styles/customizing-material-ui-components/button-save-style\";\r\nimport usePropertyLabelStyles from \"../../styles/customizing-material-ui-components/add-property-radio-style\";\r\nimport StyledRadio from \"../styled-radio-icon\";\r\nimport {postItemsToDatabase} from \"../../services/firebase-service\";\r\n\r\nimport './add-property.scss';\r\n\r\nconst AddProperty = ({properties, propertiesError, createdProperty, propertiesSpinnerOpen, propertiesSpinnerClose}) => {\r\n\r\n    const classesLabel = useAddItemLabelStyles();\r\n\r\n    const classesInput = useAddItemInputStyles();\r\n\r\n    const classesSaveBtn = useSaveButtonStyles();\r\n\r\n    const classesRadioButtons = usePropertyLabelStyles();\r\n\r\n    const validateNames = (arr, value) => {\r\n        const result = arr.find((el) => el?.propertyName.toLowerCase() === value?.toLowerCase())\r\n        return !result;\r\n    }\r\n\r\n    const validationSchema = yup.object().shape({\r\n        propertyName: yup.string().typeError('Должно быть строкой')\r\n            .test('sameName', 'Свойство с таким именем уже существует', (value) => {\r\n                if (!value) return true                     // если поле пустое, перейдет к следующей проверке required\r\n                return validateNames(properties, value)     // возвращает false, если свойство с таким именем уже существует\r\n            })\r\n            .required('Обязательное поле'),\r\n        propertyType: yup.string().typeError('Должно быть строкой').required('Обязательное поле'),\r\n    });\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            propertyName: '',\r\n            propertyType: 'Dropdown',\r\n        },\r\n        validationSchema: validationSchema,\r\n        onSubmit: async (values) => {\r\n            propertiesSpinnerOpen();\r\n            const {propertyName} = values;\r\n            const trimmedPropertyName = propertyName.trim();\r\n            const newValues = {\r\n                ...values,\r\n                propertyName: trimmedPropertyName,\r\n            };\r\n\r\n            await postItemsToDatabase(newValues, 'properties', propertiesError, propertiesSpinnerClose, createdProperty);\r\n        },\r\n        validateOnBlur: true,\r\n    });\r\n\r\n    const {\r\n        values, errors, touched, handleChange,\r\n        handleBlur, isValid, handleSubmit, dirty\r\n    } = formik;\r\n\r\n    const getError = (touched, error) => {\r\n        return touched && error && <FormHelperText>{error}</FormHelperText>\r\n    }\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <div className={'add-property'}>\r\n                <div className={'add-property-bordered-wrap'}>\r\n                    <form onSubmit={handleSubmit} className={'add-property-wrap'}>\r\n                        <div className={'buttons-wrap'}>\r\n                            <Link to={'/property-list'} className={'button-back'}>\r\n                                Вернуться\r\n                            </Link>\r\n                            <Button\r\n                                disableRipple={true}\r\n                                className={'button-save'}\r\n                                classes={{\r\n                                    root: classesSaveBtn.root,\r\n                                    label: classesSaveBtn.label,\r\n                                }}\r\n                                type={'submit'}\r\n                                disabled={!isValid || !dirty}\r\n                                onClick={handleSubmit}>\r\n                                Сохранить\r\n                            </Button>\r\n                        </div>\r\n                        <div className={'add-prop-head'}>\r\n                            <h5>Добавление свойства</h5>\r\n                        </div>\r\n                        <div className={'add-prop-body'}>\r\n                            <FormControl error={touched.propertyName && errors.propertyName}>\r\n                                <FormLabel classes={{root: classesLabel.root}}\r\n                                           className={'labels'}>Название свойства<span className={'red-star'}>*</span></FormLabel>\r\n                                <OutlinedInput type=\"text\"\r\n                                               variant=\"outlined\"\r\n                                               notched={false}\r\n                                               placeholder='Название свойства'\r\n                                               multiline\r\n                                               classes={{\r\n                                                   root: classesInput.root,\r\n                                               }}\r\n                                               name={'propertyName'}\r\n                                               onChange={handleChange}\r\n                                               onBlur={handleBlur}\r\n                                               value={values.propertyName}>\r\n                                </OutlinedInput>\r\n                                {getError(touched.propertyName, errors.propertyName)}\r\n                            </FormControl>\r\n\r\n                            <FormControl error={touched.propertyType && errors.propertyType}>\r\n                                <FormLabel classes={{root: classesLabel.root}}\r\n                                           focused={false}\r\n                                           className={'labels'}>Укажите тип свойства<span className={'red-star'}>*</span></FormLabel>\r\n                                <RadioGroup name=\"propertyType\"\r\n                                            value={values.propertyType}\r\n                                            onChange={handleChange}\r\n                                            onBlur={handleBlur}>\r\n                                    <FormControlLabel value=\"Dropdown\" control={<StyledRadio/>}\r\n                                                      classes={{\r\n                                                          root: classesRadioButtons.root,\r\n                                                          label: classesRadioButtons.label\r\n                                                      }}\r\n                                                      label=\"Dropdown\"/>\r\n                                    <FormControlLabel value=\"Number\"\r\n                                                      classes={{\r\n                                                          root: classesRadioButtons.root,\r\n                                                          label: classesRadioButtons.label\r\n                                                      }}\r\n                                                      control={<StyledRadio/>} label=\"Number\"/>\r\n                                    <FormControlLabel value=\"String\"\r\n                                                      classes={{\r\n                                                          root: classesRadioButtons.root,\r\n                                                          label: classesRadioButtons.label\r\n                                                      }}\r\n                                                      control={<StyledRadio/>} label=\"String\"/>\r\n                                </RadioGroup>\r\n                                {getError(touched.propertyType, errors.propertyType)}\r\n                            </FormControl>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </ThemeProvider>\r\n    )\r\n}\r\n\r\nexport default AddProperty;\r\n","import React, {useEffect} from 'react';\r\nimport {\r\n    fetchProperties,\r\n    propertiesError,\r\n    propertiesSpinnerClose,\r\n    propertiesSpinnerOpen\r\n} from \"../../store/actions/properties-actions\";\r\nimport {connect} from \"react-redux\";\r\nimport AddProperty from \"../add-property\";\r\nimport Spinner from \"../spinner\";\r\nimport ErrorIndicator from \"../error-indicator\";\r\nimport {createdProperty, resetNotifications} from \"../../store/actions/notifications-actions\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst AddPropertyContainer = ({\r\n                                  fetchProperties,\r\n                                  propertiesError,\r\n                                  properties,\r\n                                  loading,\r\n                                  error,\r\n                                  createdProperty,\r\n                                  propertiesSpinnerOpen,\r\n                                  propertiesSpinnerClose,\r\n                                  logIn,\r\n                                  resetNotifications\r\n                              }) => {\r\n\r\n    useEffect(() => {\r\n        resetNotifications();\r\n        fetchProperties();\r\n    }, [])\r\n\r\n    if (!logIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    if (loading) {\r\n        return <Spinner/>\r\n    }\r\n\r\n    if (error) {\r\n        return <ErrorIndicator/>\r\n    }\r\n\r\n    return (\r\n        <AddProperty properties={properties}\r\n                     propertiesError={propertiesError}\r\n                     createdProperty={createdProperty}\r\n                     propertiesSpinnerOpen={propertiesSpinnerOpen}\r\n                     propertiesSpinnerClose={propertiesSpinnerClose}\r\n        />\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        properties: state.properties.properties,\r\n        loading: state.properties.loading,\r\n        error: state.properties.error,\r\n        logIn: state.isAuth.logIn,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    fetchProperties,\r\n    propertiesError,\r\n    createdProperty,\r\n    propertiesSpinnerOpen,\r\n    propertiesSpinnerClose,\r\n    resetNotifications\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddPropertyContainer);","import {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useAddItemSelectStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        margin: 0,\r\n        width: 255,\r\n    },\r\n    root: {\r\n        fontFamily: 'Roboto, serif',\r\n        fontStyle: 'normal',\r\n        fontWeight: 'normal',\r\n        fontSize: 14,\r\n        lineHeight: '16px',\r\n        color: '#000000',\r\n        paddingTop: 8.5,\r\n        paddingBottom: 6.5,\r\n    },\r\n    icon: {\r\n        color: '#0258FF'\r\n    }\r\n}));\r\n\r\nexport default useAddItemSelectStyles;","import {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useAddPropertyButtonStyles = makeStyles({\r\n    root: {\r\n        color: '#0258FF',\r\n        padding: '8px'\r\n    },\r\n});\r\n\r\nexport default useAddPropertyButtonStyles;","import {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useAddPropInputStyles = makeStyles({\r\n    root: {\r\n        width: '255px',\r\n        padding: '8px 8px 7px 8px',\r\n        marginRight: '22px',\r\n        '@media (max-width:576px)': {\r\n            marginRight: 0,\r\n        }\r\n    },\r\n    input: {\r\n        padding: '0',\r\n        height: '1em',\r\n    }\r\n});\r\n\r\nexport default useAddPropInputStyles;","import AddPropertyToProduct from \"./add-property-to-product\";\r\n\r\nexport default AddPropertyToProduct;","import React, {useEffect, useState} from 'react';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport RemoveCircleOutlineIcon from '@material-ui/icons/RemoveCircleOutline';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport useAddItemSelectStyles from \"../../styles/customizing-material-ui-components/add-item-select-style\";\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport useAddPropertyButtonStyles from \"../../styles/customizing-material-ui-components/button-add-property-style\";\r\nimport useAddPropInputStyles from \"../../styles/customizing-material-ui-components/add-prop-input-style\";\r\n\r\nimport './add-property-to-product.scss';\r\nimport {FieldArray} from \"formik\";\r\n\r\nconst AddPropertyToProduct = ({handleChange, touched, errors, handleBlur, values, properties, getError}) => {\r\n\r\n    const classesSelect = useAddItemSelectStyles();\r\n    const classesButton = useAddPropertyButtonStyles();\r\n    const classesInput = useAddPropInputStyles();\r\n\r\n    const {propertiesOfProduct} = values;\r\n    // Храним массив оставшихся свойств.\r\n    const [lastProperties, setLastProperties] = useState(properties);\r\n\r\n    // если товар редактируется, из свего массива свойств вычитаю массив свойств, которые уже есть у товара,\r\n    // и переопределяю массив оставшихся свойств. В случае, если товар только добавляется, то результатом вычитания останется\r\n    // изначальный массив свойств (полученный с сервера).\r\n    // Вычитание произвожу по имени свойств (propertyName).\r\n    const propertiesWithEditing = (properties, propertiesOfProduct) => {\r\n        const result = properties.filter(x => !propertiesOfProduct.some(y => x.propertyName === y.propertyName));\r\n        setLastProperties(result);\r\n    }\r\n\r\n    useEffect(() => propertiesWithEditing(properties, propertiesOfProduct), [properties, propertiesOfProduct])\r\n\r\n    // удаляю выбранное свойство из массива оставшихся свойств\r\n    const removeSelectedProperties = (event) => {\r\n        handleChange(event);\r\n        const {value} = event.target;\r\n        const lastProps = lastProperties.filter(item => item.propertyName !== value);\r\n        setLastProperties(lastProps);\r\n    }\r\n\r\n    // если происходит удаление свойства у товара, то происходит поиск по имении удаляемого свойства в массиве всех свойств\r\n    // и добавляется данное свойство (объект с этим свойством) в массив оставшихся свойств\r\n    const pushSelectedProperties = (property) => {\r\n        if (property) {\r\n            const selectedProperty = properties.find(({propertyName}) => propertyName === property);\r\n            lastProperties.push(selectedProperty);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // в случае, когда в селекте выбрано свойство, делаю копию оставшихся свойств и добавляю его для дальнейшего\r\n    // рендеринга итемов для селекта, иначе любое выбранное свойство удаляется из массива оставшихся свойств\r\n    const selectedWithLastProperties = (propName) => {\r\n        const selectedProperty = properties.find(({propertyName}) => propertyName === propName);\r\n        // делаю копию массива оставшихся свойств\r\n        const arr = lastProperties.slice();\r\n        // пушу к этому массиву выбранное в селекте свойство\r\n        arr.push(selectedProperty);\r\n        // рендерю итемы для селекта свойств\r\n        return arr.map(renderMenuItems);\r\n    }\r\n\r\n    const renderMenuItems = (item) => {\r\n        const {propertyName} = item;\r\n        return (\r\n            <MenuItem value={propertyName}>{propertyName}</MenuItem>\r\n        )\r\n    };\r\n\r\n    const renderValueInputs = (selectedProp, index) => {\r\n        // нахожу по имени выбранное свойство из массива всех возможных свойств\r\n        const selectedProperty = properties.find(({propertyName}) => propertyName === selectedProp.propertyName);\r\n        // присваиваю тип и id выбранного свойства в массив добавленных свойств данному товару\r\n        selectedProp.propertyType = selectedProperty.propertyType;              // записываю тип свойства в propertiesOfProduct[index].propertyType товара\r\n        selectedProp.id = selectedProperty.id;                                  //записываю id свойства в propertiesOfProduct[index].id товара\r\n\r\n        const nameOfFieldArray = `propertiesOfProduct.${index}.propertyValue`;\r\n        switch (selectedProperty.propertyType) {\r\n            case 'Dropdown':\r\n                return (\r\n                    <FieldArray name={`${nameOfFieldArray}`}>\r\n                        {({remove, push}) => (\r\n                            <div className={'add-property-right-column'}>\r\n                                <p className={'property-name'}>Значение</p>\r\n                                {/*В случае если массив значений свойства DROPDOWN будет пустым, не выполнять мапинг*/}\r\n                                {selectedProp.propertyValue && selectedProp.propertyValue.length > 0 &&\r\n                                selectedProp.propertyValue.map((selectedPropValue, idx) => (\r\n                                    <div className={'input-with-remove-button'} key={idx}>\r\n                                        <FormControl error={\r\n                                            touched.propertiesOfProduct && touched.propertiesOfProduct[index] &&\r\n                                            errors.propertiesOfProduct && errors.propertiesOfProduct[index] &&\r\n                                            touched.propertiesOfProduct[index].propertyValue &&\r\n                                            errors.propertiesOfProduct[index].propertyValue &&\r\n                                            touched.propertiesOfProduct[index].propertyValue[idx] &&\r\n                                            errors.propertiesOfProduct[index].propertyValue[idx]\r\n                                                ? touched.propertiesOfProduct[index].propertyValue[idx].propertyValue\r\n                                                && errors.propertiesOfProduct[index].propertyValue[idx].propertyValue : null}>\r\n                                            <OutlinedInput type=\"text\"\r\n                                                           variant=\"outlined\"\r\n                                                           notched={false}\r\n                                                           multiline\r\n                                                           classes={{\r\n                                                               root: classesInput.root,\r\n                                                               input: classesInput.input,\r\n                                                           }}\r\n                                                           name={`${nameOfFieldArray}.${idx}.propertyValue`}\r\n                                                           onChange={handleChange}\r\n                                                           onBlur={handleBlur}\r\n                                                           value={propertiesOfProduct[index].propertyValue[idx].propertyValue}>\r\n                                            </OutlinedInput>\r\n                                            {\r\n                                                touched.propertiesOfProduct && touched.propertiesOfProduct[index] &&\r\n                                                errors.propertiesOfProduct && errors.propertiesOfProduct[index] &&\r\n                                                touched.propertiesOfProduct[index].propertyValue &&\r\n                                                errors.propertiesOfProduct[index].propertyValue &&\r\n                                                touched.propertiesOfProduct[index].propertyValue[idx] &&\r\n                                                errors.propertiesOfProduct[index].propertyValue[idx]\r\n                                                    ? getError(touched.propertiesOfProduct[index].propertyValue[idx].propertyValue,\r\n                                                    errors.propertiesOfProduct[index].propertyValue[idx].propertyValue) : null\r\n                                            }\r\n                                        </FormControl>\r\n                                        <IconButton classes={{root: classesButton.root}}\r\n                                                    onClick={() => remove(idx)}>\r\n                                            <RemoveCircleOutlineIcon/>\r\n                                        </IconButton>\r\n                                    </div>\r\n                                ))}\r\n                                <div className={'right-column-add-button'}>\r\n                                    <IconButton classes={{root: classesButton.root}}\r\n                                                onClick={() => push({propertyValue: ''})}>\r\n                                        <AddCircleOutlineIcon/>\r\n                                    </IconButton>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </FieldArray>\r\n                );\r\n            case 'Number':\r\n                return (\r\n                    <div className={'add-property-right-column'}>\r\n                        <p className={'property-name'}>Значение</p>\r\n                        <FormControl\r\n                            error={touched.propertiesOfProduct && touched.propertiesOfProduct[index]\r\n                            && errors.propertiesOfProduct && errors.propertiesOfProduct[index]\r\n                                ? touched.propertiesOfProduct[index].propertyValue && errors.propertiesOfProduct[index].propertyValue : null}>\r\n                            <OutlinedInput type=\"number\"\r\n                                           variant=\"outlined\"\r\n                                           notched={false}\r\n                                           classes={{\r\n                                               root: classesInput.root,\r\n                                               input: classesInput.input,\r\n                                           }}\r\n                                           name={`${nameOfFieldArray}`}\r\n                                           onChange={handleChange}\r\n                                           onBlur={handleBlur}\r\n                                           value={propertiesOfProduct[index].propertyValue}>\r\n                            </OutlinedInput>\r\n                            {touched.propertiesOfProduct && touched.propertiesOfProduct[index]\r\n                            && errors.propertiesOfProduct && errors.propertiesOfProduct[index]\r\n                                ? getError(touched.propertiesOfProduct[index].propertyValue, errors.propertiesOfProduct[index].propertyValue) : null}\r\n                        </FormControl>\r\n                    </div>\r\n                );\r\n            case 'String':\r\n                return (\r\n                    <div className={'add-property-right-column'}>\r\n                        <p className={'property-name'}>Значение</p>\r\n                        <FormControl\r\n                            error={touched.propertiesOfProduct && touched.propertiesOfProduct[index]\r\n                            && errors.propertiesOfProduct && errors.propertiesOfProduct[index]\r\n                                ? touched.propertiesOfProduct[index].propertyValue && errors.propertiesOfProduct[index].propertyValue : null}>\r\n                            <OutlinedInput type=\"text\"\r\n                                           variant=\"outlined\"\r\n                                           notched={false}\r\n                                           multiline\r\n                                           classes={{\r\n                                               root: classesInput.root,\r\n                                               input: classesInput.input,\r\n                                           }}\r\n                                           name={`${nameOfFieldArray}`}\r\n                                           onChange={handleChange}\r\n                                           onBlur={handleBlur}\r\n                                           value={propertiesOfProduct[index].propertyValue}>\r\n                            </OutlinedInput>\r\n                            {touched.propertiesOfProduct && touched.propertiesOfProduct[index]\r\n                            && errors.propertiesOfProduct && errors.propertiesOfProduct[index]\r\n                                ? getError(touched.propertiesOfProduct[index].propertyValue, errors.propertiesOfProduct[index].propertyValue) : null}\r\n                        </FormControl>\r\n                    </div>\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <FieldArray name={'propertiesOfProduct'}>\r\n            {({remove, push}) => (\r\n                <div className={'add-property-to-product'}>\r\n                    <div className={'add-property-head'}>\r\n                        <h5>Добавление товару свойств</h5>\r\n                        {/*отключаем кнопку добавления свойств, когда кол-во свойств в товаре равно количеству достпуных\r\n                        свойств*/}\r\n                        {properties.length > propertiesOfProduct.length &&\r\n                        <IconButton classes={{root: classesButton.root}}\r\n                                    onClick={() => push({\r\n                                        id: '',\r\n                                        propertyName: '',\r\n                                        propertyValue: '',\r\n                                        propertyType: '',\r\n                                    })}>\r\n                            <AddCircleOutlineIcon/>\r\n                        </IconButton>}\r\n                    </div>\r\n                    <div className={'add-property-body'}>\r\n                        {propertiesOfProduct.map((propertyOfProduct, index) => (\r\n                            <div className=\"add-property-body-element\" key={index}>\r\n                                <div className={'add-prop-left-column'}>\r\n                                    <div className={'add-prop-row'}>\r\n                                        <div className={'add-prop-left-button-wrap'}>\r\n                                            <IconButton classes={{root: classesButton.root}}\r\n                                                        onClick={() => {\r\n                                                            pushSelectedProperties(propertiesOfProduct[index].propertyName);\r\n                                                            remove(index)\r\n                                                        }}>\r\n                                                <RemoveCircleOutlineIcon/>\r\n                                            </IconButton>\r\n                                        </div>\r\n                                        <p className={'property-name'}>Свойство {index + 1}</p>\r\n                                    </div>\r\n                                    <FormControl variant=\"outlined\" className={classesSelect.formControl}\r\n                                                 classes={{label: classesSelect.label}}>\r\n                                        <Select\r\n                                            classes={{\r\n                                                root: classesSelect.root,\r\n                                                icon: classesSelect.icon\r\n                                            }}\r\n                                            name={`propertiesOfProduct.${index}.propertyName`}\r\n                                            value={propertiesOfProduct[index].propertyName}\r\n                                            onChange={(event) => {\r\n                                                removeSelectedProperties(event);\r\n                                            }}\r\n                                            onBlur={handleBlur}\r\n                                            notched={false} /*Если true, на контуре сделана выемка для размещения метки.*/\r\n                                        >\r\n                                            {/*если в селекте выбрано свойство, добавить его к оставшимся свойствам, но только для рендеринга итемов для селекта,\r\n                                            иначе просто отрендерить оставшием свойства*/}\r\n                                            {propertiesOfProduct[index].propertyName ?\r\n                                                selectedWithLastProperties(propertiesOfProduct[index].propertyName) :\r\n                                                lastProperties.map(renderMenuItems)}\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </div>\r\n                                {propertiesOfProduct[index].propertyName &&\r\n                                renderValueInputs(propertiesOfProduct[index], index)}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </FieldArray>\r\n    )\r\n}\r\n\r\nexport default AddPropertyToProduct;","import {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useUploadButtonStyles = makeStyles({\r\n    root: {\r\n        background: 'none',\r\n        '&:hover': {\r\n            background: 'none',\r\n            boxShadow: 'none'\r\n        },\r\n        borderRadius: 4,\r\n        color: '#828282',\r\n        minHeight: 32,\r\n        width: 255,\r\n        boxShadow: 'none',\r\n        border: '1px solid #E0E0E0',\r\n        padding: '4px 8px'\r\n    },\r\n    label: {\r\n        textTransform: 'none',\r\n        justifyContent: 'space-between',\r\n    },\r\n});\r\n\r\nexport default useUploadButtonStyles;","import {createMuiTheme} from '@material-ui/core/styles';\r\n\r\nconst themeUploadBtn = createMuiTheme({\r\n    typography: {\r\n        button: {\r\n            fontFamily: 'Roboto, serif',\r\n            fontStyle: 'normal',\r\n            fontWeight: 'normal',\r\n            fontSize: 14,\r\n            lineHeight: '16px',\r\n            letterSpacing: 'none',\r\n        }\r\n    }\r\n})\r\n\r\nexport default themeUploadBtn;","import {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useAddItemTextareaStyles = makeStyles({\r\n    root: {\r\n        maxWidth: '540px',\r\n        padding: '8px 8px 7px 8px',\r\n    },\r\n});\r\n\r\nexport default useAddItemTextareaStyles;","import Thumb from \"./thumb\";\r\n\r\nexport default Thumb;","import React, {Component} from 'react';\r\n\r\nimport './thumb.scss';\r\n\r\nclass Thumb extends Component {\r\n    state = {\r\n        thumb: undefined,\r\n    };\r\n\r\n    componentWillReceiveProps = (nextProps) => {\r\n        if (!nextProps.file) {\r\n            return;\r\n        }\r\n\r\n        this.setState(() => {\r\n            let reader = new FileReader();\r\n\r\n            reader.onloadend = () => {\r\n                this.setState({thumb: reader.result});\r\n            };\r\n\r\n            reader.readAsDataURL(nextProps.file);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {file} = this.props;\r\n        const {thumb} = this.state;\r\n\r\n        if (!file) {\r\n            return null;\r\n        }\r\n\r\n        return (<img src={thumb}\r\n                     alt={file.name}\r\n                     className={\"thumb img-thumbnail mt-2\"}/>);\r\n    }\r\n}\r\n\r\nexport default Thumb;","import PriceFormatInput from \"./price-format-input\";\r\n\r\nexport default PriceFormatInput;","import React from \"react\";\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\n\r\nconst PriceFormatInput = ({classesInput, onChange, onBlur, values}) => {\r\n\r\n    return (\r\n        <OutlinedInput\r\n            variant=\"outlined\"\r\n            notched={false}\r\n            placeholder='Стоимость товара'\r\n            className={'number-input'}\r\n            classes={{\r\n                root: classesInput.root,\r\n                input: classesInput.input\r\n            }}\r\n            name={'price'}\r\n            onChange={onChange}                      // необходимо прокидывать с такими именами, иначе NumberFormat не сработает\r\n            onBlur={onBlur}                          // необходимо прокидывать с такими именами, иначе NumberFormat не сработает\r\n            value={values.price}>\r\n        </OutlinedInput>\r\n    )\r\n}\r\n\r\nexport default PriceFormatInput;","import firebase from 'firebase/app';\r\nimport 'firebase/storage';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBqzyhjRSQnQiJdwh2_P2W-wS6XMhowBuI\",\r\n    authDomain: \"shop-app-firebase.firebaseapp.com\",\r\n    databaseURL: \"https://shop-app-firebase-default-rtdb.europe-west1.firebasedatabase.app\",\r\n    projectId: \"shop-app-firebase\",\r\n    storageBucket: \"shop-app-firebase.appspot.com\",\r\n    messagingSenderId: \"159676401640\",\r\n    appId: \"1:159676401640:web:ef06138de6d79548f6065d\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n// Не работает, если переместить в firebase-service\r\nconst storage = firebase.storage();\r\n\r\nexport {storage, firebase as default};\r\n","import React, {useState} from 'react';\r\nimport AddPropertyToProduct from \"../add-property-to-product\";\r\nimport {Link} from \"react-router-dom\";\r\nimport * as yup from \"yup\";\r\nimport {ThemeProvider} from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport theme from \"../../styles/customizing-material-ui-components/theme\";\r\nimport {FieldArray, FormikProvider, useFormik} from \"formik\";\r\nimport useSaveButtonStyles from \"../../styles/customizing-material-ui-components/button-save-style\";\r\nimport useUploadButtonStyles from \"../../styles/customizing-material-ui-components/button-upload-style\";\r\nimport useAddItemLabelStyles from \"../../styles/customizing-material-ui-components/add-item-label-style\";\r\nimport {FormControl, FormHelperText, FormLabel} from \"@material-ui/core\";\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport themeUploadBtn from \"../../styles/customizing-material-ui-components/theme-upload-btn\";\r\nimport useAddItemInputStyles from \"../../styles/customizing-material-ui-components/add-item-input-style\";\r\nimport useAddItemTextareaStyles from \"../../styles/customizing-material-ui-components/add-item-textarea-style\";\r\nimport NumberFormat from 'react-number-format';\r\nimport Thumb from \"../thumb\";\r\nimport PriceFormatInput from \"../price-format-input\";\r\nimport {withRouter} from 'react-router-dom';\r\nimport {getDateOfChange, postItemsToDatabase, putItemsToDatabase} from \"../../services/firebase-service\";\r\nimport {storage} from \"../../services/firebase-config\";\r\n\r\nimport \"./add-item.scss\";\r\n\r\nconst AddItem = ({\r\n                     properties,\r\n                     productsError,\r\n                     itemId,\r\n                     editingProduct,\r\n                     clearSelectedProduct,\r\n                     createdProduct,\r\n                     editedProduct,\r\n                     productsSpinnerOpen,\r\n                     productsSpinnerClose\r\n                 }) => {\r\n\r\n    const [image, setImage] = useState(null);\r\n\r\n    const classesLabel = useAddItemLabelStyles();\r\n    const classesInput = useAddItemInputStyles();\r\n    const classesSaveBtn = useSaveButtonStyles();\r\n    const classesUploadBtn = useUploadButtonStyles();\r\n    const classesTextarea = useAddItemTextareaStyles();\r\n\r\n    // отображенире цены происходит с пробелами чсерез каждых три символа\r\n    const priceFormat = (value) => {\r\n        return value.toString().replace(/(\\d)(?=(\\d{3})+$)/g, '$1 ');\r\n    }\r\n\r\n    const validationSchema = yup.object().shape({\r\n        itemName: yup.string().typeError('Должно быть строкой').trim('Без паробелов').required('Обязательное поле'),\r\n        price: yup.number().typeError('Должно быть числом').integer('Должно быть целым числом')\r\n            .test('firstSymbol', 'Стоимость не должна ровняться нулю', (value) => {\r\n                return value?.toString().charAt(0) !== '0';     // число НЕ должно быть 0\r\n            }).required('Обязательное поле'),\r\n        file: itemId ?\r\n            // если есть ID продукта, то повторная загрузка картинки не обязательна\r\n            yup.array().of(yup.object().shape({\r\n                file: yup.mixed().test('fileSize', 'Размер файла не должен превышать 150кб', (value) => {\r\n                    if (!value) return false\r\n                    return value.size < 153600\r\n                }),\r\n                type: yup.string().oneOf(['image/jpeg', 'image/png', 'image/pjpeg'], 'Добавьте файл с правильным форматом .jpg,.jpeg,.png'),\r\n                name: yup.string()\r\n            }).nullable().typeError('Добавьте файл'))\r\n            :\r\n            yup.array().of(yup.object().shape({\r\n                file: yup.mixed().test('fileSize', 'Размер файла не должен превышать 150кб', (value) => {\r\n                    if (!value) return false\r\n                    return value.size < 153600\r\n                }).required(),\r\n                type: yup.string().oneOf(['image/jpeg', 'image/png', 'image/pjpeg'], 'Добавьте файл с правильным форматом .jpg,.jpeg,.png').required(),\r\n                name: yup.string().required()\r\n            }).typeError('Добавьте файл')).required(),\r\n        fileUrl: yup.string().nullable().typeError('Должно быть строкой'),\r\n        description: yup.string().typeError('Должно быть строкой').required('Обязательное поле'),\r\n        propertiesOfProduct: yup.array().of(yup.object().shape({\r\n                id: yup.string().typeError('Должно быть строкой').required('Обязательное поле'),\r\n                propertyName: yup.string().typeError('Должно быть строкой').required('Обязательное поле'),\r\n                propertyType: yup.string().typeError('Должно быть строкой').required('Обязательное поле'),\r\n                propertyValue: yup.lazy(value => {\r\n                    switch (typeof value) {\r\n                        case 'number':\r\n                            return yup.number().typeError('Должно быть числом').required('Обязательное поле');\r\n                        case 'string':\r\n                            return yup.string().typeError('Должно быть строкой').required('Обязательное поле');\r\n                        default:\r\n                            return yup.array().of(yup.object().shape({\r\n                                propertyValue: yup.string()\r\n                                    .typeError('Должно быть строкой').required('Обязательное поле')\r\n                            })).required('Обязательное поле');\r\n                    }\r\n                })\r\n            }).required('Обязательное поле'),\r\n        ),\r\n    });\r\n\r\n    const getFileSchema = (file) => (file && {\r\n        file: file,\r\n        type: file.type,\r\n        name: file.name\r\n    })\r\n\r\n    const fileHandleChange = (e) => {\r\n        if (e.target.files[0]) {\r\n            setImage(e.target.files[0]);\r\n        } else setImage(null);\r\n    }\r\n\r\n    const getArrErrorsMessages = (errors) => {\r\n        const result = []\r\n        errors && Array.isArray(errors) && errors.forEach((value) => {\r\n            if (typeof value === 'string') {\r\n                result.push(value)\r\n            } else {\r\n                Object.values(value).forEach((error) => {\r\n                    result.push(error)\r\n                })\r\n            }\r\n        })\r\n        return result\r\n    };\r\n\r\n    const getError = (touched, error) => {\r\n        return touched && error && <FormHelperText>{error}</FormHelperText>\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            itemName: editingProduct.itemName,\r\n            price: editingProduct.price,\r\n            file: undefined,\r\n            fileUrl: editingProduct.fileUrl,\r\n            dateOfChange: '',\r\n            description: editingProduct.description,\r\n            // Если это редактируемый товар, и у него есть свойства, то сюда передается их массив, иначе создается пустой массив\r\n            propertiesOfProduct: itemId && editingProduct.propertiesOfProduct ? editingProduct.propertiesOfProduct : [],\r\n        },\r\n        validationSchema: validationSchema,\r\n        onSubmit: async (values) => {\r\n            productsSpinnerOpen();\r\n            const {itemName, description, price, propertiesOfProduct} = values;\r\n            const trimmedItemName = itemName.trim();\r\n            const trimmedDescription = description.trim();\r\n            const numberedPrice = parseInt(String(price).replace(/ /g, ''));\r\n            const trimmedPropsOfProduct = propertiesOfProduct.map((props) => {\r\n                if (typeof props.propertyValue === 'string') {\r\n                    return {...props, propertyValue: props.propertyValue.trim()};\r\n                } else if (Array.isArray(props.propertyValue)) {\r\n                    return {\r\n                        ...props, propertyValue: props.propertyValue.map((propValue) => {\r\n                            return {...propValue, propertyValue: propValue.propertyValue.trim()}\r\n                        })\r\n                    };\r\n                } else return props;\r\n            })\r\n\r\n            if (image) {\r\n                // добавление случайного шестизначного числа к названию файла, для того что бы файлы с одинаковыми именами\r\n                // не перезаписывали друг друга\r\n                const fileNameWithRndNumber = `${image.name}_${Math.floor(Math.random() * 1000000)}`;\r\n                const uploadTask = storage.ref(`images/${fileNameWithRndNumber}`).put(image);\r\n                await uploadTask.on(\r\n                    \"state_changed\",\r\n                    snapshot => {\r\n                    },\r\n                    error => {\r\n                        productsError(error);\r\n                    },\r\n                    () => {\r\n                        storage\r\n                            .ref('images')\r\n                            .child(fileNameWithRndNumber)\r\n                            .getDownloadURL()\r\n                            .then(url => {\r\n                                const newValues = {\r\n                                    ...values,\r\n                                    itemName: trimmedItemName,\r\n                                    description: trimmedDescription,\r\n                                    price: numberedPrice,\r\n                                    propertiesOfProduct: trimmedPropsOfProduct,\r\n                                    file: [],                               // чистим массив с фото, т.к. он не нужен в\r\n                                                                            // realtime firebase, файл загружается в firebase storage\r\n                                    fileUrl: url,\r\n                                };\r\n\r\n                                // Сработает, если товар редактируется\r\n                                if (itemId) {\r\n                                    putItemsToDatabase({...newValues, dateOfChange: getDateOfChange()}, itemId,\r\n                                        'products', productsError, productsSpinnerClose, editedProduct);\r\n                                } else {\r\n                                    postItemsToDatabase({...newValues, dateOfChange: getDateOfChange()},\r\n                                        'products', productsError, productsSpinnerClose, createdProduct);\r\n                                }\r\n                            });\r\n                    }\r\n                );\r\n            }\r\n            // Сработает, если товар редактируется, но при этом изображение не было изменено (не было перевыбрано).\r\n            else {\r\n                const newValues = {\r\n                    ...values,\r\n                    itemName: trimmedItemName,\r\n                    description: trimmedDescription,\r\n                    price: numberedPrice,\r\n                    propertiesOfProduct: trimmedPropsOfProduct,\r\n                    file: [],                               // чистим массив с фото, т.к. он не нужен в\r\n                                                            // realtime firebase, файл загружается в firebase storage\r\n                };\r\n\r\n                await putItemsToDatabase({...newValues, dateOfChange: getDateOfChange()}, itemId,\r\n                    'products', productsError, productsSpinnerClose, editedProduct);\r\n            }\r\n        },\r\n        validateOnBlur: true,\r\n    });\r\n\r\n    const {\r\n        values, errors, touched, handleChange,\r\n        handleBlur, isValid, handleSubmit, dirty, setFieldTouched\r\n    } = formik;\r\n\r\n    return (\r\n        <FormikProvider value={formik}> {/*для того чтобы работал arrayHelper в инпуте type file*/}\r\n            <ThemeProvider theme={theme}>\r\n                <div className={'add-item'}>\r\n                    <div className={'add-item-bordered-wrap'}>\r\n                        <form onSubmit={handleSubmit} className={'add-item-wrap'}>\r\n                            <div className={'buttons-wrap'}>\r\n                                <Link to={'/'} className={'button-back'} onClick={clearSelectedProduct}>\r\n                                    Вернуться\r\n                                </Link>\r\n                                <Button\r\n                                    disableRipple={true}\r\n                                    className={'button-save'}\r\n                                    classes={{\r\n                                        root: classesSaveBtn.root,\r\n                                        label: classesSaveBtn.label,\r\n                                    }}\r\n                                    type={'submit'}\r\n                                    disabled={!isValid || !dirty}\r\n                                    onClick={handleSubmit}>\r\n                                    Сохранить\r\n                                </Button>\r\n                            </div>\r\n                            <div className={'add-item-head'}>\r\n                                <h5>{itemId ? 'Редактирование товара' : 'Добавление товара'}</h5>\r\n                            </div>\r\n                            <div className={'add-item-body'}>\r\n                                <FormControl error={touched.itemName && errors.itemName}>\r\n                                    <FormLabel classes={{root: classesLabel.root}}\r\n                                               className={'labels'}>Название товара<span className={'red-star'}>*</span></FormLabel>\r\n                                    <OutlinedInput type=\"text\"\r\n                                                   variant=\"outlined\"\r\n                                                   notched={false}\r\n                                                   placeholder='Название товара'\r\n                                                   multiline\r\n                                                   classes={{\r\n                                                       root: classesInput.root,\r\n                                                       input: classesInput.input,\r\n                                                   }}\r\n                                                   name={'itemName'}\r\n                                                   onChange={handleChange}\r\n                                                   onBlur={handleBlur}\r\n                                                   value={values.itemName}>\r\n                                    </OutlinedInput>\r\n                                    {getError(touched.itemName, errors.itemName)}\r\n                                </FormControl>\r\n\r\n                                <FormControl error={touched.price && errors.price}>\r\n                                    <FormLabel classes={{root: classesLabel.root}}\r\n                                               className={'labels'}>Стоимость товара<span\r\n                                        className={'red-star'}>*</span></FormLabel>\r\n                                    <NumberFormat classesInput={classesInput}\r\n                                                  onChange={handleChange}                   // необходимо прокидывать с такими именами, иначе NumberFormat не сработает\r\n                                                  onBlur={handleBlur}                       // необходимо прокидывать с такими именами, иначе NumberFormat не сработает\r\n                                                  values={values}\r\n                                                  customInput={PriceFormatInput}\r\n                                                  format={priceFormat}\r\n                                    />\r\n                                    {getError(touched.price, errors.price)}\r\n                                </FormControl>\r\n\r\n                                <FormControl error={touched.file && errors.file}>\r\n                                    <FormLabel classes={{root: classesLabel.root}}\r\n                                               className={'labels'}>Изображение<span\r\n                                        className={'red-star'}>*</span></FormLabel>\r\n                                    <FieldArray name={'file'}>\r\n                                        {(arrayHelper) => (\r\n                                            <div>\r\n                                                <input\r\n                                                    accept=\".jpg,.jpeg,.png\"\r\n                                                    className={'upload-input'}\r\n                                                    id=\"contained-button-file\"\r\n                                                    multiple\r\n                                                    type=\"file\"\r\n                                                    name={'file'}\r\n                                                    onBlur={handleBlur}\r\n                                                    onChange={(event) => {\r\n                                                        const {files} = event.target;\r\n                                                        const file = getFileSchema(files.item(0));\r\n                                                        setFieldTouched('file', true, false);\r\n                                                        fileHandleChange(event);\r\n                                                        values.fileUrl = null;                                              // при выборе картинки обнуляю ссылку на неё\r\n                                                        if (!file) {\r\n                                                            arrayHelper.remove(0)\r\n                                                            setFieldTouched('file', true, false);\r\n                                                            values.fileUrl = editingProduct.fileUrl;                        // если отменил выбор картинки (нажал кнопку \"отмена\"),\r\n                                                                                                                            // ссылу на изображение беру из редактируемого товара\r\n                                                        }\r\n                                                        if (Array.isArray(values.file)) {\r\n                                                            arrayHelper.replace(0, file)\r\n                                                        } else {\r\n                                                            arrayHelper.push(file)\r\n                                                        }\r\n                                                    }}\r\n                                                />\r\n                                                <label className={'upload-bnt-label'} htmlFor=\"contained-button-file\">\r\n                                                    <ThemeProvider theme={themeUploadBtn}>\r\n                                                        <Button variant=\"contained\"\r\n                                                                component=\"span\"\r\n                                                                disableRipple={true}\r\n                                                                classes={{\r\n                                                                    root: classesUploadBtn.root,\r\n                                                                    label: classesUploadBtn.label,\r\n                                                                }}\r\n                                                                endIcon={<i className=\"fa fa-upload\"\r\n                                                                            aria-hidden=\"true\"/>}>\r\n\r\n                                                            {(values.file === undefined || values.file[0] === null)\r\n                                                                ? <div className={'upload-btn-name'}>Выберите\r\n                                                                    изображение</div> : values.file[0].file.name}\r\n                                                        </Button>\r\n                                                    </ThemeProvider>\r\n                                                </label>\r\n                                            </div>\r\n                                        )}\r\n                                    </FieldArray>\r\n                                    {getArrErrorsMessages(errors.file).map((error) => getError(true, error))}\r\n                                </FormControl>\r\n                                {/*Если редактируем товар, то загружаем его картинку сразу, но при выборе другой картинки\r\n                                используем мимниатюру Thumb*/}\r\n                                {values.fileUrl ?\r\n                                    <img src={values.fileUrl}\r\n                                         alt={'изображение товара'}\r\n                                         className={\"thumb img-thumbnail mt-2\"}/> :\r\n                                    <Thumb\r\n                                        file={(values.file === undefined || values.file[0] === null) ?\r\n                                            null : values.file[0].file}/>}\r\n                                <FormControl error={touched.description && errors.description}>\r\n                                    <FormLabel classes={{root: classesLabel.root}}\r\n                                               className={'labels'}>Описание<span\r\n                                        className={'red-star'}>*</span></FormLabel>\r\n                                    <OutlinedInput type=\"text\"\r\n                                                   multiline={true}\r\n                                                   rows={5}\r\n                                                   inputProps={{maxLength: 1000}}\r\n                                                   variant=\"outlined\"\r\n                                                   notched={false}\r\n                                                   placeholder='Описание товара не должно превышать 1000 символов'\r\n                                                   className={'add-item-textarea'}\r\n                                                   classes={{\r\n                                                       root: classesTextarea.root,\r\n                                                   }}\r\n                                                   name={'description'}\r\n                                                   onChange={handleChange}\r\n                                                   onBlur={handleBlur}\r\n                                                   value={values.description}>\r\n                                    </OutlinedInput>\r\n                                    {getError(touched.description, errors.description)}\r\n                                </FormControl>\r\n                            </div>\r\n                            <AddPropertyToProduct handleChange={handleChange}\r\n                                                  touched={touched}\r\n                                                  errors={errors}\r\n                                                  handleBlur={handleBlur}\r\n                                                  values={values}\r\n                                                  properties={properties}\r\n                                                  getError={getError}/>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </ThemeProvider>\r\n        </FormikProvider>\r\n    )\r\n}\r\n\r\nexport default withRouter(AddItem);","import {\r\n    CLEAR_SELECTED_PRODUCT,\r\n    FETCH_SELECTED_PRODUCT_FAILURE,\r\n    FETCH_SELECTED_PRODUCT_REQUEST,\r\n    FETCH_SELECTED_PRODUCT_SUCCESS\r\n} from \"../../action-types\";\r\nimport {getSelectedProduct} from \"../../services/firebase-service\";\r\n\r\nconst selectedProductLoaded = (products, itemId) => {\r\n    const objectsToArray = Object.values(products);\r\n    const getKeysToArray = Object.keys(products);\r\n    for (let i = 0; i < getKeysToArray.length; i++) {       // добавляю свойство id для того что бы через него\r\n        objectsToArray[i].id = getKeysToArray[i]            // редактировать или удалять необходимые объекты\r\n    }\r\n    const product = objectsToArray.find(({id}) => id === itemId);\r\n    if (product === undefined) {\r\n        return selectedProductError(new Error('Some Error'));\r\n    }\r\n\r\n    return {\r\n        type: FETCH_SELECTED_PRODUCT_SUCCESS,\r\n        payload: product\r\n    }\r\n}\r\n\r\nconst clearSelectedProduct = () => {        // зачищаем выбранный товар, т.к. если этого не делать, то при переключении\r\n                                            // на другой товар, до его загрузки отображается предыдущий выбранный.\r\n    return {\r\n        type: CLEAR_SELECTED_PRODUCT,\r\n    }\r\n}\r\n\r\nconst selectedProductRequested = () => {\r\n    return {\r\n        type: FETCH_SELECTED_PRODUCT_REQUEST,\r\n    }\r\n}\r\n\r\nconst selectedProductError = (error) => {\r\n    return {\r\n        type: FETCH_SELECTED_PRODUCT_FAILURE,\r\n        payload: error,\r\n    }\r\n}\r\n\r\nconst fetchSelectedProduct = (itemId) => (dispatch) => {\r\n    dispatch(selectedProductRequested());\r\n    getSelectedProduct(dispatch, selectedProductLoaded, itemId)\r\n}\r\n\r\nexport {\r\n    fetchSelectedProduct,\r\n    clearSelectedProduct\r\n}","import React, {useEffect} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {fetchProperties} from \"../../store/actions/properties-actions\";\r\nimport {\r\n    fetchProducts,\r\n    productsError,\r\n    productsSpinnerClose,\r\n    productsSpinnerOpen\r\n} from \"../../store/actions/propducts-actions\";\r\nimport Spinner from \"../spinner\";\r\nimport ErrorIndicator from \"../error-indicator\";\r\nimport AddItem from \"./add-item\";\r\nimport {clearSelectedProduct, fetchSelectedProduct} from \"../../store/actions/propduct-card-actions\";\r\nimport {createdProduct, editedProduct, resetNotifications} from \"../../store/actions/notifications-actions\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst AddItemContainer = ({\r\n                              fetchProperties,\r\n                              fetchProducts,\r\n                              productsError,\r\n                              properties,\r\n                              loadingProps,\r\n                              errorProps,\r\n                              products,\r\n                              loadingProducts,\r\n                              errorProducts,\r\n                              loadingEditingProduct,\r\n                              errorEditingProduct,\r\n                              editingProduct,\r\n                              fetchSelectedProduct,\r\n                              clearSelectedProduct,\r\n                              createdProduct,\r\n                              editedProduct,\r\n                              productsSpinnerOpen,\r\n                              productsSpinnerClose,\r\n                              match,\r\n                              logIn,\r\n                              resetNotifications\r\n                          }) => {\r\n\r\n    const itemId = match.params.id;\r\n\r\n    useEffect(() => {\r\n        resetNotifications();\r\n        fetchProducts();\r\n        fetchProperties();\r\n        if (itemId) {\r\n            fetchSelectedProduct(itemId);\r\n        }\r\n        // срабатывает при уничтожении компоненты. Очищаю бывранный товар, т.к. если этого не делать, то при нажатии\r\n        // на backspace с редактируемого товара и последующем переходе на добавление товара в инпуты прогружаются\r\n        // данные ранее редактируемого товара\r\n        return () => clearSelectedProduct();\r\n    }, [itemId])\r\n\r\n    if (!logIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    if (loadingProps || loadingProducts || (loadingEditingProduct && itemId)) {\r\n        return <Spinner/>\r\n    }\r\n\r\n    if (errorProps || errorProducts || (errorEditingProduct && itemId)) {\r\n        return <ErrorIndicator/>\r\n    }\r\n\r\n    return (\r\n        <AddItem properties={properties}\r\n                 products={products}\r\n                 productsError={productsError}\r\n                 itemId={itemId}\r\n                 editingProduct={editingProduct}\r\n                 clearSelectedProduct={clearSelectedProduct}\r\n                 createdProduct={createdProduct}\r\n                 editedProduct={editedProduct}\r\n                 productsSpinnerOpen={productsSpinnerOpen}\r\n                 productsSpinnerClose={productsSpinnerClose}\r\n        />\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        properties: state.properties.properties,\r\n        loadingProps: state.properties.loading,\r\n        errorProps: state.properties.error,\r\n        products: state.products.products,\r\n        loadingProducts: state.products.loading,\r\n        errorProducts: state.products.error,\r\n        loadingEditingProduct: state.selectedProduct.loading,\r\n        errorEditingProduct: state.selectedProduct.error,\r\n        editingProduct: state.selectedProduct.selectedProduct,\r\n        logIn: state.isAuth.logIn,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    fetchProperties,\r\n    fetchProducts,\r\n    productsError,\r\n    fetchSelectedProduct,\r\n    clearSelectedProduct,\r\n    createdProduct,\r\n    editedProduct,\r\n    productsSpinnerOpen,\r\n    productsSpinnerClose,\r\n    resetNotifications\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddItemContainer);","import {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useProductCardItemSelectStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        margin: 0,\r\n        width: 255,\r\n    },\r\n    root: {\r\n        fontFamily: 'Roboto, serif',\r\n        fontStyle: 'normal',\r\n        fontWeight: 'normal',\r\n        fontSize: 14,\r\n        lineHeight: '16px',\r\n        color: '#828282',\r\n        paddingTop: 8.5,\r\n        paddingBottom: 6.5,\r\n    },\r\n    icon: {\r\n        color: '#0258FF'\r\n    }\r\n}));\r\n\r\nexport default useProductCardItemSelectStyles;","import React, {useEffect} from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport {useFormik} from 'formik';\r\nimport * as yup from 'yup';\r\nimport {ThemeProvider} from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport theme from \"../../styles/customizing-material-ui-components/theme\";\r\nimport useLoginButtonStyles from \"../../styles/customizing-material-ui-components/button-login-style\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport useProductCardItemSelectStyles\r\n    from \"../../styles/customizing-material-ui-components/product-card-item-select-style\";\r\n\r\nimport './product-card.scss';\r\n\r\nconst ProductCard = ({selectedProduct, clearSelectedProduct, logIn}) => {\r\n\r\n    const classes = useLoginButtonStyles();\r\n    const classesSelect = useProductCardItemSelectStyles();\r\n\r\n    const {itemName, fileUrl, description, price, propertiesOfProduct} = selectedProduct;\r\n\r\n    // При первом реднере компоненты, прохожу по массиву свойств товара и в случае, когда свойство имеет тип Dropdown,\r\n    // его первое значение из массива значений сразу устанавливаю в initialValues формика, т.к. если пользователь не выберет\r\n    // вручную какое либо свойство из селекта (т.е. не сработает onChange селекта), то в initialValues передастся весь\r\n    // массив значений свойств Dropdown, а не только одно значение.\r\n    const setFirstValuesFromDropDowns = (property, index) => {\r\n        if (property.propertyType === 'Dropdown') {\r\n            return setFieldValue(\r\n                `propertiesOfProduct.${index}.propertyValue`,\r\n                propertiesOfProduct[index].propertyValue[0].propertyValue,\r\n                false\r\n            )\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (propertiesOfProduct) {\r\n            propertiesOfProduct.map(setFirstValuesFromDropDowns)\r\n        }\r\n    }, []);\r\n\r\n    const validationSchema = yup.object().shape({\r\n        itemName: yup.string().typeError('Должно быть строкой').required('Обязательное поле'),\r\n        description: yup.string().typeError('Должно быть строкой').required('Обязательное поле'),\r\n        fileUrl: yup.string().typeError('Должно быть строкой').required('Обязательное поле'),\r\n        price: yup.number().typeError('Должно быть числом').integer('Должно быть целым числом').required('Обязательное поле'),\r\n        propertiesOfProduct: yup.array().of(yup.object().shape({\r\n            id: yup.string(),\r\n            propertyName: yup.string(),\r\n            propertyType: yup.string(),\r\n            propertyValue: yup.string(),\r\n        })),\r\n    });\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            itemName: itemName,\r\n            description: description,\r\n            fileUrl: fileUrl,\r\n            price: price,\r\n            propertiesOfProduct: propertiesOfProduct ? propertiesOfProduct : [],\r\n        },\r\n        validationSchema: validationSchema,\r\n        onSubmit: async (values) => {\r\n            await new Promise((r) => setTimeout(r, 500));\r\n            console.log(values)\r\n        },\r\n        validateOnBlur: true,\r\n    });\r\n\r\n    const {values, handleChange, handleBlur, isValid, handleSubmit, dirty, setFieldValue} = formik;\r\n\r\n    const renderMenuItems = (item) => {\r\n        const {propertyValue} = item;\r\n        return (\r\n            <MenuItem value={propertyValue}>{propertyValue}</MenuItem>\r\n        )\r\n    };\r\n\r\n    const renderPropertiesOfProduct = (property, index) => {\r\n        const {propertyName, propertyType, propertyValue} = property;\r\n        switch (propertyType) {\r\n            case 'Dropdown':\r\n                return (\r\n                    <div>\r\n                        <h4>{propertyName}</h4>\r\n                        <FormControl variant=\"outlined\" className={classesSelect.formControl}>\r\n                            <Select\r\n                                classes={{\r\n                                    root: classesSelect.root,\r\n                                    icon: classesSelect.icon\r\n                                }}\r\n                                name={`propertiesOfProduct.${index}.propertyValue`}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                /*Если true, на контуре сделана выемка для размещения имени селекта.*/\r\n                                notched={false}\r\n                                /*В данном случае будет первое значение из массива свойств Dropdown, т.к. при рендере\r\n                                этому полю было присвоено первое значение свойства из массива значений*/\r\n                                value={values.propertiesOfProduct[index].propertyValue}\r\n                            >\r\n                                {propertyValue.map(renderMenuItems)}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </div>\r\n                );\r\n            case 'Number':\r\n                return (\r\n                    <div>\r\n                        <h4>{propertyName}</h4>\r\n                        <p>{propertyValue}</p>\r\n                    </div>\r\n                );\r\n            case 'String':\r\n                return (\r\n                    <div>\r\n                        <h4>{propertyName}</h4>\r\n                        <p>{propertyValue}</p>\r\n                    </div>\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={'product-card'}>\r\n            <div className={'product-card-bordered-wrap'}>\r\n                <div className={\"product-card-wrap\"}>\r\n                    {logIn ?\r\n                        <div className={'link'}>\r\n                            <Link to={'/'} onClick={clearSelectedProduct}>\r\n                                Вернуться\r\n                            </Link>\r\n                        </div>\r\n                        : null}\r\n                    <form onSubmit={handleSubmit} className={'product-card-wrapper'}>\r\n                        <div className={'header-items-row'}>\r\n                            <div className={'item-image'}>\r\n                                <img src={fileUrl} alt=\"product\"/>\r\n                            </div>\r\n                            <div className={'item-information'}>\r\n                                <h3>{itemName}</h3>\r\n                                <p>{description}</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className={\"bottom-items-row\"}>\r\n                            <div className={\"item-properties\"}>\r\n                                {propertiesOfProduct && propertiesOfProduct.map(renderPropertiesOfProduct)}\r\n                                <h4>Стоимость</h4>\r\n                                <span className={'price'}>{price.toLocaleString('ru-RU')}$</span>\r\n                            </div>\r\n                            <div className={\"button-wrap\"}>\r\n                                <ThemeProvider theme={theme}>\r\n                                    <Button\r\n                                        classes={{\r\n                                            root: classes.root,\r\n                                            label: classes.label,\r\n                                        }}\r\n                                        type={'submit'}\r\n                                        disabled={!isValid}\r\n                                        onClick={handleSubmit}>\r\n                                        Беру!!!\r\n                                    </Button>\r\n                                </ThemeProvider>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProductCard;","import React, {useEffect} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport Spinner from \"../spinner\";\r\nimport ErrorIndicator from \"../error-indicator\";\r\nimport ProductCard from \"./product-card\";\r\nimport {clearSelectedProduct, fetchSelectedProduct} from \"../../store/actions/propduct-card-actions\";\r\nimport {resetNotifications} from \"../../store/actions/notifications-actions\";\r\n\r\nconst ProductCardContainer = ({\r\n                                  match,\r\n                                  selectedProduct,\r\n                                  loading,\r\n                                  error,\r\n                                  fetchSelectedProduct,\r\n                                  clearSelectedProduct,\r\n                                  logIn,\r\n                                  resetNotifications\r\n                              }) => {\r\n    const itemId = match.params.id;\r\n\r\n    useEffect(() => {\r\n        resetNotifications();\r\n        fetchSelectedProduct(itemId);\r\n        // срабатывает при уничтожении компоненты. Очищаю бывранный товар, т.к. если этого не делать, то при нажатии\r\n        // на backspace с редактируемого товара и последующем переходе на добавление товара в инпуты прогружаются\r\n        // данные ранее редактируемого товара\r\n        return () => clearSelectedProduct();\r\n    }, [itemId])\r\n\r\n    if (loading) {\r\n        return <Spinner/>\r\n    }\r\n\r\n    if (error) {\r\n        return <ErrorIndicator/>\r\n    }\r\n\r\n    return (\r\n        <ProductCard selectedProduct={selectedProduct} clearSelectedProduct={clearSelectedProduct} logIn={logIn}/>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        loading: state.selectedProduct.loading,\r\n        error: state.selectedProduct.error,\r\n        selectedProduct: state.selectedProduct.selectedProduct,\r\n        logIn: state.isAuth.logIn,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    fetchSelectedProduct,\r\n    clearSelectedProduct,\r\n    resetNotifications\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductCardContainer);","import App from \"./app\";\r\n\r\nexport default App;","import React from 'react';\r\nimport {Route, Switch} from 'react-router-dom';\r\nimport LoginContainer from \"../login/login-Container\";\r\nimport RegistrationContainer from \"../registration/registration-Container\";\r\nimport ProductList from \"../product-list\";\r\nimport PropertyList from \"../property-list\";\r\nimport AddPropertyContainer from \"../add-property/add-property-Container\";\r\nimport AddItemContainer from \"../add-item/add-item-Container\";\r\nimport ProductCardContainer from \"../product-card/product-card-Container\";\r\nimport ErrorIndicator from \"../error-indicator\";\r\n\r\nimport './app.scss';\r\n\r\nconst App = () => {\r\n\r\n    return (\r\n        <div className={'app'}>\r\n            <div className={'wrapper'}>\r\n                <Switch>\r\n                    <Route path={'/'}\r\n                           component={ProductList}\r\n                           exact/>\r\n                    <Route path={'/property-list'}\r\n                           component={PropertyList}/>\r\n                    <Route path={'/add-property'}\r\n                           component={AddPropertyContainer}/>\r\n                    <Route path={'/item-card/:id'}\r\n                           component={ProductCardContainer}/>\r\n                    <Route path={'/add-item/:id?'}\r\n                           component={AddItemContainer}/>\r\n                    <Route path={'/login'}\r\n                           component={LoginContainer}/>\r\n                    <Route path={'/registration'}\r\n                           component={RegistrationContainer}/>\r\n                    <Route render={ () => <ErrorIndicator /> } />       {/* Switch перекинет на страницу с ошибкой, если\r\n                                                                            ввести несуществующий адрес*/}\r\n                </Switch>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nconst Alert = (props) => {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst Notifications = ({history, showNotification, path, deletedItem, isEditing, closeNotifications}) => {\r\n\r\n    const backToListItems = (path) => {\r\n        return history.push(`${path}`)\r\n    }\r\n\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        closeNotifications();\r\n\r\n        backToListItems(path);\r\n    };\r\n\r\n    if (isEditing && !deletedItem && path === '/') {\r\n        return (\r\n            <Snackbar open={showNotification} autoHideDuration={4000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"success\">\r\n                    Товар успешно отредактирован! Вы будете автоматически перенаправлены в список товаров.\r\n                </Alert>\r\n            </Snackbar>\r\n        )\r\n    }\r\n\r\n    if (!isEditing && !deletedItem && path === '/') {\r\n        return (\r\n            <Snackbar open={showNotification} autoHideDuration={4000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"success\">\r\n                    Товар успешно добавлен! Вы будете автоматически перенаправлены в список товаров.\r\n                </Alert>\r\n            </Snackbar>\r\n        )\r\n    }\r\n\r\n    if (!isEditing && !deletedItem && path === '/property-list') {\r\n        return (\r\n            <Snackbar open={showNotification} autoHideDuration={4000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"success\">\r\n                    Свойство успешно добавлено! Вы будете автоматически перенаправлены в список добавленных свойств.\r\n                </Alert>\r\n            </Snackbar>\r\n        )\r\n    }\r\n\r\n    if (deletedItem) {\r\n        return (\r\n            <Snackbar open={showNotification} autoHideDuration={4000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"success\">\r\n                    {deletedItem === 'товар' ? 'Товар успешно удален' : null}\r\n                    {deletedItem === 'свойство' ? 'Свойство успешно удалено' : null}\r\n                </Alert>\r\n            </Snackbar>\r\n        )\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport default withRouter(Notifications);","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport Notifications from \"./notifications\";\r\nimport {closeNotifications} from \"../../store/actions/notifications-actions\";\r\n\r\nconst NotificationsContainer = ({\r\n                                    showNotification,\r\n                                    path,\r\n                                    isEditing,\r\n                                    deletedItem,\r\n                                    closeNotifications\r\n                                }) => {\r\n\r\n    return (\r\n        <Notifications showNotification={showNotification}\r\n                       path={path}\r\n                       isEditing={isEditing}\r\n                       deletedItem={deletedItem}\r\n                       closeNotifications={closeNotifications}\r\n        />\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        showNotification: state.notifications.showNotification,\r\n        path: state.notifications.path,\r\n        isEditing: state.notifications.isEditing,\r\n        deletedItem: state.notifications.deletedItem,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    closeNotifications\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NotificationsContainer);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport store from '../src/store/store';\r\nimport ErrorBoundry from './components/error-boundry';\r\nimport App from './components/app';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport NotificationsContainer from \"./components/notifications/notifications-Container\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}> {/*Предоставляет доступ к Redux Store*/}\r\n        <ErrorBoundry> {/*Обработка ошибок в компонентах ниже*/}\r\n                <HashRouter>\r\n                    <NotificationsContainer />\r\n                    <App/>\r\n                </HashRouter>\r\n        </ErrorBoundry>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n)"],"sourceRoot":""}