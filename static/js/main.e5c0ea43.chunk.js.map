{"version":3,"sources":["store/action-types.js","store/store.js","store/reducers/products-reducer.js","store/reducers/properties-reducer.js","store/reducers/product-card-reducer.js","store/reducers/notifications-reducer.js","store/reducers/is-auth-reducer.js","pages/error-indicator/error-indicator.js","components/error-boundary/error-boundary.js","components/universal-table-pagination/universal-table-pagination.js","components/spinner/spinner.js","components/product-list-table/product-list-table.js","components/product-list-table/product-list-table-header.js","components/search-panel/search-panel.js","services/firebase-service.js","store/actions/is-auth-actions.js","store/actions/notifications-actions.js","store/actions/propduct-card-actions.js","store/actions/propducts-actions.js","store/actions/properties-actions.js","hoc/with-auth-redirect.js","components/product-list/product-list.js","components/property-list-table/property-list-table.js","components/property-list-table/property-list-table-header.js","components/property-list/property-list.js","pages/main/main.js","pages/main/main-container.js","components/error-message-text/error-message-text.js","styles/customizing-material-ui-components/add-item-input-style.js","styles/customizing-material-ui-components/add-item-label-style.js","styles/customizing-material-ui-components/add-item-select-style.js","styles/customizing-material-ui-components/add-item-textarea-style.js","styles/customizing-material-ui-components/add-prop-input-style.js","styles/customizing-material-ui-components/add-property-radio-style.js","styles/customizing-material-ui-components/button-add-property-style.js","styles/customizing-material-ui-components/button-login-style.js","styles/customizing-material-ui-components/button-registration-style.js","styles/customizing-material-ui-components/button-save-style.js","styles/customizing-material-ui-components/button-upload-style.js","styles/customizing-material-ui-components/product-card-item-select-style.js","styles/customizing-material-ui-components/theme.js","styles/customizing-material-ui-components/theme-upload-btn.js","pages/login/login.js","pages/login/login-container.js","pages/registration/registration.js","pages/registration/registration-container.js","svg/Ellipse.svg","components/styled-radio-icon/styled-radio-button.js","pages/add-property/add-property.js","pages/add-property/add-property-container.js","components/add-property-to-product/add-property-to-product.js","components/thumb/thumb.js","components/price-format-input/price-format-input.js","pages/add-item/add-item.js","pages/add-item/add-item-container.js","pages/product-card/product-card.js","pages/product-card/product-card-container.js","components/app/app.js","components/app/app-container.js","components/notifications/notifications.js","components/notifications/notifications-container.js","index.js"],"names":["FETCH_PRODUCTS_SUCCESS","FETCH_PRODUCTS_SPINNER_OPEN","FETCH_PRODUCTS_SPINNER_CLOSE","FETCH_PRODUCTS_FAILURE","FETCH_SELECTED_PRODUCT_SUCCESS","FETCH_SELECTED_PRODUCT_REQUEST","FETCH_SELECTED_PRODUCT_FAILURE","CLEAR_SELECTED_PRODUCT","FETCH_PROPERTIES_SUCCESS","FETCH_PROPERTIES_SPINNER_OPEN","FETCH_PROPERTIES_SPINNER_CLOSE","FETCH_PROPERTIES_FAILURE","NOTIFICATION_CREATED_PRODUCT","NOTIFICATION_EDITED_PRODUCT","NOTIFICATION_DELETED_PRODUCT","NOTIFICATION_CREATED_PROPERTY","NOTIFICATION_DELETED_PROPERTY","NOTIFICATION_GO_TO_CLOSE","NOTIFICATION_STATUS_RESET","USER_IS_LOGGED_IN","USER_IS_LOGGED_OUT","USER_IS_LOGGED_REQUEST","reducers","combineReducers","products","state","action","undefined","loading","error","type","payload","properties","selectedProduct","notifications","showNotification","path","isEditing","deletedItem","isAuth","logIn","email","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ErrorIndicator","className","to","ErrorBoundary","hasError","errorInfo","this","setState","props","children","Component","UniversalTablePagination","array","rowsPerPage","page","handleChangePage","handleChangeRowsPerPage","useStyles","makeStyles","theme","root","flexShrink","marginLeft","spacing","TablePagination","rowsPerPageOptions","label","value","count","length","SelectProps","inputProps","native","onChangePage","onChangeRowsPerPage","ActionsComponent","classes","useTheme","IconButton","onClick","event","disabled","direction","Math","ceil","max","Spinner","backdrop","zIndex","drawer","color","Backdrop","open","CircularProgress","ProductListTable","onDeleted","productsError","deletedProduct","createMuiTheme","palette","primary","main","ruRU","React","useState","setPage","setRowsPerPage","emptyRows","min","descendingComparator","a","b","orderBy","getComparator","order","stableSort","comparator","stabilizedThis","map","el","index","sort","setOrder","setOrderBy","ThemeProvider","TableContainer","Table","onRequestSort","property","TableBody","TableRow","slice","product","id","itemName","price","dateOfChange","formattedPrice","toLocaleString","formattedDateOfChange","timestamp","d","Date","setTime","getDate","getMonth","getFullYear","toString","substr","timestampToDate","TableCell","align","style","height","colSpan","TableFooter","newPage","parseInt","target","ProductListTableHeader","visuallyHidden","border","clip","margin","overflow","padding","position","top","width","TableHead","headCell","sortDirection","TableSortLabel","active","IconComponent","ExpandMoreIcon","SearchPanel","onSearchChange","e","termSetup","onColumnChange","columnChange","TextField","size","variant","onChange","InputProps","startAdornment","InputAdornment","FormControl","InputLabel","Select","defaultValue","MenuItem","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","storage","getItems","dispatch","items","itemsLoaded","db","database","dbDataRef","ref","child","on","snap","data","val","deleteItem","key","itemError","set","getSelectedProduct","selectedProductLoaded","itemId","userLogOut","auth","signOut","then","catch","postItemsToDatabase","newValues","itemSpinnerClose","notificationItem","push","putItemsToDatabase","getDateOfChange","ServerValue","TIMESTAMP","userIsAuth","userIsAuthRequest","userIsLoggedIn","userIsNotLoggedIn","onAuthStateChanged","firebaseUser","getUserAuth","resetNotifications","objectsToArray","Object","values","getKeysToArray","keys","i","find","selectedProductError","Error","clearSelectedProduct","fetchSelectedProduct","productsLoaded","newItems","productsSpinnerOpen","fetchProducts","propertiesLoaded","propertiesSpinnerOpen","propertiesError","fetchProperties","mapStateToPropsForRedirect","withAuthRedirect","RedirectComponent","connect","ProductList","term","columnName","searchItems","arr","filter","toLowerCase","indexOf","visibleItems","Button","mapDispatchToProps","PropertyListTable","deletedProperty","propertyName","propertyType","PropertyListTableHeader","useEffect","Main","pathname","history","location","component","exact","PropertyList","ErrorMessageText","message","useAddItemInputStyles","maxWidth","input","useAddItemLabelStyles","fontFamily","fontStyle","fontWeight","fontSize","lineHeight","opacity","letterSpacing","useAddItemSelectStyles","formControl","paddingTop","paddingBottom","icon","useAddItemTextareaStyles","useAddPropInputStyles","marginRight","usePropertyLabelStyles","useAddPropertyButtonStyles","useLoginButtonStyles","background","borderRadius","textTransform","useRegistrationButtonStyles","useSaveButtonStyles","boxShadow","useUploadButtonStyles","minHeight","justifyContent","useProductCardItemSelectStyles","typography","button","themeUploadBtn","withRouter","errorMessage","setErrorMessage","validationSchema","yup","shape","typeError","required","password","formik","useFormik","initialValues","showPassword","onSubmit","signInWithEmailAndPassword","submitLogIn","console","log","validateOnBlur","errors","touched","handleChange","handleBlur","isValid","handleSubmit","dirty","setFieldValue","fullWidth","Boolean","FormLabel","OutlinedInput","notched","placeholder","name","onBlur","FormHelperText","endAdornment","edge","secondName","confirmPassword","oneOf","showConfirmPassword","createUserWithEmailAndPassword","submitRegistration","StyledRadio","backgroundColor","backgroundImage","outline","outlineOffset","checkedIcon","image","backgroundRepeat","backgroundPosition","Radio","disableRipple","clsx","AddProperty","createdProperty","propertiesSpinnerClose","classesLabel","classesInput","classesSaveBtn","classesRadioButtons","test","validateNames","trimmedPropertyName","trim","getError","multiline","focused","RadioGroup","FormControlLabel","control","AddPropertyToProduct","setFieldTouched","classesSelect","classesButton","propertiesOfProduct","lastProperties","setLastProperties","result","x","some","y","propertiesWithEditing","selectedWithLastProperties","propName","selectedProperty","renderMenuItems","item","renderValueInputs","selectedProp","nameOfFieldArray","errorConditionDropdown","idx","propertyValue","remove","selectedPropValue","errorConditionNumber","errorConditionString","propertyOfProduct","pushSelectedProperties","lastProps","removeSelectedProperties","Thumb","file","thumb","setThumb","reader","FileReader","onloadend","readAsDataURL","src","alt","PriceFormatInput","editingProduct","createdProduct","editedProduct","productsSpinnerClose","setImage","classesUploadBtn","classesTextarea","integer","charAt","of","nullable","fileUrl","description","trimmedItemName","trimmedDescription","numberedPrice","String","replace","trimmedPropsOfProduct","Array","isArray","propValue","fileNameWithRndNumber","floor","random","uploadTask","put","snapshot","getDownloadURL","url","customInput","format","arrayHelper","accept","multiple","getFileSchema","files","htmlFor","endIcon","forEach","getArrErrorsMessages","rows","maxLength","allProperties","uniqueResultTwo","obj","obj2","concat","createUniqueProperties","loadingProps","errorProps","loadingProducts","errorProducts","loadingEditingProduct","errorEditingProduct","match","params","ProductCard","Promise","r","setTimeout","setFirstValuesFromDropDowns","useCallback","App","MainContainer","AddPropertyContainer","ProductCardContainer","AddItemContainer","LoginContainer","RegistrationContainer","render","Alert","elevation","closeNotifications","handleClose","reason","dontBack","backToListItems","Snackbar","autoHideDuration","onClose","severity","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.e5c0ea43.chunk.js","sourcesContent":["const FETCH_PRODUCTS_SUCCESS = 'FETCH_PRODUCTS_SUCCESS';\r\nconst FETCH_PRODUCTS_SPINNER_OPEN = 'FETCH_PRODUCTS_SPINNER_OPEN';\r\nconst FETCH_PRODUCTS_SPINNER_CLOSE = 'FETCH_PRODUCTS_SPINNER_CLOSE';\r\nconst FETCH_PRODUCTS_FAILURE = 'FETCH_PRODUCTS_FAILURE';\r\n\r\nconst FETCH_SELECTED_PRODUCT_SUCCESS = 'FETCH_SELECTED_PRODUCT_SUCCESS';\r\nconst FETCH_SELECTED_PRODUCT_REQUEST = 'FETCH_SELECTED_PRODUCT_REQUEST';\r\nconst FETCH_SELECTED_PRODUCT_FAILURE = 'FETCH_SELECTED_PRODUCT_FAILURE';\r\nconst CLEAR_SELECTED_PRODUCT = 'CLEAR_SELECTED_PRODUCT';\r\n\r\nconst FETCH_PROPERTIES_SUCCESS = 'FETCH_PROPERTIES_SUCCESS';\r\nconst FETCH_PROPERTIES_SPINNER_OPEN = 'FETCH_PROPERTIES_SPINNER_OPEN';\r\nconst FETCH_PROPERTIES_SPINNER_CLOSE = 'FETCH_PROPERTIES_SPINNER_CLOSE';\r\nconst FETCH_PROPERTIES_FAILURE = 'FETCH_PROPERTIES_FAILURE';\r\n\r\nconst NOTIFICATION_CREATED_PRODUCT = 'NOTIFICATION_CREATED_PRODUCT'\r\nconst NOTIFICATION_EDITED_PRODUCT = 'NOTIFICATION_EDITED_PRODUCT';\r\nconst NOTIFICATION_DELETED_PRODUCT = 'NOTIFICATION_DELETED_PRODUCT';\r\nconst NOTIFICATION_CREATED_PROPERTY = 'NOTIFICATION_CREATED_PROPERTY';\r\nconst NOTIFICATION_DELETED_PROPERTY = 'NOTIFICATION_DELETED_PROPERTY';\r\nconst NOTIFICATION_GO_TO_CLOSE = 'NOTIFICATION_GO_TO_CLOSE';\r\nconst NOTIFICATION_STATUS_RESET = 'NOTIFICATION_STATUS_RESET';\r\n\r\nconst USER_IS_LOGGED_IN = 'USER_IS_LOGGED_IN';\r\nconst USER_IS_LOGGED_OUT = 'USER_IS_LOGGED_OUT';\r\nconst USER_IS_LOGGED_REQUEST = 'USER_IS_LOGGED_REQUEST';\r\n\r\nexport {\r\n    FETCH_PRODUCTS_SUCCESS,\r\n    FETCH_PRODUCTS_SPINNER_OPEN,\r\n    FETCH_PRODUCTS_SPINNER_CLOSE,\r\n    FETCH_PRODUCTS_FAILURE,\r\n    FETCH_SELECTED_PRODUCT_SUCCESS,\r\n    FETCH_SELECTED_PRODUCT_REQUEST,\r\n    FETCH_SELECTED_PRODUCT_FAILURE,\r\n    CLEAR_SELECTED_PRODUCT,\r\n    FETCH_PROPERTIES_SUCCESS,\r\n    FETCH_PROPERTIES_SPINNER_OPEN,\r\n    FETCH_PROPERTIES_SPINNER_CLOSE,\r\n    FETCH_PROPERTIES_FAILURE,\r\n    NOTIFICATION_CREATED_PRODUCT,\r\n    NOTIFICATION_EDITED_PRODUCT,\r\n    NOTIFICATION_DELETED_PRODUCT,\r\n    NOTIFICATION_CREATED_PROPERTY,\r\n    NOTIFICATION_DELETED_PROPERTY,\r\n    NOTIFICATION_GO_TO_CLOSE,\r\n    USER_IS_LOGGED_IN,\r\n    USER_IS_LOGGED_OUT,\r\n    USER_IS_LOGGED_REQUEST,\r\n    NOTIFICATION_STATUS_RESET\r\n}","import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\nimport {\n  productsReducer,\n  propertiesReducer,\n  productCardReducer,\n  notificationsReducer,\n  isAuthReducer,\n} from './reducers';\nimport thunk from 'redux-thunk';\n\nconst reducers = combineReducers({\n  products: productsReducer,\n  properties: propertiesReducer,\n  selectedProduct: productCardReducer,\n  notifications: notificationsReducer,\n  isAuth: isAuthReducer,\n});\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk)));\n\nexport default store;","import {\n  FETCH_PRODUCTS_FAILURE,\n  FETCH_PRODUCTS_SPINNER_CLOSE,\n  FETCH_PRODUCTS_SPINNER_OPEN,\n  FETCH_PRODUCTS_SUCCESS,\n} from '../action-types';\n\nconst productsReducer = (state, action) => {\n  if (state === undefined) {\n    return {\n      products: [],\n      loading: true,\n      error: null,\n    };\n  }\n\n  switch (action.type) {\n    case FETCH_PRODUCTS_SPINNER_OPEN:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    case FETCH_PRODUCTS_SPINNER_CLOSE:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n      };\n    case FETCH_PRODUCTS_SUCCESS:\n      return {\n        ...state,\n        products: action.payload,\n        loading: false,\n        error: null,\n      };\n    case FETCH_PRODUCTS_FAILURE:\n      return {\n        ...state,\n        products: [],\n        loading: false,\n        error: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport {productsReducer};","import {\n  FETCH_PROPERTIES_FAILURE,\n  FETCH_PROPERTIES_SPINNER_CLOSE,\n  FETCH_PROPERTIES_SPINNER_OPEN,\n  FETCH_PROPERTIES_SUCCESS,\n} from '../action-types';\n\nconst propertiesReducer = (state, action) => {\n  if (state === undefined) {\n    return {\n      properties: [],\n      loading: true,\n      error: null,\n    };\n  }\n\n  switch (action.type) {\n    case FETCH_PROPERTIES_SUCCESS:\n      return {\n        properties: action.payload,\n        loading: false,\n        error: null,\n      };\n\n    case FETCH_PROPERTIES_SPINNER_OPEN:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n\n    case FETCH_PROPERTIES_SPINNER_CLOSE:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n      };\n\n    case FETCH_PROPERTIES_FAILURE:\n      return {\n        properties: [],\n        loading: false,\n        error: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport {propertiesReducer};","import {\n  CLEAR_SELECTED_PRODUCT,\n  FETCH_SELECTED_PRODUCT_FAILURE,\n  FETCH_SELECTED_PRODUCT_REQUEST,\n  FETCH_SELECTED_PRODUCT_SUCCESS,\n} from '../action-types';\n\nconst productCardReducer = (state, action) => {\n\n  if (state === undefined) {\n    return {\n      selectedProduct: {},\n      loading: true,\n      error: null,\n    };\n  }\n\n  switch (action.type) {\n    case FETCH_SELECTED_PRODUCT_REQUEST:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n\n    case FETCH_SELECTED_PRODUCT_SUCCESS:\n      return {\n        selectedProduct: action.payload,\n        loading: false,\n        error: null,\n      };\n\n    case FETCH_SELECTED_PRODUCT_FAILURE:\n      return {\n        selectedProduct: {},\n        loading: false,\n        error: action.payload,\n      };\n\n    case CLEAR_SELECTED_PRODUCT:\n      return {\n        selectedProduct: {},\n        loading: true,\n        error: null,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport {productCardReducer};","import {\n  NOTIFICATION_CREATED_PRODUCT,\n  NOTIFICATION_CREATED_PROPERTY,\n  NOTIFICATION_DELETED_PRODUCT,\n  NOTIFICATION_DELETED_PROPERTY,\n  NOTIFICATION_EDITED_PRODUCT,\n  NOTIFICATION_GO_TO_CLOSE,\n  NOTIFICATION_STATUS_RESET,\n} from '../action-types';\n\nconst notificationsReducer = (state, action) => {\n\n  if (state === undefined) {\n    return {\n      showNotification: false,\n      path: null,\n      isEditing: false,\n      deletedItem: null,\n    };\n  }\n\n  switch (action.type) {\n\n    case NOTIFICATION_CREATED_PRODUCT:\n      return {\n        showNotification: true,\n        path: action.payload,\n        isEditing: false,\n        deletedItem: null,\n      };\n\n    case NOTIFICATION_EDITED_PRODUCT:\n      return {\n        showNotification: true,\n        path: action.payload,\n        isEditing: true,\n        deletedItem: null,\n      };\n\n    case NOTIFICATION_DELETED_PRODUCT:\n      return {\n        showNotification: true,\n        path: action.payload,\n        isEditing: false,\n        deletedItem: 'товар',\n      };\n\n    case NOTIFICATION_CREATED_PROPERTY:\n      return {\n        showNotification: true,\n        path: action.payload,\n        isEditing: false,\n        deletedItem: null,\n      };\n\n    case NOTIFICATION_DELETED_PROPERTY:\n      return {\n        showNotification: true,\n        path: action.payload,\n        isEditing: false,\n        deletedItem: 'свойство',\n      };\n\n    case NOTIFICATION_GO_TO_CLOSE:\n      return {\n        ...state,\n        showNotification: false,\n      };\n\n    case NOTIFICATION_STATUS_RESET:\n      return {\n        showNotification: false,\n        path: null,\n        isEditing: false,\n        deletedItem: null,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport {notificationsReducer};","import {\n  USER_IS_LOGGED_IN,\n  USER_IS_LOGGED_OUT,\n  USER_IS_LOGGED_REQUEST,\n} from '../action-types';\n\nconst isAuthReducer = (state, action) => {\n  if (state === undefined) {\n    return {\n      logIn: false,\n      email: null,\n      loading: true,\n    };\n  }\n\n  switch (action.type) {\n    case USER_IS_LOGGED_IN:\n      return {\n        logIn: true,\n        email: action.payload,\n        loading: false,\n      };\n\n    case USER_IS_LOGGED_OUT:\n      return {\n        logIn: false,\n        email: null,\n        loading: false,\n      };\n\n    case USER_IS_LOGGED_REQUEST:\n      return {\n        ...state,\n        loading: true,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport {isAuthReducer};","import React from 'react';\nimport {Link} from \"react-router-dom\";\n\nimport './error-indicator.scss';\n\nconst ErrorIndicator = () => {\n  return (\n    <div className={'error-indicator'}>\n      <div className={'error-indicator-wrap'}>\n        <div className={'error-indicator-big-text'}>Error!</div>\n        <div className={'error-indicator-big-text'}>Страница не найдена</div>\n        <div className={'error-indicator-low-text'}>\n          Страница устарела, была удалена или не существовала вовсе\n        </div>\n        <div className={'back-to-home'}>\n          <Link to={'/'}>Вернуться на главную</Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport {ErrorIndicator};","import React, { Component } from 'react';\n\nimport { ErrorIndicator } from '../../pages/error-indicator';\n\nexport class ErrorBoundary extends Component {\n  state = {\n    hasError: false,\n  };\n\n  componentDidCatch(error, errorInfo) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <ErrorIndicator />;\n    }\n\n    return this.props.children;\n  }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\n\nconst UniversalTablePagination = (props) => {\n  const {\n    array,\n    rowsPerPage,\n    page,\n    handleChangePage,\n    handleChangeRowsPerPage,\n  } = props;\n\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      flexShrink: 0,\n      marginLeft: theme.spacing(2.5),\n    },\n  }));\n\n  function TablePaginationActions(props) {\n    const classes = useStyles();\n    const theme = useTheme();\n    const { count, page, rowsPerPage, onChangePage } = props;\n\n    const handleFirstPageButtonClick = (event) => {\n      onChangePage(event, 0);\n    };\n\n    const handleBackButtonClick = (event) => {\n      onChangePage(event, page - 1);\n    };\n\n    const handleNextButtonClick = (event) => {\n      onChangePage(event, page + 1);\n    };\n\n    const handleLastPageButtonClick = (event) => {\n      onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n    };\n\n    return (\n      <div className={classes.root}>\n        <IconButton\n          onClick={handleFirstPageButtonClick}\n          disabled={page === 0}\n          aria-label=\"first page\"\n        >\n          {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n        </IconButton>\n        <IconButton\n          onClick={handleBackButtonClick}\n          disabled={page === 0}\n          aria-label=\"previous page\"\n        >\n          {theme.direction === 'rtl' ? (\n            <KeyboardArrowRight />\n          ) : (\n            <KeyboardArrowLeft />\n          )}\n        </IconButton>\n        <IconButton\n          onClick={handleNextButtonClick}\n          disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n          aria-label=\"next page\"\n        >\n          {theme.direction === 'rtl' ? (\n            <KeyboardArrowLeft />\n          ) : (\n            <KeyboardArrowRight />\n          )}\n        </IconButton>\n        <IconButton\n          onClick={handleLastPageButtonClick}\n          disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n          aria-label=\"last page\"\n        >\n          {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n        </IconButton>\n      </div>\n    );\n  }\n\n  TablePaginationActions.propTypes = {\n    count: PropTypes.number.isRequired,\n    onChangePage: PropTypes.func.isRequired,\n    page: PropTypes.number.isRequired,\n    rowsPerPage: PropTypes.number.isRequired,\n  };\n\n  return (\n    <TablePagination\n      rowsPerPageOptions={[5, 10, 25, { label: 'Все', value: -1 }]}\n      count={array.length}\n      rowsPerPage={rowsPerPage}\n      page={page}\n      SelectProps={{\n        inputProps: { 'aria-label': 'rows per page' },\n        native: true,\n      }}\n      onChangePage={handleChangePage}\n      onChangeRowsPerPage={handleChangeRowsPerPage}\n      ActionsComponent={TablePaginationActions}\n    />\n  );\n};\n\nexport { UniversalTablePagination };\n","import React from 'react';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport './spinner.scss';\n\nconst Spinner = () => {\n  const useStyles = makeStyles((theme) => ({\n    backdrop: {\n      zIndex: theme.zIndex.drawer + 1,\n      color: '#fff',\n    },\n  }));\n\n  const classes = useStyles();\n\n  return (\n    <Backdrop className={classes.backdrop} open={true}>\n      <CircularProgress color=\"inherit\" />\n    </Backdrop>\n  );\n};\n\nexport { Spinner };\n","import React from 'react';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableFooter,\n  TableRow,\n} from '@material-ui/core';\nimport { Link } from 'react-router-dom';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport { ruRU } from '@material-ui/core/locale';\nimport { UniversalTablePagination } from '../universal-table-pagination';\nimport { ProductListTableHeader } from './index';\nimport { Spinner } from '../spinner';\n\nimport './product-list-table.scss';\n\nconst ProductListTable = ({\n  products,\n  onDeleted,\n  loading,\n  productsError,\n  deletedProduct,\n}) => {\n  // русская локализация\n  const theme = createMuiTheme(\n    {\n      palette: {\n        primary: { main: '#1976d2' },\n      },\n    },\n    ruRU\n  );\n\n  // начинаем делать пагинацию\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n  const emptyRows =\n    rowsPerPage - Math.min(rowsPerPage, products.length - page * rowsPerPage);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n  // закончили с пагинацией\n\n  // начинаем делать сортировку\n\n  function descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n      return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n      return 1;\n    }\n    return 0;\n  }\n\n  function getComparator(order, orderBy) {\n    return order === 'desc'\n      ? (a, b) => descendingComparator(a, b, orderBy)\n      : (a, b) => -descendingComparator(a, b, orderBy);\n  }\n\n  function stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n      const order = comparator(a[0], b[0]);\n      if (order !== 0) return order;\n      return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n  }\n\n  const [order, setOrder] = React.useState('asc');\n  const [orderBy, setOrderBy] = React.useState();\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  // закончили с сортировкой\n\n  const timestampToDate = (timestamp) => {\n    const d = new Date();\n    d.setTime(timestamp);\n    return (\n      ('0' + d.getDate()).slice(-2) +\n      '.' +\n      ('0' + (d.getMonth() + 1)).slice(-2) +\n      '.' +\n      d.getFullYear().toString().substr(-2)\n    );\n  };\n\n  return (\n    <div className={'product-list-table'}>\n      <ThemeProvider theme={theme}>\n        <TableContainer>\n          <Table>\n            <ProductListTableHeader\n              order={order}\n              orderBy={orderBy}\n              onRequestSort={handleRequestSort}\n            />\n            {loading ? (\n              <TableBody>\n                <TableRow>\n                  <th>\n                    <Spinner />\n                  </th>\n                </TableRow>\n              </TableBody>\n            ) : (\n              <TableBody>\n                {/*Если rowsPerPage = -1 (т.е. выбрано в пагинации \"Показать Все\", то мапим без слайса)*/}\n                {(rowsPerPage > 0\n                  ? stableSort(products, getComparator(order, orderBy)).slice(\n                      page * rowsPerPage,\n                      page * rowsPerPage + rowsPerPage\n                    )\n                  : stableSort(products, getComparator(order, orderBy))\n                ).map((product) => {\n                  const { id, itemName, price, dateOfChange } = product;\n                  const formattedPrice = price.toLocaleString('ru-RU');\n                  const formattedDateOfChange = timestampToDate(dateOfChange);\n                  return (\n                    <TableRow key={id}>\n                      <TableCell align={'center'} className={'link table-body'}>\n                        <Link to={`/item-card/${id}`}>\n                          <div className={'table-value'}>{itemName}</div>\n                        </Link>\n                      </TableCell>\n                      <TableCell className={'table-body'}>\n                        <div className={'table-value'}>{formattedPrice} $</div>\n                      </TableCell>\n                      <TableCell className={'table-body'}>\n                        <div className={'table-value'}>\n                          {formattedDateOfChange}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"links\">\n                          <Link to={`/add-item/${id}`} className={'link'}>\n                            Ред.\n                          </Link>\n                          <Link\n                            to={'#'}\n                            onClick={() =>\n                              onDeleted(\n                                id,\n                                'products',\n                                productsError,\n                                deletedProduct\n                              )\n                            }\n                            className={'link'}\n                          >\n                            Удалить\n                          </Link>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n                {emptyRows > 0 && (\n                  <TableRow style={{ height: 47 * emptyRows }}>\n                    <TableCell colSpan={6} />\n                  </TableRow>\n                )}\n              </TableBody>\n            )}\n            <TableFooter>\n              <TableRow>\n                <UniversalTablePagination\n                  array={products}\n                  rowsPerPage={rowsPerPage}\n                  page={page}\n                  handleChangePage={handleChangePage}\n                  handleChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n              </TableRow>\n            </TableFooter>\n          </Table>\n        </TableContainer>\n      </ThemeProvider>\n    </div>\n  );\n};\n\nexport { ProductListTable };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  TableCell,\n  TableHead,\n  TableRow,\n  TableSortLabel,\n} from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport './product-list-table.scss';\n\nconst ProductListTableHeader = (props) => {\n  const { order, orderBy, onRequestSort } = props;\n\n  const headCells = [\n    { id: 'itemName', label: 'Перечень товаров' },\n    { id: 'price', label: 'Стоимость' },\n    { id: 'dateOfChange', label: 'Дата изменения' },\n  ];\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n  ProductListTableHeader.propTypes = {\n    onRequestSort: PropTypes.func.isRequired,\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n    orderBy: PropTypes.string,\n  };\n\n  const useStyles = makeStyles(() => ({\n    visuallyHidden: {\n      border: 0,\n      clip: 'rect(0 0 0 0)',\n      height: 1,\n      margin: -1,\n      overflow: 'hidden',\n      padding: 0,\n      position: 'absolute',\n      top: 20,\n      width: 1,\n    },\n  }));\n\n  const classes = useStyles();\n\n  return (\n    <TableHead>\n      <TableRow>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            sortDirection={orderBy === headCell.id ? order : false}\n            id={`${headCell.id}`}\n            align={headCell.id === 'itemName' ? 'center' : 'left'}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n              IconComponent={ExpandMoreIcon}\n            >\n              <div className={'table-header'}>{headCell.label}</div>\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n        <TableCell key={'administration'} id={'administration'}>\n          <div className={'table-header'}>Управление</div>\n        </TableCell>\n      </TableRow>\n    </TableHead>\n  );\n};\n\nexport { ProductListTableHeader };\n","import React, { Component } from 'react';\nimport SearchIcon from '@material-ui/icons/Search';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nimport './search-panel.scss';\n\nexport class SearchPanel extends Component {\n  onSearchChange = (e) => {\n    this.props.termSetup(e.target.value);\n  };\n\n  onColumnChange = (e) => {\n    this.props.columnChange(e.target.value);\n  };\n\n  render() {\n    return (\n      <div className={'search-panel'}>\n        <TextField\n          className={'input'}\n          size=\"small\"\n          label=\"Поиск\"\n          type=\"search\"\n          variant=\"outlined\"\n          onChange={this.onSearchChange}\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <SearchIcon />\n              </InputAdornment>\n            ),\n          }}\n        />\n        <FormControl className={'select'} variant=\"outlined\" size=\"small\">\n          <InputLabel>Категория</InputLabel>\n          <Select\n            label={'Категория'}\n            defaultValue={'itemName'}\n            onChange={this.onColumnChange}\n          >\n            <MenuItem value={'itemName'}>Перечень товаров</MenuItem>\n            <MenuItem value={'price'}>Стоимость</MenuItem>\n            <MenuItem value={'dateOfChange'}>Дата изменения</MenuItem>\n          </Select>\n        </FormControl>\n      </div>\n    );\n  }\n}","import firebase from 'firebase/app';\nimport 'firebase/storage';\nimport 'firebase/database';\nimport 'firebase/auth';\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyBqzyhjRSQnQiJdwh2_P2W-wS6XMhowBuI',\n  authDomain: 'shop-app-firebase.firebaseapp.com',\n  databaseURL:\n    'https://shop-app-firebase-default-rtdb.europe-west1.firebasedatabase.app',\n  projectId: 'shop-app-firebase',\n  storageBucket: 'shop-app-firebase.appspot.com',\n  messagingSenderId: '159676401640',\n  appId: '1:159676401640:web:ef06138de6d79548f6065d',\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nconst storage = firebase.storage();\n\nconst getItems = async (dispatch, items, itemsLoaded) => {\n  const db = firebase.database(); // нельзя выносить как общую переменную, иначе выдает ошибку\n  const dbDataRef = db.ref().child(`${items}`);\n  await dbDataRef.on('value', (snap) => {\n    const data = snap.val();\n    if (data === null) {\n      dispatch(itemsLoaded([]));\n    } else {\n      dispatch(itemsLoaded(data));\n    }\n  });\n};\n\nconst deleteItem = async (key, path, itemError, deletedItem) => {\n  const db = firebase.database();\n  const ref = db.ref(`${path}`);\n  const dbDataRef = ref.child(key);\n  await dbDataRef.set(null, function (error) {\n    // отправляем null для того чтобы удалть полностью свойство по ключу key\n    if (error) {\n      itemError(error);\n    } else {\n      deletedItem();\n    }\n  });\n};\n\nconst getSelectedProduct = async (dispatch, selectedProductLoaded, itemId) => {\n  const db = firebase.database();\n  const dbDataRef = db.ref().child('products');\n  await dbDataRef.on('value', (snap) => {\n    const data = snap.val();\n    if (data === null) {\n      dispatch(selectedProductLoaded([]));\n    } else {\n      dispatch(selectedProductLoaded(data, itemId));\n    }\n  });\n};\n\nconst getUserAuth = (dispatch, userIsLoggedIn, userIsNotLoggedIn) => {\n  firebase.auth().onAuthStateChanged((firebaseUser) => {\n    if (firebaseUser) {\n      dispatch(userIsLoggedIn(firebaseUser.email));\n    } else {\n      dispatch(userIsNotLoggedIn());\n    }\n  });\n};\n\nconst userLogOut = () => {\n  firebase\n    .auth()\n    .signOut()\n    .then(() => {})\n    .catch(() => {});\n};\n\nconst submitLogIn = (values) => {\n  const { email, password } = values;\n  const auth = firebase.auth();\n  return auth.signInWithEmailAndPassword(email, password);\n};\n\nconst submitRegistration = (values) => {\n  const { email, password } = values;\n  const auth = firebase.auth();\n  return auth.createUserWithEmailAndPassword(email, password);\n};\n\nconst postItemsToDatabase = async (\n  newValues,\n  path,\n  itemError,\n  itemSpinnerClose,\n  notificationItem\n) => {\n  const db = firebase.database();\n  const ref = db.ref(`${path}`);\n  const dbDataRef = ref.push();\n  await dbDataRef.set(newValues, function (error) {\n    if (error) {\n      itemError(error);\n    } else {\n      itemSpinnerClose();\n      notificationItem();\n    }\n  });\n};\n\nconst putItemsToDatabase = async (\n  newValues,\n  itemId,\n  path,\n  itemError,\n  itemSpinnerClose,\n  notificationItem\n) => {\n  const db = firebase.database();\n  const ref = db.ref(`${path}`);\n  const dbDataRef = ref.child(itemId);\n  await dbDataRef.set(newValues, function (error) {\n    if (error) {\n      itemError(error);\n    } else {\n      itemSpinnerClose();\n      notificationItem();\n    }\n  });\n};\n\n// получение таймстампа с сервера Firebase\nconst getDateOfChange = () => {\n  return firebase.database.ServerValue.TIMESTAMP;\n};\n\nexport {\n  storage,\n  getItems,\n  deleteItem,\n  getSelectedProduct,\n  getUserAuth,\n  userLogOut,\n  submitLogIn,\n  submitRegistration,\n  postItemsToDatabase,\n  putItemsToDatabase,\n  getDateOfChange,\n};\n","import {\n  USER_IS_LOGGED_IN,\n  USER_IS_LOGGED_OUT,\n  USER_IS_LOGGED_REQUEST,\n} from '../action-types';\nimport { getUserAuth } from '../../services';\n\nconst userIsAuth = () => (dispatch) => {\n  dispatch(userIsAuthRequest());\n  getUserAuth(dispatch, userIsLoggedIn, userIsNotLoggedIn);\n};\n\nconst userIsLoggedIn = (email) => {\n  return {\n    type: USER_IS_LOGGED_IN,\n    payload: email,\n  };\n};\n\nconst userIsNotLoggedIn = () => {\n  return {\n    type: USER_IS_LOGGED_OUT,\n  };\n};\n\nconst userIsAuthRequest = () => {\n  return {\n    type: USER_IS_LOGGED_REQUEST,\n  };\n};\n\nexport { userIsAuth, userIsLoggedIn, userIsNotLoggedIn };","import {\n  NOTIFICATION_CREATED_PRODUCT,\n  NOTIFICATION_CREATED_PROPERTY,\n  NOTIFICATION_DELETED_PRODUCT,\n  NOTIFICATION_DELETED_PROPERTY,\n  NOTIFICATION_EDITED_PRODUCT,\n  NOTIFICATION_GO_TO_CLOSE,\n  NOTIFICATION_STATUS_RESET,\n} from '../action-types';\n\nconst createdProduct = () => {\n  return {\n    type: NOTIFICATION_CREATED_PRODUCT,\n    payload: '/',\n  };\n};\n\nconst editedProduct = () => {\n  return {\n    type: NOTIFICATION_EDITED_PRODUCT,\n    payload: '/',\n  };\n};\n\nconst deletedProduct = () => {\n  return {\n    type: NOTIFICATION_DELETED_PRODUCT,\n    payload: '/',\n  };\n};\n\nconst createdProperty = () => {\n  return {\n    type: NOTIFICATION_CREATED_PROPERTY,\n    payload: '/property-list',\n  };\n};\n\nconst deletedProperty = () => {\n  return {\n    type: NOTIFICATION_DELETED_PROPERTY,\n    payload: '/property-list',\n  };\n};\n\nconst closeNotifications = () => {\n  return {\n    type: NOTIFICATION_GO_TO_CLOSE,\n  };\n};\n\n// Необходимо для того, что бы при переходе на другую страницу, не перебрасывало обратно после срабатывания нотификации,\n// как это сделано в логике компоненты notifications.js\nconst resetNotifications = () => {\n  return {\n    type: NOTIFICATION_STATUS_RESET,\n  };\n};\n\nexport {\n  createdProduct,\n  editedProduct,\n  deletedProduct,\n  createdProperty,\n  deletedProperty,\n  closeNotifications,\n  resetNotifications,\n};\n","import {\n  CLEAR_SELECTED_PRODUCT,\n  FETCH_SELECTED_PRODUCT_FAILURE,\n  FETCH_SELECTED_PRODUCT_REQUEST,\n  FETCH_SELECTED_PRODUCT_SUCCESS,\n} from '../action-types';\nimport { getSelectedProduct } from '../../services';\n\nconst selectedProductLoaded = (products, itemId) => {\n  const objectsToArray = Object.values(products);\n  const getKeysToArray = Object.keys(products);\n  for (let i = 0; i < getKeysToArray.length; i++) {\n    // добавляю свойство id для того что бы через него\n    objectsToArray[i].id = getKeysToArray[i]; // редактировать или удалять необходимые объекты\n  }\n  const product = objectsToArray.find(({ id }) => id === itemId);\n  if (product === undefined) {\n    return selectedProductError(new Error('Some Error'));\n  }\n\n  return {\n    type: FETCH_SELECTED_PRODUCT_SUCCESS,\n    payload: product,\n  };\n};\n\nconst clearSelectedProduct = () => {\n  // зачищаем выбранный товар, т.к. если этого не делать, то при переключении\n  // на другой товар, до его загрузки отображается предыдущий выбранный.\n  return {\n    type: CLEAR_SELECTED_PRODUCT,\n  };\n};\n\nconst selectedProductRequested = () => {\n  return {\n    type: FETCH_SELECTED_PRODUCT_REQUEST,\n  };\n};\n\nconst selectedProductError = (error) => {\n  return {\n    type: FETCH_SELECTED_PRODUCT_FAILURE,\n    payload: error,\n  };\n};\n\nconst fetchSelectedProduct = (itemId) => (dispatch) => {\n  dispatch(selectedProductRequested());\n  getSelectedProduct(dispatch, selectedProductLoaded, itemId);\n};\n\nexport { fetchSelectedProduct, clearSelectedProduct };\n","import {\n  FETCH_PRODUCTS_FAILURE,\n  FETCH_PRODUCTS_SPINNER_OPEN,\n  FETCH_PRODUCTS_SPINNER_CLOSE,\n  FETCH_PRODUCTS_SUCCESS,\n} from '../action-types';\nimport { getItems } from '../../services';\n\nconst productsLoaded = (newItems) => {\n  const objectsToArray = Object.values(newItems);\n  const getKeysToArray = Object.keys(newItems);\n  for (let i = 0; i < getKeysToArray.length; i++) {\n    // добавляю свойство id для того что бы через него редактировать или удалять необходимые объекты\n    objectsToArray[i].id = getKeysToArray[i];\n  }\n  return {\n    type: FETCH_PRODUCTS_SUCCESS,\n    payload: objectsToArray,\n  };\n};\n\nconst productsSpinnerOpen = () => {\n  return {\n    type: FETCH_PRODUCTS_SPINNER_OPEN,\n  };\n};\n\nconst productsSpinnerClose = () => {\n  return {\n    type: FETCH_PRODUCTS_SPINNER_CLOSE,\n  };\n};\n\nconst productsError = (error) => {\n  return {\n    type: FETCH_PRODUCTS_FAILURE,\n    payload: error,\n  };\n};\n\nconst fetchProducts = () => (dispatch) => {\n  dispatch(productsSpinnerOpen());\n  getItems(dispatch, 'products', productsLoaded);\n};\n\nexport {\n  fetchProducts,\n  productsError,\n  productsSpinnerOpen,\n  productsSpinnerClose,\n  productsLoaded\n};","import {\n  FETCH_PROPERTIES_FAILURE,\n  FETCH_PROPERTIES_SPINNER_CLOSE,\n  FETCH_PROPERTIES_SPINNER_OPEN,\n  FETCH_PROPERTIES_SUCCESS,\n} from '../action-types';\nimport { getItems } from '../../services';\n\nconst propertiesLoaded = (newItems) => {\n  const objectsToArray = Object.values(newItems);\n  const getKeysToArray = Object.keys(newItems);\n  for (let i = 0; i < getKeysToArray.length; i++) {\n    // добавляю свойство id для того что бы через него редактировать или удалять необходимые объекты\n    objectsToArray[i].id = getKeysToArray[i];\n  }\n  return {\n    type: FETCH_PROPERTIES_SUCCESS,\n    payload: objectsToArray,\n  };\n};\n\nconst propertiesSpinnerOpen = () => {\n  return {\n    type: FETCH_PROPERTIES_SPINNER_OPEN,\n  };\n};\n\nconst propertiesSpinnerClose = () => {\n  return {\n    type: FETCH_PROPERTIES_SPINNER_CLOSE,\n  };\n};\n\nconst propertiesError = (error) => {\n  return {\n    type: FETCH_PROPERTIES_FAILURE,\n    payload: error,\n  };\n};\n\nconst fetchProperties = () => (dispatch) => {\n  dispatch(propertiesSpinnerOpen());\n  getItems(dispatch, 'properties', propertiesLoaded);\n};\n\nexport {\n  fetchProperties,\n  propertiesError,\n  propertiesSpinnerOpen,\n  propertiesSpinnerClose,\n  propertiesLoaded,\n};","import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { Spinner } from '../components/spinner';\n\nlet mapStateToPropsForRedirect = (state) => ({\n  logIn: state.isAuth.logIn,\n  loading: state.isAuth.loading,\n});\n\nexport const withAuthRedirect = (Component) => {\n  class RedirectComponent extends React.Component {\n    render() {\n      if (this.props.loading) return <Spinner />;\n\n      if (!this.props.logIn) return <Redirect to={'/login'} />;\n\n      return <Component {...this.props} />;\n    }\n  }\n\n  return connect(mapStateToPropsForRedirect)(RedirectComponent);\n};\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\n\nimport { ProductListTable } from '../product-list-table';\nimport { SearchPanel } from '../search-panel';\nimport {\n  fetchProducts,\n  productsError,\n  deletedProduct,\n  resetNotifications,\n} from '../../store/actions';\nimport { ErrorIndicator } from '../../pages/error-indicator';\nimport { deleteItem } from '../../services';\nimport { withAuthRedirect } from '../../hoc';\n\nimport './product-list.scss';\n\nclass ProductList extends Component {\n  state = {\n    term: '',\n    columnName: 'itemName',\n  };\n\n  componentDidMount() {\n    this.props.resetNotifications();\n    this.props.fetchProducts();\n  }\n\n  columnChange = (columnName) => {\n    this.setState({\n      columnName,\n    });\n  };\n\n  termSetup = (term) => {\n    this.setState({\n      term,\n    });\n  };\n\n  searchItems = (arr, term) => {\n    if (term.length === 0) {\n      return arr;\n    }\n\n    return arr.filter(\n      (el) =>\n        el[this.state.columnName]\n          .toString()\n          .toLowerCase()\n          .indexOf(term.toLowerCase()) > -1\n    );\n  };\n\n  render() {\n    const {\n      products,\n      loading,\n      error,\n      productsError,\n      deletedProduct,\n    } = this.props;\n\n    const { term } = this.state;\n\n    const visibleItems = this.searchItems(products, term);\n\n    return (\n      <div className={'product-list-wrap'}>\n        <div className={'product-list'}>\n          <div className={'button-wrap'}>\n            <Link to={'/add-item'} className={'add-item-link'}>\n              <Button className={'add-button'} variant={'warning'}>\n                Добавить товар\n              </Button>\n            </Link>\n          </div>\n          {error ? (\n            <ErrorIndicator />\n          ) : (\n            <div>\n              <SearchPanel\n                termSetup={this.termSetup}\n                columnChange={this.columnChange}\n              />\n              <ProductListTable\n                products={visibleItems}\n                onDeleted={deleteItem}\n                loading={loading}\n                productsError={productsError}\n                deletedProduct={deletedProduct}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    products: state.products.products,\n    loading: state.products.loading,\n    error: state.products.error,\n  };\n};\n\nconst mapDispatchToProps = {\n  fetchProducts,\n  productsError,\n  deletedProduct,\n  resetNotifications,\n};\n\nexport default compose(\n  withAuthRedirect,\n  connect(mapStateToProps, mapDispatchToProps)\n)(ProductList);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport { ruRU } from '@material-ui/core/locale';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableFooter,\n  TableRow,\n} from '@material-ui/core';\n\nimport { UniversalTablePagination } from '../universal-table-pagination';\nimport { PropertyListTableHeader } from './index';\n\nimport './property-list-table.scss';\n\nconst PropertyListTable = ({\n  properties,\n  onDeleted,\n  propertiesError,\n  deletedProperty,\n}) => {\n  // русская локализация\n  const theme = createMuiTheme(\n    {\n      palette: {\n        primary: { main: '#1976d2' },\n      },\n    },\n    ruRU\n  );\n\n  // начинаем делать пагинацию\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n  const emptyRows =\n    rowsPerPage - Math.min(rowsPerPage, properties.length - page * rowsPerPage);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n  // закончили с пагинацией\n\n  // начинаем делать сортировку\n\n  function descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n      return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n      return 1;\n    }\n    return 0;\n  }\n\n  function getComparator(order, orderBy) {\n    return order === 'desc'\n      ? (a, b) => descendingComparator(a, b, orderBy)\n      : (a, b) => -descendingComparator(a, b, orderBy);\n  }\n\n  function stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n      const order = comparator(a[0], b[0]);\n      if (order !== 0) return order;\n      return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n  }\n\n  const [order, setOrder] = React.useState('asc');\n  const [orderBy, setOrderBy] = React.useState();\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  // закончили с сортировкой\n\n  return (\n    <div className={'property-list-table'}>\n      <ThemeProvider theme={theme}>\n        <TableContainer>\n          <Table>\n            <PropertyListTableHeader\n              order={order}\n              orderBy={orderBy}\n              onRequestSort={handleRequestSort}\n            />\n            <TableBody>\n              {/*Если rowsPerPage = -1 (т.е. выбрано в пагинации \"Показать Все\", то мапим без слайса)*/}\n              {(rowsPerPage > 0\n                ? stableSort(properties, getComparator(order, orderBy)).slice(\n                    page * rowsPerPage,\n                    page * rowsPerPage + rowsPerPage\n                  )\n                : stableSort(properties, getComparator(order, orderBy))\n              ).map((property) => {\n                const { id, propertyName, propertyType } = property;\n                return (\n                  <TableRow key={id}>\n                    <TableCell>\n                      <div className={'property-name table-body'}>\n                        {propertyName}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className={'property-type table-body'}>\n                        {propertyType}\n                      </div>\n                    </TableCell>\n                    <TableCell align={'right'}>\n                      <Link\n                        to={'#'}\n                        onClick={() =>\n                          onDeleted(\n                            id,\n                            'properties',\n                            propertiesError,\n                            deletedProperty\n                          )\n                        }\n                        className={'link'}\n                      >\n                        Удалить\n                      </Link>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n              {emptyRows > 0 && (\n                <TableRow style={{ height: 47 * emptyRows }}>\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n            <TableFooter>\n              <TableRow>\n                <UniversalTablePagination\n                  array={properties}\n                  rowsPerPage={rowsPerPage}\n                  page={page}\n                  handleChangePage={handleChangePage}\n                  handleChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n              </TableRow>\n            </TableFooter>\n          </Table>\n        </TableContainer>\n      </ThemeProvider>\n    </div>\n  );\n};\n\nexport { PropertyListTable };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  TableCell,\n  TableHead,\n  TableRow,\n  TableSortLabel,\n} from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport './property-list-table.scss';\n\nconst PropertyListTableHeader = (props) => {\n  const { order, orderBy, onRequestSort } = props;\n\n  const headCells = [\n    { id: 'propertyName', label: 'Перечень проперти' },\n    { id: 'propertyType', label: 'Тип' },\n  ];\n\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n\n  PropertyListTableHeader.propTypes = {\n    onRequestSort: PropTypes.func.isRequired,\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n    orderBy: PropTypes.string,\n  };\n\n  const useStyles = makeStyles(() => ({\n    visuallyHidden: {\n      border: 0,\n      clip: 'rect(0 0 0 0)',\n      height: 1,\n      margin: -1,\n      overflow: 'hidden',\n      padding: 0,\n      position: 'absolute',\n      top: 20,\n      width: 1,\n    },\n  }));\n\n  const classes = useStyles();\n\n  return (\n    <TableHead>\n      <TableRow>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            sortDirection={orderBy === headCell.id ? order : false}\n            id={`${headCell.id}`}\n            align={headCell.id === 'propertyName' ? 'center' : 'left'}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n              IconComponent={ExpandMoreIcon}\n            >\n              <div className={'table-header'}>{headCell.label}</div>\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n        <TableCell key={'administration'} id={'administration'}>\n          <div className={'table-header'}>Управление</div>\n        </TableCell>\n      </TableRow>\n    </TableHead>\n  );\n};\n\nexport { PropertyListTableHeader };\n","import React, { useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\n\nimport { PropertyListTable } from '../property-list-table';\nimport { Spinner } from '../spinner';\nimport { ErrorIndicator } from '../../pages/error-indicator';\nimport {\n  fetchProperties,\n  propertiesError,\n  deletedProperty,\n  resetNotifications,\n} from '../../store/actions';\nimport { deleteItem } from '../../services';\nimport { withAuthRedirect } from '../../hoc';\n\nimport './property-list.scss';\n\nconst PropertyList = ({\n  fetchProperties,\n  propertiesError,\n  deletedProperty,\n  properties,\n  loading,\n  error,\n  resetNotifications,\n}) => {\n\n  useEffect(() => {\n    fetchProperties();\n    resetNotifications();\n  }, [fetchProperties, resetNotifications]);\n\n  if (loading) {\n    return <Spinner />;\n  }\n\n  if (error) {\n    return <ErrorIndicator />;\n  }\n\n  return (\n    <div className={'property-list-wrap'}>\n      <div className={'property-list'}>\n        <div className={'button-wrap'}>\n          <Link to={'/add-property'} className={'add-property-link'}>\n            <Button className={'add-prop-button'} variant={'warning'}>\n              Добавить проперти\n            </Button>\n          </Link>\n        </div>\n        <PropertyListTable\n          properties={properties}\n          onDeleted={deleteItem}\n          propertiesError={propertiesError}\n          deletedProperty={deletedProperty}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    properties: state.properties.properties,\n    loading: state.properties.loading,\n    error: state.properties.error,\n  };\n};\n\nconst mapDispatchToProps = {\n  fetchProperties,\n  propertiesError,\n  deletedProperty,\n  resetNotifications,\n};\n\nexport default compose(\n  withAuthRedirect,\n  connect(mapStateToProps, mapDispatchToProps)\n)(PropertyList);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Route, Switch } from 'react-router-dom';\nimport { Button } from 'react-bootstrap';\n\nimport { ProductList } from '../../components/product-list';\nimport { PropertyList } from '../../components/property-list';\nimport { userLogOut } from '../../services';\n\nimport './main.scss';\n\nconst Main = ({ email, history }) => {\n  const { pathname } = history.location;\n\n  return (\n    <div className={'main-wrap'}>\n      <div className={'header'}>\n        <div className={'button-group'}>\n          <div className={`wrap ${pathname === '/' ? 'colored' : null}`}>\n            <div className={'background'} />\n            <Link to={'/'} className={'header-links'}>\n              Листинг товаров\n            </Link>\n          </div>\n          <div\n            className={`wrap ${\n              pathname === '/property-list' ? 'colored' : null\n            }`}\n          >\n            <div className={'background'} />\n            <Link to={'/property-list'} className={'header-links'}>\n              Листинг проперти\n            </Link>\n          </div>\n        </div>\n        <div className={'button-group'}>\n          <div className={'user-name'}>Пользователь (E-mail): {email}</div>\n          <div className={'button-log-out-wrap'}>\n            <Button\n              className={'button-log-out'}\n              variant={'warning'}\n              onClick={userLogOut}\n            >\n              Выйти\n            </Button>\n          </div>\n        </div>\n      </div>\n      <div className={'content'}>\n        <Switch>\n          <Route path=\"/\" component={ProductList} exact />\n          <Route path=\"/property-list\" component={PropertyList} exact />\n        </Switch>\n      </div>\n    </div>\n  );\n};\n\nexport { Main };\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\n\nimport { Main } from './index';\nimport { withAuthRedirect } from '../../hoc';\n\nconst MainContainer = ({ email, history }) => {\n  return <Main email={email} history={history} />;\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    email: state.isAuth.email,\n  };\n};\n\nexport default compose(\n  withAuthRedirect,\n  connect(mapStateToProps, null)\n)(MainContainer);\n","import React from 'react';\n\nimport './error-message-text.scss';\n\nconst ErrorMessageText = ({ message }) => {\n  if (message === undefined) {\n    return null;\n  }\n\n  switch (message) {\n    case 'There is no user record corresponding to this identifier. The user may have been deleted.':\n      return (\n        <div className={'text-error'}>Данного пользователя не существует</div>\n      );\n\n    case 'The password is invalid or the user does not have a password.':\n      return <div className={'text-error'}>Неверный пароль</div>;\n    case 'The email address is already in use by another account.':\n      return (\n        <div className={'text-error'}>\n          Пользователь с данным e-mail уже зарегестрирован\n        </div>\n      );\n    default:\n      return <div className={'text-error'}>{message}</div>;\n  }\n};\n\nexport { ErrorMessageText };","import { makeStyles } from '@material-ui/core/styles';\n\nconst useAddItemInputStyles = makeStyles({\n  root: {\n    maxWidth: '255px',\n    padding: '8px 8px 7px 8px',\n  },\n  input: {\n    padding: '0',\n    height: '100%',\n  },\n});\n\nexport { useAddItemInputStyles };\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst useAddItemLabelStyles = makeStyles({\n  root: {\n    fontFamily: 'Roboto, serif !important',\n    fontStyle: 'normal !important',\n    fontWeight: 'normal !important',\n    fontSize: '14px !important',\n    lineHeight: '16px !important',\n    color: '#000000 !important',\n    opacity: 0.8,\n    letterSpacing: '0 !important',\n  },\n});\n\n// !important пришлось добавить потому-что иначе стили не перебивались\n\nexport { useAddItemLabelStyles };\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst useAddItemSelectStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: 0,\n    width: 255,\n  },\n  root: {\n    fontFamily: 'Roboto, serif',\n    fontStyle: 'normal',\n    fontWeight: 'normal',\n    fontSize: 14,\n    lineHeight: '16px',\n    color: '#000000',\n    paddingTop: 8.5,\n    paddingBottom: 6.5,\n    opacity: 0.8,\n  },\n  icon: {\n    color: '#0258FF',\n  },\n}));\n\nexport { useAddItemSelectStyles };\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst useAddItemTextareaStyles = makeStyles({\n  root: {\n    maxWidth: '540px',\n    padding: '8px 8px 7px 8px',\n  },\n});\n\nexport { useAddItemTextareaStyles };\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst useAddPropInputStyles = makeStyles({\n  root: {\n    width: '255px',\n    padding: '8px 8px 7px 8px',\n    marginRight: '22px',\n    '@media (max-width:576px)': {\n      marginRight: 0,\n    },\n  },\n  input: {\n    padding: '0',\n/*    height: '1em',*/\n  },\n});\n\nexport { useAddPropInputStyles };\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst usePropertyLabelStyles = makeStyles({\n  root: {\n    maxWidth: '120px',\n    marginLeft: 0,\n  },\n  label: {\n    fontFamily: 'Roboto, serif',\n    fontStyle: 'normal',\n    fontWeight: 'normal',\n    fontSize: 14,\n    lineHeight: '16px',\n    color: '#000000',\n    opacity: 0.8,\n  },\n});\n\nexport { usePropertyLabelStyles };\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst useAddPropertyButtonStyles = makeStyles({\n  root: {\n    color: '#0258FF',\n    padding: '8px',\n  },\n});\n\nexport { useAddPropertyButtonStyles };\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst useLoginButtonStyles = makeStyles({\n  root: {\n    background: '#ffb800',\n    '&:hover': {\n      background: '#d7a002',\n    },\n    borderRadius: 4,\n    border: 0,\n    color: '#FFFFFF',\n    height: 32,\n    width: 160,\n  },\n  label: {\n    textTransform: 'none',\n  },\n});\n\nexport { useLoginButtonStyles };\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst useRegistrationButtonStyles = makeStyles({\n  root: {\n    background: '#ffb800',\n    '&:hover': {\n      background: '#d7a002',\n    },\n    borderRadius: 4,\n    border: 0,\n    color: '#FFFFFF',\n    height: 32,\n    width: 200,\n  },\n  label: {\n    textTransform: 'none',\n  },\n});\n\nexport { useRegistrationButtonStyles };\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst useSaveButtonStyles = makeStyles({\n  root: {\n    background: '#34C15C',\n    '&:hover': {\n      background: '#229641',\n    },\n    borderRadius: 4,\n    border: 0,\n    color: '#FFFFFF',\n    height: 32,\n    width: 160,\n    boxShadow: '5px 10px 10px rgba(0, 0, 0, 0.05)',\n  },\n  label: {\n    textTransform: 'none',\n  },\n});\n\nexport { useSaveButtonStyles };\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst useUploadButtonStyles = makeStyles({\n  root: {\n    background: 'none',\n    '&:hover': {\n      background: 'none',\n      boxShadow: 'none',\n    },\n    borderRadius: 4,\n    color: '#828282',\n    minHeight: 32,\n    width: 255,\n    boxShadow: 'none',\n    border: '1px solid #E0E0E0',\n    padding: '4px 8px',\n  },\n  label: {\n    textTransform: 'none',\n    justifyContent: 'space-between',\n  },\n});\n\nexport { useUploadButtonStyles };\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst useProductCardItemSelectStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: 0,\n    width: 255,\n  },\n  root: {\n    fontFamily: 'Roboto, serif',\n    fontStyle: 'normal',\n    fontWeight: 'normal',\n    fontSize: 14,\n    lineHeight: '16px',\n    color: '#000000',\n    paddingTop: 8.5,\n    paddingBottom: 6.5,\n  },\n  icon: {\n    color: '#0258FF',\n  },\n}));\n\nexport { useProductCardItemSelectStyles };\n","import { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  typography: {\n    button: {\n      fontFamily: 'Roboto, serif',\n      fontStyle: 'normal',\n      fontWeight: 'normal',\n      fontSize: 16,\n      lineHeight: '19px',\n    },\n  },\n});\n\nexport { theme };\n","import { createMuiTheme } from '@material-ui/core/styles';\n\nconst themeUploadBtn = createMuiTheme({\n  typography: {\n    button: {\n      fontFamily: 'Roboto, serif',\n      fontStyle: 'normal',\n      fontWeight: 'normal',\n      fontSize: 14,\n      lineHeight: '16px',\n      letterSpacing: 'none',\n    },\n  },\n});\n\nexport { themeUploadBtn };\n","import React, { useState } from 'react';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport { Link, withRouter } from 'react-router-dom';\nimport { FormControl, FormHelperText, FormLabel } from '@material-ui/core';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\n\nimport { ErrorMessageText } from '../../components/error-message-text';\nimport { submitLogIn } from '../../services';\n\nimport {\n  theme,\n  useLoginButtonStyles,\n} from '../../styles/customizing-material-ui-components';\n\nimport './login.scss';\n\nconst Login = ({ history }) => {\n  const classes = useLoginButtonStyles();\n\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  const validationSchema = yup.object().shape({\n    email: yup\n      .string()\n      .typeError('Должно быть строкой')\n      .min(4, 'Логин должен быть не менее 4 символов')\n      .max(20, 'Логин должен быть не болле 20 символов')\n      .required('Обязательное поле'),\n    password: yup\n      .string()\n      .typeError('Должно быть строкой')\n      .min(8, 'Пароль должен быть не менее 8 символов')\n      .required('Обязательное поле'),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n      showPassword: false,\n    },\n    validationSchema: validationSchema,\n    onSubmit: (values) => {\n      submitLogIn(values)\n        .then(() => {\n          setErrorMessage(null);\n          history.push('/');\n        })\n        .catch((e) => {\n          console.log(e.message);\n          setErrorMessage(e.message);\n        });\n    },\n    validateOnBlur: true,\n  });\n\n  const {\n    values,\n    errors,\n    touched,\n    handleChange,\n    handleBlur,\n    isValid,\n    handleSubmit,\n    dirty,\n    setFieldValue,\n  } = formik;\n\n  return (\n    <div className={'login'}>\n      <form onSubmit={handleSubmit} className={'form-wrap'}>\n        <h4>Вход</h4>\n        {errorMessage ? <ErrorMessageText message={errorMessage} /> : null}\n        <div className={'login-wrap'}>\n          <FormControl fullWidth error={Boolean(touched.email && errors.email)}>\n            <FormLabel>Логин</FormLabel>\n            <OutlinedInput\n              type=\"text\"\n              variant=\"outlined\"\n              notched={false}\n              placeholder=\"Введите логин\"\n              name={'email'}\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.email}\n            />\n            {touched.email && errors.email && (\n              <FormHelperText>{errors.email}</FormHelperText>\n            )}\n          </FormControl>\n          <FormControl fullWidth error={Boolean(touched.password && errors.password)}>\n            <FormLabel>Пароль</FormLabel>\n            <OutlinedInput\n              notched={false}\n              placeholder=\"Введите пароль\"\n              type={values.showPassword ? 'text' : 'password'}\n              name={'password'}\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.password}\n              endAdornment={\n                <InputAdornment position=\"end\">\n                  <IconButton\n                    name={'showPassword'}\n                    onClick={() =>\n                      setFieldValue('showPassword', !values.showPassword)\n                    }\n                    edge=\"end\"\n                  >\n                    {values.showPassword ? <Visibility /> : <VisibilityOff />}\n                  </IconButton>\n                </InputAdornment>\n              }\n            />\n            {touched.password && errors.password && (\n              <FormHelperText>{errors.password}</FormHelperText>\n            )}\n          </FormControl>\n        </div>\n        <div className={'login-button'}>\n          <ThemeProvider theme={theme}>\n            <Button\n              classes={{\n                root: classes.root,\n                label: classes.label,\n              }}\n              type={'submit'}\n              disabled={!isValid || !dirty}\n              onClick={handleSubmit}\n            >\n              Войти\n            </Button>\n          </ThemeProvider>\n        </div>\n        <div className={'link'}>\n          <Link to={'/registration'}>Зарегестрироваться</Link>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default withRouter(Login);\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport Login from './login';\nimport { userIsAuth } from '../../store/actions';\nimport { Spinner } from '../../components/spinner';\n\nconst LoginContainer = ({ logIn, userIsAuth, loading }) => {\n  useEffect(() => {\n    userIsAuth();\n  }, [userIsAuth]);\n\n  if (loading) {\n    return <Spinner />;\n  }\n\n  if (logIn) {\n    return <Redirect to={'/'} />;\n  }\n\n  return <Login />;\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    logIn: state.isAuth.logIn,\n    loading: state.isAuth.loading,\n  };\n};\n\nconst mapDispatchToProps = {\n  userIsAuth,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginContainer);\n","import React, { useState } from 'react';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport { FormControl, FormHelperText, FormLabel } from '@material-ui/core';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport { Link, withRouter } from 'react-router-dom';\n\nimport { ErrorMessageText } from '../../components/error-message-text';\nimport { submitRegistration } from '../../services';\n\nimport {\n  theme,\n  useRegistrationButtonStyles,\n} from '../../styles/customizing-material-ui-components';\n\nimport './registration.scss';\n\nconst Registration = ({ history }) => {\n  const classes = useRegistrationButtonStyles();\n\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  const validationSchema = yup.object().shape({\n    name: yup\n      .string()\n      .min(4, 'Имя должно быть не менее 4 символов')\n      .max(20, 'Имя должно быть не более 20 символов')\n      .typeError('Должно быть строкой')\n      .required('Обязательное поле'),\n    secondName: yup\n      .string()\n      .typeError('Должно быть строкой')\n      .required('Обязательное поле'),\n    password: yup\n      .string()\n      .min(8, 'Пароль должен быть не менее 8 символов')\n      .typeError('Должно быть строкой')\n      .required('Обязательное поле'),\n    confirmPassword: yup\n      .string()\n      .oneOf([yup.ref('password')], 'Пароли не совпадают')\n      .required('Обязательное поле'),\n    email: yup\n      .string()\n      .email('Введите верный email')\n      .required('Обязательное поле'),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      secondName: '',\n      password: '',\n      confirmPassword: '',\n      email: '',\n      showPassword: false,\n      showConfirmPassword: false,\n    },\n    validationSchema: validationSchema,\n    onSubmit: (values) => {\n      submitRegistration(values)\n        .then(() => {\n          setErrorMessage(null);\n          history.push('/');\n        })\n        .catch((e) => {\n          console.log(e.message);\n          setErrorMessage(e.message);\n        });\n    },\n    validateOnBlur: true,\n  });\n  const {\n    values,\n    errors,\n    touched,\n    handleChange,\n    handleBlur,\n    isValid,\n    handleSubmit,\n    dirty,\n    setFieldValue,\n  } = formik;\n  return (\n    <div className={'registration'}>\n      <form onSubmit={handleSubmit} className={'form-wrap'}>\n        <h4>Регистрация</h4>\n        {errorMessage ? <ErrorMessageText message={errorMessage} /> : null}\n        <div className={'registration-wrap'}>\n          <FormControl fullWidth error={Boolean(touched.name && errors.name)}>\n            <FormLabel>Имя</FormLabel>\n            <OutlinedInput\n              type=\"text\"\n              variant=\"outlined\"\n              notched={false}\n              placeholder=\"Введите имя\"\n              name={'name'}\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.name}\n            />\n            {touched.name && errors.name && (\n              <FormHelperText>{errors.name}</FormHelperText>\n            )}\n          </FormControl>\n          <FormControl\n            fullWidth\n            error={Boolean(touched.secondName && errors.secondName)}\n          >\n            <FormLabel>Фамилия</FormLabel>\n            <OutlinedInput\n              type=\"text\"\n              variant=\"outlined\"\n              notched={false}\n              placeholder=\"Введите фамилию\"\n              name={'secondName'}\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.secondName}\n            />\n            {touched.secondName && errors.secondName && (\n              <FormHelperText>{errors.secondName}</FormHelperText>\n            )}\n          </FormControl>\n          <FormControl fullWidth error={Boolean(touched.email && errors.email)}>\n            <FormLabel>E-mail</FormLabel>\n            <OutlinedInput\n              type=\"email\"\n              variant=\"outlined\"\n              notched={false}\n              placeholder=\"Введите ваш e-mail\"\n              name={'email'}\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.email}\n            />\n            {touched.email && errors.email && (\n              <FormHelperText>{errors.email}</FormHelperText>\n            )}\n          </FormControl>\n          <FormControl fullWidth error={Boolean(touched.password && errors.password)}>\n            <FormLabel>Пароль</FormLabel>\n            <OutlinedInput\n              notched={false}\n              placeholder=\"Введите пароль\"\n              type={values.showPassword ? 'text' : 'password'}\n              name={'password'}\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.password}\n              endAdornment={\n                <InputAdornment position=\"end\">\n                  <IconButton\n                    name={'showPassword'}\n                    onClick={() =>\n                      setFieldValue('showPassword', !values.showPassword)\n                    } // меняю значение в showPassword на обратное, что бы показать или скрыть пароль\n                    edge=\"end\"\n                  >\n                    {values.showPassword ? <Visibility /> : <VisibilityOff />}\n                  </IconButton>\n                </InputAdornment>\n              }\n            />\n            {touched.password && errors.password && (\n              <FormHelperText>{errors.password}</FormHelperText>\n            )}\n          </FormControl>\n          <FormControl\n            fullWidth\n            error={Boolean(touched.confirmPassword && errors.confirmPassword)}\n          >\n            <FormLabel>Повторите пароль</FormLabel>\n            <OutlinedInput\n              notched={false}\n              placeholder=\"Повторите пароль\"\n              type={values.showConfirmPassword ? 'text' : 'password'}\n              name={'confirmPassword'}\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.confirmPassword}\n              endAdornment={\n                <InputAdornment position=\"end\">\n                  <IconButton\n                    name={'showConfirmPassword'}\n                    onClick={() =>\n                      setFieldValue(\n                        'showConfirmPassword',\n                        !values.showConfirmPassword\n                      )\n                    }\n                    edge=\"end\"\n                  >\n                    {values.showConfirmPassword ? (\n                      <Visibility />\n                    ) : (\n                      <VisibilityOff />\n                    )}\n                  </IconButton>\n                </InputAdornment>\n              }\n            />\n            {touched.confirmPassword && errors.confirmPassword && (\n              <FormHelperText>{errors.confirmPassword}</FormHelperText>\n            )}\n          </FormControl>\n        </div>\n        <div className={'registration-button'}>\n          <ThemeProvider theme={theme}>\n            <Button\n              classes={{\n                root: classes.root,\n                label: classes.label,\n              }}\n              type={'submit'}\n              disabled={!isValid || !dirty}\n              onClick={handleSubmit}\n            >\n              Зарегестрироваться\n            </Button>\n          </ThemeProvider>\n        </div>\n        <div className={'link'}>\n          <Link to={'/login'}>Вернуться</Link>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default withRouter(Registration);\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport { userIsAuth } from '../../store/actions';\nimport Registration from './registration';\n\nconst RegistrationContainer = ({ logIn, userIsAuth }) => {\n  useEffect(() => {\n    userIsAuth();\n  }, [userIsAuth]);\n\n  if (logIn) {\n    return <Redirect to={'/'} />;\n  }\n\n  return <Registration />;\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    logIn: state.isAuth.logIn,\n  };\n};\n\nconst mapDispatchToProps = {\n  userIsAuth,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(RegistrationContainer);","export default __webpack_public_path__ + \"static/media/Ellipse.f958a917.svg\";","import React from 'react';\nimport { Radio } from '@material-ui/core';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport image from '../../svg/Ellipse.svg';\n\nconst StyledRadio = (props) => {\n  const useStyles = makeStyles({\n    root: {\n      padding: '0 8px 0 0',\n      '&:hover': {\n        backgroundColor: 'transparent',\n      },\n    },\n    icon: {\n      borderRadius: '50%',\n      width: 24,\n      height: 24,\n      boxShadow:\n        'inset 0 0 0 1px rgba(16,22,26,.2), inset 0 -1px 0 rgba(16,22,26,.1)',\n      backgroundColor: '#FFFFFF',\n      backgroundImage:\n        'linear-gradient(180deg,hsla(0,0%,100%,.8),hsla(0,0%,100%,0))',\n      '$root.Mui-focusVisible &': {\n        outline: '2px auto rgba(19,124,189,.6)',\n        outlineOffset: 2,\n      },\n      'input:hover ~ &': {\n        backgroundColor: '#FFFFFF',\n      },\n    },\n    checkedIcon: {\n      backgroundImage: `url(${image})`,\n      backgroundRepeat: 'no-repeat',\n      margin: '0px auto',\n      backgroundPosition: 'center center',\n    },\n  });\n\n  const classes = useStyles();\n\n  return (\n    <Radio\n      className={classes.root}\n      disableRipple\n      size={'small'}\n      color=\"default\"\n      checkedIcon={<span className={clsx(classes.icon, classes.checkedIcon)} />}\n      icon={<span className={classes.icon} />}\n      {...props}\n    />\n  );\n};\n\nexport { StyledRadio };\n","import React from 'react';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport { Link } from 'react-router-dom';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport Button from '@material-ui/core/Button';\nimport {\n  FormControl,\n  FormControlLabel,\n  FormHelperText,\n  FormLabel,\n  RadioGroup,\n} from '@material-ui/core';\n\nimport { StyledRadio } from '../../components/styled-radio-icon';\nimport { postItemsToDatabase } from '../../services';\n\nimport {\n  theme,\n  useAddItemLabelStyles,\n  useAddItemInputStyles,\n  useSaveButtonStyles,\n  usePropertyLabelStyles,\n} from '../../styles/customizing-material-ui-components';\n\nimport './add-property.scss';\n\nconst AddProperty = ({\n  properties,\n  propertiesError,\n  createdProperty,\n  propertiesSpinnerOpen,\n  propertiesSpinnerClose,\n}) => {\n  const classesLabel = useAddItemLabelStyles();\n\n  const classesInput = useAddItemInputStyles();\n\n  const classesSaveBtn = useSaveButtonStyles();\n\n  const classesRadioButtons = usePropertyLabelStyles();\n\n  const validateNames = (arr, value) => {\n    const result = arr.find(\n      (el) => el?.propertyName.toLowerCase() === value?.toLowerCase()\n    );\n    return !result;\n  };\n\n  const validationSchema = yup.object().shape({\n    propertyName: yup\n      .string()\n      .typeError('Должно быть строкой')\n      .test('sameName', 'Свойство с таким именем уже существует', (value) => {\n        if (!value) return true; // если поле пустое, перейдет к следующей проверке required\n        return validateNames(properties, value); // возвращает false, если свойство с таким именем уже существует\n      })\n      .required('Обязательное поле'),\n    propertyType: yup\n      .string()\n      .typeError('Должно быть строкой')\n      .required('Обязательное поле'),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      propertyName: '',\n      propertyType: 'Dropdown',\n    },\n    validationSchema: validationSchema,\n    onSubmit: async (values) => {\n      propertiesSpinnerOpen();\n      const { propertyName } = values;\n      const trimmedPropertyName = propertyName.trim();\n      const newValues = {\n        ...values,\n        propertyName: trimmedPropertyName,\n      };\n\n      await postItemsToDatabase(\n        newValues,\n        'properties',\n        propertiesError,\n        propertiesSpinnerClose,\n        createdProperty\n      );\n    },\n    validateOnBlur: true,\n  });\n\n  const {\n    values,\n    errors,\n    touched,\n    handleChange,\n    handleBlur,\n    isValid,\n    handleSubmit,\n    dirty,\n  } = formik;\n\n  const getError = (touched, error) => {\n    return touched && error && <FormHelperText>{error}</FormHelperText>;\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div className={'add-property'}>\n        <div className={'add-property-bordered-wrap'}>\n          <form onSubmit={handleSubmit} className={'add-property-wrap'}>\n            <div className={'buttons-wrap'}>\n              <Link to={'/property-list'} className={'button-back'}>\n                Вернуться\n              </Link>\n              <Button\n                disableRipple={true}\n                className={'button-save'}\n                classes={{\n                  root: classesSaveBtn.root,\n                  label: classesSaveBtn.label,\n                }}\n                type={'submit'}\n                disabled={!isValid || !dirty}\n                onClick={handleSubmit}\n              >\n                Сохранить\n              </Button>\n            </div>\n            <div className={'add-prop-head'}>\n              <h5>Добавление свойства</h5>\n            </div>\n            <div className={'add-prop-body'}>\n              <FormControl error={Boolean(touched.propertyName && errors.propertyName)}>\n                <FormLabel\n                  classes={{ root: classesLabel.root }}\n                  className={'labels'}\n                >\n                  Название свойства<span className={'red-star'}>*</span>\n                </FormLabel>\n                <OutlinedInput\n                  type=\"text\"\n                  variant=\"outlined\"\n                  notched={false}\n                  placeholder=\"Название свойства\"\n                  multiline\n                  classes={{\n                    root: classesInput.root,\n                  }}\n                  name={'propertyName'}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.propertyName}\n                />\n                {getError(touched.propertyName, errors.propertyName)}\n              </FormControl>\n\n              <FormControl error={touched.propertyType && errors.propertyType}>\n                <FormLabel\n                  classes={{ root: classesLabel.root }}\n                  focused={false}\n                  className={'labels'}\n                >\n                  Укажите тип свойства<span className={'red-star'}>*</span>\n                </FormLabel>\n                <RadioGroup\n                  name=\"propertyType\"\n                  value={values.propertyType}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                >\n                  <FormControlLabel\n                    value=\"Dropdown\"\n                    control={<StyledRadio />}\n                    classes={{\n                      root: classesRadioButtons.root,\n                      label: classesRadioButtons.label,\n                    }}\n                    label=\"Dropdown\"\n                  />\n                  <FormControlLabel\n                    value=\"Number\"\n                    classes={{\n                      root: classesRadioButtons.root,\n                      label: classesRadioButtons.label,\n                    }}\n                    control={<StyledRadio />}\n                    label=\"Number\"\n                  />\n                  <FormControlLabel\n                    value=\"String\"\n                    classes={{\n                      root: classesRadioButtons.root,\n                      label: classesRadioButtons.label,\n                    }}\n                    control={<StyledRadio />}\n                    label=\"String\"\n                  />\n                </RadioGroup>\n                {getError(touched.propertyType, errors.propertyType)}\n              </FormControl>\n            </div>\n          </form>\n        </div>\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default AddProperty;\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\n\nimport { AddProperty } from './index';\nimport { Spinner } from '../../components/spinner';\nimport { ErrorIndicator } from '../error-indicator';\nimport {\n  fetchProperties,\n  propertiesError,\n  propertiesSpinnerClose,\n  propertiesSpinnerOpen,\n  createdProperty,\n  resetNotifications,\n} from '../../store/actions';\nimport { withAuthRedirect } from '../../hoc';\n\nconst AddPropertyContainer = ({\n  fetchProperties,\n  propertiesError,\n  properties,\n  loading,\n  error,\n  createdProperty,\n  propertiesSpinnerOpen,\n  propertiesSpinnerClose,\n  logIn,\n  resetNotifications,\n}) => {\n  useEffect(() => {\n    resetNotifications();\n    fetchProperties();\n  }, [resetNotifications, fetchProperties]);\n\n  if (loading) {\n    return <Spinner />;\n  }\n\n  if (error) {\n    return <ErrorIndicator />;\n  }\n\n  return (\n    <AddProperty\n      properties={properties}\n      propertiesError={propertiesError}\n      createdProperty={createdProperty}\n      propertiesSpinnerOpen={propertiesSpinnerOpen}\n      propertiesSpinnerClose={propertiesSpinnerClose}\n    />\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    properties: state.properties.properties,\n    loading: state.properties.loading,\n    error: state.properties.error,\n    logIn: state.isAuth.logIn,\n  };\n};\n\nconst mapDispatchToProps = {\n  fetchProperties,\n  propertiesError,\n  createdProperty,\n  propertiesSpinnerOpen,\n  propertiesSpinnerClose,\n  resetNotifications,\n};\n\nexport default compose(\n  withAuthRedirect,\n  connect(mapStateToProps, mapDispatchToProps)\n)(AddPropertyContainer);\n","import React, { useEffect, useState } from 'react';\nimport { FieldArray } from 'formik';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport RemoveCircleOutlineIcon from '@material-ui/icons/RemoveCircleOutline';\nimport IconButton from '@material-ui/core/IconButton';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\n\nimport {\n  useAddItemSelectStyles,\n  useAddPropInputStyles,\n  useAddPropertyButtonStyles,\n} from '../../styles/customizing-material-ui-components';\n\nimport './add-property-to-product.scss';\n\nconst AddPropertyToProduct = ({\n  handleChange,\n  touched,\n  errors,\n  handleBlur,\n  values,\n  properties,\n  getError,\n  setFieldValue,\n  setFieldTouched,\n}) => {\n  const classesSelect = useAddItemSelectStyles();\n  const classesButton = useAddPropertyButtonStyles();\n  const classesInput = useAddPropInputStyles();\n\n  const { propertiesOfProduct } = values;\n\n  // Храним массив оставшихся свойств.\n  const [lastProperties, setLastProperties] = useState(properties);\n\n  // если товар редактируется, из свего массива свойств вычитаю массив свойств, которые уже есть у товара,\n  // и переопределяю массив оставшихся свойств. В случае, если товар только добавляется, то результатом вычитания останется\n  // изначальный массив свойств (полученный с сервера).\n  // Вычитание произвожу по имени свойств (propertyName).\n  const propertiesWithEditing = (properties, propertiesOfProduct) => {\n    const result = properties.filter(\n      (x) => !propertiesOfProduct.some((y) => x.propertyName === y.propertyName)\n    );\n    setLastProperties(result);\n  };\n\n  useEffect(() => {\n    propertiesWithEditing(properties, propertiesOfProduct);\n  }, [properties, propertiesOfProduct]);\n\n  const removeSelectedProperties = (event, index) => {\n    handleChange(event);\n    // При перевыборе свойства, очищаю его значение (устанвливаю значение на пустую строку), что бы при выборе другого\n    // свойства, ранее вбитые значения не присваивались ему автоматически\n    setFieldValue(`propertiesOfProduct.${index}.propertyValue`, '', false);\n    // При перевыборе свойства, очищаю параметр touched т.к. если этого не сделать, то сработавшие errors передадутся на\n    // заново выбранное свойство\n    setFieldTouched(`propertiesOfProduct.${index}.propertyValue`, false, false);\n    // удаляю выбранное свойство из массива оставшихся свойств\n    const { value } = event.target;\n    const lastProps = lastProperties.filter(\n      (item) => item.propertyName !== value\n    );\n    setLastProperties(lastProps);\n  };\n\n  // если происходит удаление свойства у товара, то происходит поиск по имении удаляемого свойства в массиве всех свойств\n  // и добавляется данное свойство (объект с этим свойством) в массив оставшихся свойств\n  const pushSelectedProperties = (property) => {\n    if (property) {\n      const selectedProperty = properties.find(\n        ({ propertyName }) => propertyName === property\n      );\n      lastProperties.push(selectedProperty);\n    }\n    return null;\n  };\n\n  // в случае, когда в селекте выбрано свойство, делаю копию оставшихся свойств и добавляю его для дальнейшего\n  // рендеринга итемов для селекта, иначе любое выбранное свойство удаляется из массива оставшихся свойств\n  const selectedWithLastProperties = (propName) => {\n    const selectedProperty = properties.find(\n      ({ propertyName }) => propertyName === propName\n    );\n    // делаю копию массива оставшихся свойств\n    const arr = lastProperties.slice();\n    // пушу к этому массиву выбранное в селекте свойство\n    arr.push(selectedProperty);\n    // рендерю итемы для селекта свойств\n    return arr.map(renderMenuItems);\n  };\n\n  const renderMenuItems = (item, index) => {\n    const { propertyName } = item;\n    return (\n      <MenuItem value={propertyName} key={index}>\n        {propertyName}\n      </MenuItem>\n    );\n  };\n\n  const renderValueInputs = (selectedProp, index) => {\n    // нахожу по имени выбранное свойство из массива всех возможных свойств\n    const selectedProperty = properties.find(\n      ({ propertyName }) => propertyName === selectedProp.propertyName\n    );\n    // присваиваю тип и id выбранного свойства в массив добавленных свойств данному товару\n    selectedProp.propertyType = selectedProperty.propertyType; // записываю тип свойства в propertiesOfProduct[index].propertyType товара\n    selectedProp.id = selectedProperty.id; //записываю id свойства в propertiesOfProduct[index].id товара\n\n    const nameOfFieldArray = `propertiesOfProduct.${index}.propertyValue`;\n    switch (selectedProperty.propertyType) {\n      case 'Dropdown':\n        const errorConditionDropdown = (idx) => {\n          return (\n            touched.propertiesOfProduct &&\n            touched.propertiesOfProduct[index] &&\n            errors.propertiesOfProduct &&\n            errors.propertiesOfProduct[index] &&\n            touched.propertiesOfProduct[index].propertyValue &&\n            errors.propertiesOfProduct[index].propertyValue &&\n            touched.propertiesOfProduct[index].propertyValue[idx] &&\n            errors.propertiesOfProduct[index].propertyValue[idx]\n          );\n        };\n        return (\n          <FieldArray name={`${nameOfFieldArray}`}>\n            {({ remove, push }) => (\n              <div className={'add-property-right-column'}>\n                <p className={'property-name'}>Значение</p>\n                {/*В случае если массив значений свойства DROPDOWN будет пустым, не выполнять мапинг*/}\n                {selectedProp.propertyValue &&\n                  selectedProp.propertyValue.length > 0 &&\n                  selectedProp.propertyValue.map((selectedPropValue, idx) => (\n                    <div className={'input-with-remove-button'} key={idx}>\n                      <FormControl\n                        error={\n                          errorConditionDropdown(idx)\n                            ? Boolean(touched.propertiesOfProduct[index].propertyValue[idx].propertyValue &&\n                                  errors.propertiesOfProduct[index].propertyValue[idx].propertyValue)\n                            : null\n                        }\n                      >\n                        <OutlinedInput\n                          type=\"text\"\n                          variant=\"outlined\"\n                          notched={false}\n                          multiline\n                          classes={{\n                            root: classesInput.root,\n                            input: classesInput.input,\n                          }}\n                          name={`${nameOfFieldArray}.${idx}.propertyValue`}\n                          onChange={handleChange}\n                          onBlur={handleBlur}\n                          value={\n                            propertiesOfProduct[index].propertyValue[idx]\n                              .propertyValue\n                          }\n                        />\n                        {errorConditionDropdown(idx)\n                          ? getError(\n                              touched.propertiesOfProduct[index].propertyValue[\n                                idx\n                              ].propertyValue,\n                              errors.propertiesOfProduct[index].propertyValue[\n                                idx\n                              ].propertyValue\n                            )\n                          : null}\n                      </FormControl>\n                      <IconButton\n                        classes={{ root: classesButton.root }}\n                        onClick={() => remove(idx)}\n                      >\n                        <RemoveCircleOutlineIcon />\n                      </IconButton>\n                    </div>\n                  ))}\n                <div className={'right-column-add-button'}>\n                  <IconButton\n                    classes={{ root: classesButton.root }}\n                    onClick={() => push({ propertyValue: '' })}\n                  >\n                    <AddCircleOutlineIcon />\n                  </IconButton>\n                </div>\n              </div>\n            )}\n          </FieldArray>\n        );\n      case 'Number':\n        const errorConditionNumber =\n          touched.propertiesOfProduct &&\n          touched.propertiesOfProduct[index] &&\n          errors.propertiesOfProduct &&\n          errors.propertiesOfProduct[index];\n        return (\n          <div className={'add-property-right-column'}>\n            <p className={'property-name'}>Значение</p>\n            <FormControl\n              error={\n                errorConditionNumber\n                  ? Boolean(\n                      touched.propertiesOfProduct[index].propertyValue &&\n                        errors.propertiesOfProduct[index].propertyValue\n                    )\n                  : null\n              }\n            >\n              <OutlinedInput\n                type=\"number\"\n                variant=\"outlined\"\n                notched={false}\n                classes={{\n                  root: classesInput.root,\n                  input: classesInput.input,\n                }}\n                name={`${nameOfFieldArray}`}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={propertiesOfProduct[index].propertyValue}\n              />\n              {errorConditionNumber\n                ? getError(\n                    touched.propertiesOfProduct[index].propertyValue,\n                    errors.propertiesOfProduct[index].propertyValue\n                  )\n                : null}\n            </FormControl>\n          </div>\n        );\n      case 'String':\n        const errorConditionString =\n          touched.propertiesOfProduct &&\n          touched.propertiesOfProduct[index] &&\n          errors.propertiesOfProduct &&\n          errors.propertiesOfProduct[index];\n        return (\n          <div className={'add-property-right-column'}>\n            <p className={'property-name'}>Значение</p>\n            <FormControl\n              error={\n                errorConditionString\n                  ? Boolean(\n                      touched.propertiesOfProduct[index].propertyValue &&\n                        errors.propertiesOfProduct[index].propertyValue\n                    )\n                  : null\n              }\n            >\n              <OutlinedInput\n                type=\"text\"\n                variant=\"outlined\"\n                notched={false}\n                multiline\n                classes={{\n                  root: classesInput.root,\n                  input: classesInput.input,\n                }}\n                name={`${nameOfFieldArray}`}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={propertiesOfProduct[index].propertyValue}\n              />\n              {errorConditionString\n                ? getError(\n                    touched.propertiesOfProduct[index].propertyValue,\n                    errors.propertiesOfProduct[index].propertyValue\n                  )\n                : null}\n            </FormControl>\n          </div>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <FieldArray name={'propertiesOfProduct'}>\n      {({ remove, push }) => (\n        <div className={'add-property-to-product'}>\n          <div className={'add-property-head'}>\n            <h5>Добавление товару свойств</h5>\n            {/*отключаем кнопку добавления свойств, когда кол-во свойств в товаре равно количеству достпуных свойств*/}\n            {properties.length > propertiesOfProduct.length && (\n              <IconButton\n                classes={{ root: classesButton.root }}\n                onClick={() =>\n                  push({\n                    id: '',\n                    propertyName: '',\n                    propertyValue: '',\n                    propertyType: '',\n                  })\n                }\n              >\n                <AddCircleOutlineIcon />\n              </IconButton>\n            )}\n          </div>\n          <div className={'add-property-body'}>\n            {propertiesOfProduct.map((propertyOfProduct, index) => (\n              <div className=\"add-property-body-element\" key={index}>\n                <div className={'add-prop-left-column'}>\n                  <div className={'add-prop-row'}>\n                    <div className={'add-prop-left-button-wrap'}>\n                      <IconButton\n                        classes={{ root: classesButton.root }}\n                        onClick={() => {\n                          pushSelectedProperties(\n                            propertiesOfProduct[index].propertyName\n                          );\n                          remove(index);\n                        }}\n                      >\n                        <RemoveCircleOutlineIcon />\n                      </IconButton>\n                    </div>\n                    <p className={'property-name'}>Свойство {index + 1}</p>\n                  </div>\n                  <FormControl\n                    variant=\"outlined\"\n                    className={classesSelect.formControl}\n                    classes={{ label: classesSelect.label }}\n                  >\n                    <Select\n                      classes={{\n                        root: classesSelect.root,\n                        icon: classesSelect.icon,\n                      }}\n                      name={`propertiesOfProduct.${index}.propertyName`}\n                      value={propertiesOfProduct[index].propertyName}\n                      onChange={(event) => {\n                        removeSelectedProperties(event, index);\n                      }}\n                      onBlur={handleBlur}\n                      notched={\n                        false\n                      } /*Если true, на контуре сделана выемка для размещения метки.*/\n                    >\n                      {/*если в селекте выбрано свойство, добавить его к оставшимся свойствам,\n                      но только для рендеринга итемов для селекта,иначе просто отрендерить оставшиеся свойства*/}\n                      {propertiesOfProduct[index].propertyName\n                        ? selectedWithLastProperties(\n                            propertiesOfProduct[index].propertyName\n                          )\n                        : lastProperties.map(renderMenuItems)}\n                    </Select>\n                  </FormControl>\n                </div>\n                {propertiesOfProduct[index].propertyName &&\n                  renderValueInputs(propertiesOfProduct[index], index)}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </FieldArray>\n  );\n};\n\nexport {AddPropertyToProduct};\n","import React, { useEffect, useState } from 'react';\n\nimport './thumb.scss';\n\nconst Thumb = ({ file }) => {\n  const [thumb, setThumb] = useState(undefined);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n    setThumb(() => {\n      let reader = new FileReader();\n\n      reader.onloadend = () => {\n        setThumb(reader.result);\n      };\n\n      reader.readAsDataURL(file);\n    });\n  }, [file]);\n\n  if (!file) {\n    return null;\n  }\n\n  return (\n    <img src={thumb} alt={file.name} className={'thumb svg-thumbnail mt-2'} />\n  );\n};\n\nexport { Thumb };\n","import React from 'react';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\n\nconst PriceFormatInput = ({ classesInput, onChange, onBlur, values }) => {\n  return (\n    <OutlinedInput\n    variant=\"outlined\"\n    notched={false}\n    placeholder=\"Стоимость товара\"\n    className={'number-input'}\n    classes={{\n        root: classesInput.root,\n        input: classesInput.input,\n    }}\n    name={'price'}\n    onChange={onChange} // необходимо прокидывать с такими именами, иначе NumberFormat не сработает\n    onBlur={onBlur} // необходимо прокидывать с такими именами, иначе NumberFormat не сработает\n    value={values.price.toLocaleString('ru-RU')} // toLocaleString добавлен, что бы при редактировании цена отображалась в правильном формате\n    />\n  );\n};\n\nexport { PriceFormatInput };\n","import React, { useState } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport * as yup from 'yup';\nimport { FieldArray, FormikProvider, useFormik } from 'formik';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport { FormControl, FormHelperText, FormLabel } from '@material-ui/core';\nimport NumberFormat from 'react-number-format';\n\nimport { AddPropertyToProduct } from '../../components/add-property-to-product';\nimport { Thumb } from '../../components/thumb';\nimport { PriceFormatInput } from '../../components/price-format-input';\nimport {\n  getDateOfChange,\n  postItemsToDatabase,\n  putItemsToDatabase,\n  storage,\n} from '../../services';\n\nimport {\n  theme,\n  themeUploadBtn,\n  useAddItemInputStyles,\n  useAddItemLabelStyles,\n  useAddItemTextareaStyles,\n  useSaveButtonStyles,\n  useUploadButtonStyles,\n} from '../../styles/customizing-material-ui-components';\n\nimport './add-item.scss';\n\nconst AddItem = ({\n  properties,\n  productsError,\n  itemId,\n  editingProduct,\n  clearSelectedProduct,\n  createdProduct,\n  editedProduct,\n  productsSpinnerOpen,\n  productsSpinnerClose,\n}) => {\n  const [image, setImage] = useState(null);\n\n  const classesLabel = useAddItemLabelStyles();\n  const classesInput = useAddItemInputStyles();\n  const classesSaveBtn = useSaveButtonStyles();\n  const classesUploadBtn = useUploadButtonStyles();\n  const classesTextarea = useAddItemTextareaStyles();\n\n  // отображенире цены происходит с пробелами чсерез каждых три символа\n  const priceFormat = (value) => {\n    return value.toString().replace(/(\\d)(?=(\\d{3})+$)/g, '$1 ');\n  };\n\n  // Создаем массив \"уникальных\" свойсв, который включает в себя все свойства с сервера и свойства товара,\n  // которых нет на сервере (т.е. товар был создан с свойствами, которые в последствии были удалены с сервреа).\n  const createUniqueProperties = (allProperties, propertiesOfProduct) => {\n    // Если товав не имеет свойств, то возвращаем все свойства с сервера\n    if(!propertiesOfProduct) {\n      return allProperties;\n    }\n    // Находим все свойства товара, которых нет в общем массиве свойств на сервере\n    const uniqueResultTwo = propertiesOfProduct.filter(function (obj) {\n      return !allProperties.some(function (obj2) {\n        return obj.id === obj2.id;\n      });\n    });\n\n    // Добавляем ко всем свойствам, свойства найденные в товаре, но которых нет на сервере\n    return allProperties.concat(uniqueResultTwo);\n  };\n\n  const validationSchema = yup.object().shape({\n    itemName: yup\n      .string()\n      .typeError('Должно быть строкой')\n      .trim('Без паробелов')\n      .required('Обязательное поле'),\n    price: yup\n      .number()\n      .typeError('Должно быть числом')\n      .integer('Должно быть целым числом')\n      .test('firstSymbol', 'Стоимость не должна ровняться нулю', (value) => {\n        return value?.toString().charAt(0) !== '0'; // число НЕ должно быть 0\n      })\n      .required('Обязательное поле'),\n    file: itemId\n      ? // если есть ID продукта, то повторная загрузка картинки не обязательна\n        yup.array().of(\n          yup\n            .object()\n            .shape({\n              file: yup\n                .mixed()\n                .test(\n                  'fileSize',\n                  'Размер файла не должен превышать 150кб',\n                  (value) => {\n                    if (!value) return false;\n                    return value.size < 153600;\n                  }\n                ),\n              type: yup\n                .string()\n                .oneOf(\n                  ['image/jpeg', 'image/png', 'image/pjpeg'],\n                  'Добавьте файл с правильным форматом .jpg,.jpeg,.png'\n                ),\n              name: yup.string(),\n            })\n            .nullable()\n            .typeError('Добавьте файл')\n        )\n      : yup\n          .array()\n          .of(\n            yup\n              .object()\n              .shape({\n                file: yup\n                  .mixed()\n                  .test(\n                    'fileSize',\n                    'Размер файла не должен превышать 150кб',\n                    (value) => {\n                      if (!value) return false;\n                      return value.size < 153600;\n                    }\n                  )\n                  .required(),\n                type: yup\n                  .string()\n                  .oneOf(\n                    ['image/jpeg', 'image/png', 'image/pjpeg'],\n                    'Добавьте файл с правильным форматом .jpg,.jpeg,.png'\n                  )\n                  .required(),\n                name: yup.string().required(),\n              })\n              .typeError('Добавьте файл')\n          )\n          .required(),\n    fileUrl: yup.string().nullable().typeError('Должно быть строкой'),\n    description: yup\n      .string()\n      .typeError('Должно быть строкой')\n      .required('Обязательное поле'),\n    propertiesOfProduct: yup.array().of(\n      yup\n        .object()\n        .shape({\n          id: yup\n            .string()\n            .typeError('Должно быть строкой')\n            .required('Обязательное поле'),\n          propertyName: yup\n            .string()\n            .typeError('Должно быть строкой')\n            .required('Обязательное поле'),\n          propertyType: yup\n            .string()\n            .typeError('Должно быть строкой')\n            .required('Обязательное поле'),\n          propertyValue: yup.lazy((value) => {\n            switch (typeof value) {\n              case 'number':\n                return yup\n                  .number()\n                  .typeError('Должно быть числом')\n                  .required('Обязательное поле');\n              case 'string':\n                return yup\n                  .string()\n                  .typeError('Должно быть строкой')\n                  .required('Обязательное поле');\n              default:\n                return yup\n                  .array()\n                  .of(\n                    yup.object().shape({\n                      propertyValue: yup\n                        .string()\n                        .typeError('Должно быть строкой')\n                        .required('Обязательное поле'),\n                    })\n                  )\n                  .required('Обязательное поле');\n            }\n          }),\n        })\n        .required('Обязательное поле')\n    ),\n  });\n\n  const getFileSchema = (file) =>\n    file && {\n      file: file,\n      type: file.type,\n      name: file.name,\n    };\n\n  const fileHandleChange = (e) => {\n    if (e.target.files[0]) {\n      setImage(e.target.files[0]);\n    } else setImage(null);\n  };\n\n  const getArrErrorsMessages = (errors) => {\n    const result = [];\n    errors &&\n      Array.isArray(errors) &&\n      errors.forEach((value) => {\n        if (typeof value === 'string') {\n          result.push(value);\n        } else {\n          Object.values(value).forEach((error) => {\n            result.push(error);\n          });\n        }\n      });\n    return result;\n  };\n\n  const getError = (touched, error, index) => {\n    return (\n      touched && error && <FormHelperText key={index}>{error}</FormHelperText>\n    );\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      itemName: editingProduct.itemName,\n      // для контролируемого input необходимо задать изначально пустую строку либо определенное значение\n      price: itemId ? editingProduct.price : '',\n      file: undefined,\n      fileUrl: editingProduct.fileUrl,\n      dateOfChange: '',\n      description: editingProduct.description,\n      // Если это редактируемый товар, и у него есть свойства, то сюда передается их массив, иначе создается пустой массив\n      propertiesOfProduct:\n        itemId && editingProduct.propertiesOfProduct\n          ? editingProduct.propertiesOfProduct\n          : [],\n    },\n    validationSchema: validationSchema,\n    onSubmit: async (values) => {\n      productsSpinnerOpen();\n      const { itemName, description, price, propertiesOfProduct } = values;\n      const trimmedItemName = itemName.trim();\n      const trimmedDescription = description.trim();\n      const numberedPrice = parseInt(String(price).replace(/ /g, ''));\n      const trimmedPropsOfProduct = propertiesOfProduct.map((props) => {\n        if (typeof props.propertyValue === 'string') {\n          return { ...props, propertyValue: props.propertyValue.trim() };\n        } else if (Array.isArray(props.propertyValue)) {\n          return {\n            ...props,\n            propertyValue: props.propertyValue.map((propValue) => {\n              return {\n                ...propValue,\n                propertyValue: propValue.propertyValue.trim(),\n              };\n            }),\n          };\n        } else return props;\n      });\n\n      if (image) {\n        // добавление случайного шестизначного числа к названию файла, для того что бы файлы с одинаковыми именами\n        // не перезаписывали друг друга\n        const fileNameWithRndNumber = `${image.name}_${Math.floor(\n          Math.random() * 1000000\n        )}`;\n        const uploadTask = storage\n          .ref(`images/${fileNameWithRndNumber}`)\n          .put(image);\n        await uploadTask.on(\n          'state_changed',\n          (snapshot) => {},\n          (error) => {\n            productsError(error);\n          },\n          () => {\n            storage\n              .ref('images')\n              .child(fileNameWithRndNumber)\n              .getDownloadURL()\n              .then((url) => {\n                const newValues = {\n                  ...values,\n                  itemName: trimmedItemName,\n                  description: trimmedDescription,\n                  price: numberedPrice,\n                  propertiesOfProduct: trimmedPropsOfProduct,\n                  file: [], // чистим массив с фото, т.к. он не нужен в\n                  // realtime firebase, файл загружается в firebase storage\n                  fileUrl: url,\n                };\n\n                // Сработает, если товар редактируется\n                if (itemId) {\n                  putItemsToDatabase(\n                    { ...newValues, dateOfChange: getDateOfChange() },\n                    itemId,\n                    'products',\n                    productsError,\n                    productsSpinnerClose,\n                    editedProduct\n                  );\n                } else {\n                  postItemsToDatabase(\n                    { ...newValues, dateOfChange: getDateOfChange() },\n                    'products',\n                    productsError,\n                    productsSpinnerClose,\n                    createdProduct\n                  );\n                }\n              });\n          }\n        );\n      }\n      // Сработает, если товар редактируется, но при этом изображение не было изменено (не было перевыбрано).\n      else {\n        const newValues = {\n          ...values,\n          itemName: trimmedItemName,\n          description: trimmedDescription,\n          price: numberedPrice,\n          propertiesOfProduct: trimmedPropsOfProduct,\n          file: [], // чистим массив с фото, т.к. он не нужен в\n          // realtime firebase, файл загружается в firebase storage\n        };\n\n        await putItemsToDatabase(\n          { ...newValues, dateOfChange: getDateOfChange() },\n          itemId,\n          'products',\n          productsError,\n          productsSpinnerClose,\n          editedProduct\n        );\n      }\n    },\n    validateOnBlur: true,\n  });\n\n  const {\n    values,\n    errors,\n    touched,\n    handleChange,\n    handleBlur,\n    isValid,\n    handleSubmit,\n    dirty,\n    setFieldTouched,\n    setFieldValue,\n  } = formik;\n\n  return (\n    <FormikProvider value={formik}>\n      {/*для того чтобы работал arrayHelper в инпуте type file*/}\n      <ThemeProvider theme={theme}>\n        <div className={'add-item'}>\n          <div className={'add-item-bordered-wrap'}>\n            <form onSubmit={handleSubmit} className={'add-item-wrap'}>\n              <div className={'buttons-wrap'}>\n                <Link\n                  to={'/'}\n                  className={'button-back'}\n                  onClick={clearSelectedProduct}\n                >\n                  Вернуться\n                </Link>\n                <Button\n                  disableRipple={true}\n                  className={'button-save'}\n                  classes={{\n                    root: classesSaveBtn.root,\n                    label: classesSaveBtn.label,\n                  }}\n                  type={'submit'}\n                  disabled={!isValid || !dirty}\n                  onClick={handleSubmit}\n                >\n                  Сохранить\n                </Button>\n              </div>\n              <div className={'add-item-head'}>\n                <h5>\n                  {itemId ? 'Редактирование товара' : 'Добавление товара'}\n                </h5>\n              </div>\n              <div className={'add-item-body'}>\n                <FormControl\n                  error={Boolean(touched.itemName && errors.itemName)}\n                >\n                  <FormLabel\n                    classes={{ root: classesLabel.root }}\n                    className={'labels'}\n                  >\n                    Название товара<span className={'red-star'}>*</span>\n                  </FormLabel>\n                  <OutlinedInput\n                    type=\"text\"\n                    variant=\"outlined\"\n                    notched={false}\n                    placeholder=\"Название товара\"\n                    multiline\n                    classes={{\n                      root: classesInput.root,\n                      input: classesInput.input,\n                    }}\n                    name={'itemName'}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.itemName}\n                  />\n                  {getError(touched.itemName, errors.itemName)}\n                </FormControl>\n\n                <FormControl error={Boolean(touched.price && errors.price)}>\n                  <FormLabel\n                    classes={{ root: classesLabel.root }}\n                    className={'labels'}\n                  >\n                    Стоимость товара<span className={'red-star'}>*</span>\n                  </FormLabel>\n                  <NumberFormat\n                    classesInput={classesInput}\n                    onChange={handleChange} // необходимо прокидывать с такими именами, иначе NumberFormat не сработает\n                    onBlur={handleBlur} // необходимо прокидывать с такими именами, иначе NumberFormat не сработает\n                    values={values}\n                    customInput={PriceFormatInput}\n                    format={priceFormat}\n                  />\n                  {getError(touched.price, errors.price)}\n                </FormControl>\n\n                <FormControl error={Boolean(touched.file && errors.file)}>\n                  <FormLabel\n                    classes={{ root: classesLabel.root }}\n                    className={'labels'}\n                  >\n                    Изображение<span className={'red-star'}>*</span>\n                  </FormLabel>\n                  <FieldArray name={'file'}>\n                    {(arrayHelper) => (\n                      <div>\n                        <input\n                          accept=\".jpg,.jpeg,.png\"\n                          className={'upload-input'}\n                          id=\"contained-button-file\"\n                          multiple\n                          type=\"file\"\n                          name={'file'}\n                          onBlur={handleBlur}\n                          onChange={(event) => {\n                            const { files } = event.target;\n                            const file = getFileSchema(files.item(0));\n                            setFieldTouched('file', true, false);\n                            fileHandleChange(event);\n                            values.fileUrl = null; // при выборе картинки обнуляю ссылку на неё\n                            if (!file) {\n                              arrayHelper.remove(0);\n                              setFieldTouched('file', true, false);\n                              values.fileUrl = editingProduct.fileUrl; // если отменил выбор картинки (нажал кнопку \"отмена\"),\n                              // ссылу на изображение беру из редактируемого товара\n                            }\n                            if (Array.isArray(values.file)) {\n                              arrayHelper.replace(0, file);\n                            } else {\n                              arrayHelper.push(file);\n                            }\n                          }}\n                        />\n                        <label\n                          className={'upload-bnt-label'}\n                          htmlFor=\"contained-button-file\"\n                        >\n                          <ThemeProvider theme={themeUploadBtn}>\n                            <Button\n                              variant=\"contained\"\n                              component=\"span\"\n                              disableRipple={true}\n                              classes={{\n                                root: classesUploadBtn.root,\n                                label: classesUploadBtn.label,\n                              }}\n                              endIcon={\n                                <i\n                                  className=\"fa fa-upload\"\n                                  aria-hidden=\"true\"\n                                />\n                              }\n                            >\n                              {values.file === undefined ||\n                              values.file[0] === null ? (\n                                <div className={'upload-btn-name'}>\n                                  Выберите изображение\n                                </div>\n                              ) : (\n                                values.file[0].file.name\n                              )}\n                            </Button>\n                          </ThemeProvider>\n                        </label>\n                      </div>\n                    )}\n                  </FieldArray>\n                  {getArrErrorsMessages(errors.file).map((error, index) =>\n                    getError(true, error, index)\n                  )}\n                </FormControl>\n                {/*Если редактируем товар, то загружаем его картинку сразу, но при выборе другой картинки\n                                используем мимниатюру Thumb*/}\n                {values.fileUrl ? (\n                  <img\n                    src={values.fileUrl}\n                    alt={'изображение товара'}\n                    className={'thumb svg-thumbnail mt-2'}\n                  />\n                ) : (\n                  <Thumb\n                    file={\n                      values.file === undefined || values.file[0] === null\n                        ? null\n                        : values.file[0].file\n                    }\n                  />\n                )}\n                <FormControl\n                  error={Boolean(touched.description && errors.description)}\n                >\n                  <FormLabel\n                    classes={{ root: classesLabel.root }}\n                    className={'labels'}\n                  >\n                    Описание<span className={'red-star'}>*</span>\n                  </FormLabel>\n                  <OutlinedInput\n                    type=\"text\"\n                    multiline={true}\n                    rows={5}\n                    inputProps={{ maxLength: 1000 }}\n                    variant=\"outlined\"\n                    notched={false}\n                    placeholder=\"Описание товара не должно превышать 1000 символов\"\n                    className={'add-item-textarea'}\n                    classes={{\n                      root: classesTextarea.root,\n                    }}\n                    name={'description'}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.description}\n                  />\n                  {getError(touched.description, errors.description)}\n                </FormControl>\n              </div>\n              <AddPropertyToProduct\n                handleChange={handleChange}\n                touched={touched}\n                errors={errors}\n                handleBlur={handleBlur}\n                values={values}\n                properties={itemId ? createUniqueProperties(properties, editingProduct.propertiesOfProduct) : properties}\n                getError={getError}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n              />\n            </form>\n          </div>\n        </div>\n      </ThemeProvider>\n    </FormikProvider>\n  );\n};\n\nexport default withRouter(AddItem);\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\n\nimport { Spinner } from '../../components/spinner';\nimport { ErrorIndicator } from '../error-indicator';\nimport AddItem from './add-item';\nimport {\n  fetchProperties,\n  fetchProducts,\n  productsError,\n  productsSpinnerClose,\n  productsSpinnerOpen,\n  clearSelectedProduct,\n  fetchSelectedProduct,\n  createdProduct,\n  editedProduct,\n  resetNotifications,\n} from '../../store/actions';\nimport { withAuthRedirect } from '../../hoc';\n\nconst AddItemContainer = ({\n  fetchProperties,\n  fetchProducts,\n  productsError,\n  properties,\n  loadingProps,\n  errorProps,\n  products,\n  loadingProducts,\n  errorProducts,\n  loadingEditingProduct,\n  errorEditingProduct,\n  editingProduct,\n  fetchSelectedProduct,\n  clearSelectedProduct,\n  createdProduct,\n  editedProduct,\n  productsSpinnerOpen,\n  productsSpinnerClose,\n  match,\n  resetNotifications,\n}) => {\n  const itemId = match.params.id;\n\n  useEffect(() => {\n    resetNotifications();\n    fetchProducts();\n    fetchProperties();\n    if (itemId) {\n      fetchSelectedProduct(itemId);\n    }\n    // срабатывает при уничтожении компоненты. Очищаю бывранный товар, т.к. если этого не делать, то при нажатии\n    // на backspace с редактируемого товара и последующем переходе на добавление товара в инпуты прогружаются\n    // данные ранее редактируемого товара\n    return () => clearSelectedProduct();\n  }, [itemId, resetNotifications, fetchProducts, fetchProperties, fetchSelectedProduct, clearSelectedProduct]);\n\n\n\n  if (loadingProps || loadingProducts || (loadingEditingProduct && itemId)) {\n    return <Spinner />;\n  }\n\n  if (errorProps || errorProducts || (errorEditingProduct && itemId)) {\n    return <ErrorIndicator />;\n  }\n\n  return (\n    <AddItem\n      properties={properties}\n      products={products}\n      productsError={productsError}\n      itemId={itemId}\n      editingProduct={editingProduct}\n      clearSelectedProduct={clearSelectedProduct}\n      createdProduct={createdProduct}\n      editedProduct={editedProduct}\n      productsSpinnerOpen={productsSpinnerOpen}\n      productsSpinnerClose={productsSpinnerClose}\n    />\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    properties: state.properties.properties,\n    loadingProps: state.properties.loading,\n    errorProps: state.properties.error,\n    products: state.products.products,\n    loadingProducts: state.products.loading,\n    errorProducts: state.products.error,\n    loadingEditingProduct: state.selectedProduct.loading,\n    errorEditingProduct: state.selectedProduct.error,\n    editingProduct: state.selectedProduct.selectedProduct,\n  };\n};\n\nconst mapDispatchToProps = {\n  fetchProperties,\n  fetchProducts,\n  productsError,\n  fetchSelectedProduct,\n  clearSelectedProduct,\n  createdProduct,\n  editedProduct,\n  productsSpinnerOpen,\n  productsSpinnerClose,\n  resetNotifications,\n};\n\nexport default compose(\n  withAuthRedirect,\n  connect(mapStateToProps, mapDispatchToProps)\n)(AddItemContainer);\n","import React, { useCallback, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\n\nimport {\n  theme,\n  useLoginButtonStyles,\n  useProductCardItemSelectStyles,\n} from '../../styles/customizing-material-ui-components';\n\nimport './product-card.scss';\n\nconst ProductCard = ({ selectedProduct, clearSelectedProduct, logIn }) => {\n  const classes = useLoginButtonStyles();\n  const classesSelect = useProductCardItemSelectStyles();\n\n  const { itemName, fileUrl, description, price, propertiesOfProduct } =\n    selectedProduct;\n\n  const validationSchema = yup.object().shape({\n    itemName: yup\n      .string()\n      .typeError('Должно быть строкой')\n      .required('Обязательное поле'),\n    description: yup\n      .string()\n      .typeError('Должно быть строкой')\n      .required('Обязательное поле'),\n    fileUrl: yup\n      .string()\n      .typeError('Должно быть строкой')\n      .required('Обязательное поле'),\n    price: yup\n      .number()\n      .typeError('Должно быть числом')\n      .integer('Должно быть целым числом')\n      .required('Обязательное поле'),\n    propertiesOfProduct: yup.array().of(\n      yup.object().shape({\n        id: yup.string(),\n        propertyName: yup.string(),\n        propertyType: yup.string(),\n        propertyValue: yup.string(),\n      })\n    ),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      itemName: itemName,\n      description: description,\n      fileUrl: fileUrl,\n      price: price,\n      propertiesOfProduct: propertiesOfProduct ? propertiesOfProduct : [],\n    },\n    validationSchema: validationSchema,\n    onSubmit: async (values) => {\n      await new Promise((r) => setTimeout(r, 500));\n      console.log(values);\n    },\n    validateOnBlur: true,\n  });\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    isValid,\n    handleSubmit,\n    setFieldValue,\n  } = formik;\n\n  // При первом реднере компоненты, прохожу по массиву свойств товара и в случае, когда свойство имеет тип Dropdown,\n  // его первое значение из массива значений сразу устанавливаю в initialValues формика, т.к. если пользователь не выберет\n  // вручную какое либо свойство из селекта (т.е. не сработает onChange селекта), то в initialValues передастся весь\n  // массив значений свойств Dropdown, а не только одно значение.\n  const setFirstValuesFromDropDowns = useCallback(\n    (property, index) => {\n      if (property.propertyType === 'Dropdown') {\n        return setFieldValue(\n          `propertiesOfProduct.${index}.propertyValue`,\n          propertiesOfProduct[index].propertyValue[0].propertyValue,\n          false\n        );\n      }\n    },\n    [propertiesOfProduct, setFieldValue]\n  );\n\n  useEffect(() => {\n    if (propertiesOfProduct) {\n      propertiesOfProduct.map(setFirstValuesFromDropDowns);\n    }\n  }, [propertiesOfProduct, setFirstValuesFromDropDowns]);\n\n  const renderMenuItems = (item, index) => {\n    const { propertyValue } = item;\n    return (\n      <MenuItem value={propertyValue} key={index}>\n        {propertyValue}\n      </MenuItem>\n    );\n  };\n\n  const renderPropertiesOfProduct = (property, index) => {\n    const { propertyName, propertyType, propertyValue } = property;\n    switch (propertyType) {\n      case 'Dropdown':\n        return (\n          <div key={index}>\n            <h4>{propertyName}</h4>\n            <FormControl\n              variant=\"outlined\"\n              className={classesSelect.formControl}\n            >\n              <Select\n                classes={{\n                  root: classesSelect.root,\n                  icon: classesSelect.icon,\n                }}\n                name={`propertiesOfProduct.${index}.propertyValue`}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                /*Если true, на контуре сделана выемка для размещения имени селекта.*/\n                notched={false}\n                /*В данном случае будет первое значение из массива свойств Dropdown, т.к. при рендере\n                                этому полю было присвоено первое значение свойства из массива значений.\n                                Условие же необходимо, т.к. \"values.propertiesOfProduct[index].propertyValue\" изначально массив значений,\n                                а в селекте значением может быть простой элемекнт, а не массив, поэтому мы присваиваем пустую строку */\n                value={\n                  Array.isArray(values.propertiesOfProduct[index].propertyValue)\n                    ? ''\n                    : values.propertiesOfProduct[index].propertyValue\n                }\n              >\n                {propertyValue.map(renderMenuItems)}\n              </Select>\n            </FormControl>\n          </div>\n        );\n      case 'Number':\n        return (\n          <div key={index}>\n            <h4>{propertyName}</h4>\n            <p>{propertyValue}</p>\n          </div>\n        );\n      case 'String':\n        return (\n          <div key={index}>\n            <h4>{propertyName}</h4>\n            <p>{propertyValue}</p>\n          </div>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className={'product-card'}>\n      <div className={'product-card-bordered-wrap'}>\n        <div className={'product-card-wrap'}>\n          {logIn ? (\n            <div className={'link'}>\n              <Link to={'/'} onClick={clearSelectedProduct}>\n                Вернуться\n              </Link>\n            </div>\n          ) : null}\n          <form onSubmit={handleSubmit} className={'product-card-wrapper'}>\n            <div className={'header-items-row'}>\n              <div className={'item-image'}>\n                <img src={fileUrl} alt={'product'} />\n              </div>\n              <div className={'item-information'}>\n                <h3>{itemName}</h3>\n                <p>{description}</p>\n              </div>\n            </div>\n            <div className={'bottom-items-row'}>\n              <div className={'item-properties'}>\n                {propertiesOfProduct &&\n                  propertiesOfProduct.map(renderPropertiesOfProduct)}\n                <h4>Стоимость</h4>\n                <span className={'price'}>\n                  {price.toLocaleString('ru-RU')}$\n                </span>\n              </div>\n              <div className={'button-wrap'}>\n                <ThemeProvider theme={theme}>\n                  <Button\n                    classes={{\n                      root: classes.root,\n                      label: classes.label,\n                    }}\n                    type={'submit'}\n                    disabled={!isValid}\n                    onClick={handleSubmit}\n                  >\n                    Беру!!!\n                  </Button>\n                </ThemeProvider>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { ProductCard };\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport { Spinner } from '../../components/spinner';\nimport { ErrorIndicator } from '../error-indicator';\nimport { ProductCard } from './product-card';\nimport {\n  clearSelectedProduct,\n  fetchSelectedProduct,\n  resetNotifications,\n} from '../../store/actions';\n\nconst ProductCardContainer = ({\n  match,\n  selectedProduct,\n  loading,\n  error,\n  fetchSelectedProduct,\n  clearSelectedProduct,\n  logIn,\n  resetNotifications,\n}) => {\n  const itemId = match.params.id;\n\n  useEffect(() => {\n    resetNotifications();\n    fetchSelectedProduct(itemId);\n    // срабатывает при уничтожении компоненты. Очищаю бывранный товар, т.к. если этого не делать, то при нажатии\n    // на backspace с редактируемого товара и последующем переходе на добавление товара в инпуты прогружаются\n    // данные ранее редактируемого товара\n    return () => clearSelectedProduct();\n  }, [itemId, resetNotifications, fetchSelectedProduct, clearSelectedProduct]);\n\n  if (loading) {\n    return <Spinner />;\n  }\n\n  if (error) {\n    return <ErrorIndicator />;\n  }\n\n  return (\n    <ProductCard\n      selectedProduct={selectedProduct}\n      clearSelectedProduct={clearSelectedProduct}\n      logIn={logIn}\n    />\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    loading: state.selectedProduct.loading,\n    error: state.selectedProduct.error,\n    selectedProduct: state.selectedProduct.selectedProduct,\n    logIn: state.isAuth.logIn,\n  };\n};\n\nconst mapDispatchToProps = {\n  fetchSelectedProduct,\n  clearSelectedProduct,\n  resetNotifications,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ProductCardContainer);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport { MainContainer } from '../../pages/main';\nimport { LoginContainer } from '../../pages/login';\nimport { RegistrationContainer } from '../../pages/registration';\nimport { AddPropertyContainer } from '../../pages/add-property';\nimport { AddItemContainer } from '../../pages/add-item';\nimport { ProductCardContainer } from '../../pages/product-card';\nimport { ErrorIndicator } from '../../pages/error-indicator';\n\nimport './app.scss';\n\nconst App = () => {\n  return (\n    <div className={'app'}>\n      <div className={'wrapper'}>\n        <Switch>\n          <Route path={'/'} component={MainContainer} exact />\n          <Route path={'/property-list'} component={MainContainer} />\n          <Route path={'/add-property'} component={AddPropertyContainer} />\n          <Route path={'/item-card/:id'} component={ProductCardContainer} />\n          <Route path={'/add-item/:id?'} component={AddItemContainer} />\n          <Route path={'/login'} component={LoginContainer} />\n          <Route path={'/registration'} component={RegistrationContainer} />\n          <Route render={() => <ErrorIndicator />} />\n        </Switch>\n      </div>\n    </div>\n  );\n};\n\nexport { App };\n","import React, {useEffect} from 'react';\nimport { connect } from 'react-redux';\n\nimport { App } from './index';\nimport { userIsAuth } from '../../store/actions';\n\nconst AppContainer = ({ userIsAuth }) => {\n\n  useEffect(() => {\n    userIsAuth();\n  }, [userIsAuth]);\n\n  return <App />;\n};\n\nconst mapDispatchToProps = {\n  userIsAuth,\n};\n\nexport default connect(null, mapDispatchToProps)(AppContainer);","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\n\nconst Alert = (props) => {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n};\n\nconst Notifications = ({\n  history,\n  showNotification,\n  path,\n  deletedItem,\n  isEditing,\n  closeNotifications,\n}) => {\n  const backToListItems = (path) => {\n    return history.push(`${path}`);\n  };\n\n  const handleClose = (event, reason, dontBack) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    closeNotifications();\n\n    if (!dontBack) backToListItems(path);\n  };\n\n  if (isEditing && !deletedItem && path === '/') {\n    return (\n      <Snackbar\n        open={showNotification}\n        autoHideDuration={4000}\n        onClose={handleClose}\n      >\n        <Alert onClose={handleClose} severity=\"success\">\n          Товар успешно отредактирован! Вы будете автоматически перенаправлены в\n          список товаров.\n        </Alert>\n      </Snackbar>\n    );\n  }\n\n  if (!isEditing && !deletedItem && path === '/') {\n    return (\n      <Snackbar\n        open={showNotification}\n        autoHideDuration={4000}\n        onClose={handleClose}\n      >\n        <Alert onClose={handleClose} severity=\"success\">\n          Товар успешно добавлен! Вы будете автоматически перенаправлены в\n          список товаров.\n        </Alert>\n      </Snackbar>\n    );\n  }\n\n  if (!isEditing && !deletedItem && path === '/property-list') {\n    return (\n      <Snackbar\n        open={showNotification}\n        autoHideDuration={4000}\n        onClose={handleClose}\n      >\n        <Alert onClose={handleClose} severity=\"success\">\n          Свойство успешно добавлено! Вы будете автоматически перенаправлены в\n          список добавленных свойств.\n        </Alert>\n      </Snackbar>\n    );\n  }\n\n  if (deletedItem) {\n    return (\n      <Snackbar\n        open={showNotification}\n        autoHideDuration={4000}\n        onClose={(event, reason) => handleClose(event, reason, true)}\n      >\n        <Alert onClose={(event, reason) => handleClose(event, reason, true)} severity=\"success\">\n          {deletedItem === 'товар' ? 'Товар успешно удален' : null}\n          {deletedItem === 'свойство' ? 'Свойство успешно удалено' : null}\n        </Alert>\n      </Snackbar>\n    );\n  }\n\n  return null;\n};\n\nexport default withRouter(Notifications);","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport Notifications from './notifications';\nimport { closeNotifications } from '../../store/actions';\n\nconst NotificationsContainer = ({\n  showNotification,\n  path,\n  isEditing,\n  deletedItem,\n  closeNotifications,\n}) => {\n  return (\n    <Notifications\n      showNotification={showNotification}\n      path={path}\n      isEditing={isEditing}\n      deletedItem={deletedItem}\n      closeNotifications={closeNotifications}\n    />\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    showNotification: state.notifications.showNotification,\n    path: state.notifications.path,\n    isEditing: state.notifications.isEditing,\n    deletedItem: state.notifications.deletedItem,\n  };\n};\n\nconst mapDispatchToProps = {\n  closeNotifications,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(NotificationsContainer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\n\nimport store from '../src/store/store';\nimport { ErrorBoundary } from './components/error-boundary';\nimport { AppContainer } from './components/app';\nimport { NotificationsContainer } from './components/notifications';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    {/*Предоставляет доступ к Redux Store*/}\n    <ErrorBoundary>\n      {/*Обработка ошибок в компонентах ниже*/}\n      <HashRouter>\n        <NotificationsContainer />\n        <AppContainer />\n      </HashRouter>\n    </ErrorBoundary>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}